/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";

export interface RangeTestInterface extends utils.Interface {
  functions: {
    "IS_SCRIPT()": FunctionFragment;
    "IS_TEST()": FunctionFragment;
    "failed()": FunctionFragment;
    "setUp()": FunctionFragment;
    "testCorrectness_cannotSetParametersWithInvalidParams()": FunctionFragment;
    "testCorrectness_cannotUpdateMarketWithInvalidParams()": FunctionFragment;
    "testCorrectness_onlyPermittedPoliciesCanCallGatedFunctions()": FunctionFragment;
    "testCorrectness_regenerate()": FunctionFragment;
    "testCorrectness_setSpreads()": FunctionFragment;
    "testCorrectness_setThresholdFactor()": FunctionFragment;
    "testCorrectness_updateCapacity()": FunctionFragment;
    "testCorrectness_updateMarket()": FunctionFragment;
    "testCorrectness_updatePrices()": FunctionFragment;
    "testCorrectness_viewActive()": FunctionFragment;
    "testCorrectness_viewCapacity()": FunctionFragment;
    "testCorrectness_viewLastActive()": FunctionFragment;
    "testCorrectness_viewMarket()": FunctionFragment;
    "testCorrectness_viewPrice()": FunctionFragment;
    "testCorrectness_viewRange()": FunctionFragment;
    "testCorrectness_viewSpread()": FunctionFragment;
    "userCreator()": FunctionFragment;
    "vm()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_SCRIPT"
      | "IS_TEST"
      | "failed"
      | "setUp"
      | "testCorrectness_cannotSetParametersWithInvalidParams"
      | "testCorrectness_cannotUpdateMarketWithInvalidParams"
      | "testCorrectness_onlyPermittedPoliciesCanCallGatedFunctions"
      | "testCorrectness_regenerate"
      | "testCorrectness_setSpreads"
      | "testCorrectness_setThresholdFactor"
      | "testCorrectness_updateCapacity"
      | "testCorrectness_updateMarket"
      | "testCorrectness_updatePrices"
      | "testCorrectness_viewActive"
      | "testCorrectness_viewCapacity"
      | "testCorrectness_viewLastActive"
      | "testCorrectness_viewMarket"
      | "testCorrectness_viewPrice"
      | "testCorrectness_viewRange"
      | "testCorrectness_viewSpread"
      | "userCreator"
      | "vm",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_cannotSetParametersWithInvalidParams",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_cannotUpdateMarketWithInvalidParams",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_onlyPermittedPoliciesCanCallGatedFunctions",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "testCorrectness_regenerate", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_setSpreads", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_setThresholdFactor", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_updateCapacity", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_updateMarket", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_updatePrices", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_viewActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_viewCapacity", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_viewLastActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_viewMarket", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_viewPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_viewRange", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_viewSpread", values?: undefined): string;
  encodeFunctionData(functionFragment: "userCreator", values?: undefined): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testCorrectness_cannotSetParametersWithInvalidParams",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCorrectness_cannotUpdateMarketWithInvalidParams",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCorrectness_onlyPermittedPoliciesCanCallGatedFunctions",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_regenerate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setSpreads", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setThresholdFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_updateCapacity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_updateMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_updatePrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_viewActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_viewCapacity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_viewLastActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_viewMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_viewPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_viewRange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_viewSpread", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userCreator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;

  events: {
    "CushionDown(bool,uint256)": EventFragment;
    "CushionUp(bool,uint256,uint256)": EventFragment;
    "SpreadsChanged(uint256,uint256)": EventFragment;
    "WallDown(bool,uint256,uint256)": EventFragment;
    "WallUp(bool,uint256,uint256)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CushionDown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CushionUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpreadsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WallDown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WallUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_array(string,uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_array(string,int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_array(string,address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface CushionDownEventObject {
  high: boolean;
  timestamp: BigNumber;
}
export type CushionDownEvent = TypedEvent<[boolean, BigNumber], CushionDownEventObject>;

export type CushionDownEventFilter = TypedEventFilter<CushionDownEvent>;

export interface CushionUpEventObject {
  high: boolean;
  timestamp: BigNumber;
  capacity: BigNumber;
}
export type CushionUpEvent = TypedEvent<[boolean, BigNumber, BigNumber], CushionUpEventObject>;

export type CushionUpEventFilter = TypedEventFilter<CushionUpEvent>;

export interface SpreadsChangedEventObject {
  cushionSpread_: BigNumber;
  wallSpread_: BigNumber;
}
export type SpreadsChangedEvent = TypedEvent<[BigNumber, BigNumber], SpreadsChangedEventObject>;

export type SpreadsChangedEventFilter = TypedEventFilter<SpreadsChangedEvent>;

export interface WallDownEventObject {
  high_: boolean;
  timestamp_: BigNumber;
  capacity_: BigNumber;
}
export type WallDownEvent = TypedEvent<[boolean, BigNumber, BigNumber], WallDownEventObject>;

export type WallDownEventFilter = TypedEventFilter<WallDownEvent>;

export interface WallUpEventObject {
  high_: boolean;
  timestamp_: BigNumber;
  capacity_: BigNumber;
}
export type WallUpEvent = TypedEvent<[boolean, BigNumber, BigNumber], WallUpEventObject>;

export type WallUpEventFilter = TypedEventFilter<WallUpEvent>;

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<[BigNumber[]], log_array_uint256_array_EventObject>;

export type log_array_uint256_array_EventFilter = TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<[BigNumber[]], log_array_int256_array_EventObject>;

export type log_array_int256_array_EventFilter = TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<[string[]], log_array_address_array_EventObject>;

export type log_array_address_array_EventFilter = TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<[string, string], log_named_addressEventObject>;

export type log_named_addressEventFilter = TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<[string, string], log_named_bytesEventObject>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<[string, string], log_named_bytes32EventObject>;

export type log_named_bytes32EventFilter = TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<[string, BigNumber, BigNumber], log_named_decimal_intEventObject>;

export type log_named_decimal_intEventFilter = TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<[string, BigNumber, BigNumber], log_named_decimal_uintEventObject>;

export type log_named_decimal_uintEventFilter = TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<[string, BigNumber], log_named_intEventObject>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<[string, string], log_named_stringEventObject>;

export type log_named_stringEventFilter = TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<[string, BigNumber], log_named_uintEventObject>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface RangeTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RangeTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<[boolean]>;

    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    failed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setUp(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    testCorrectness_cannotSetParametersWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_cannotUpdateMarketWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_onlyPermittedPoliciesCanCallGatedFunctions(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_regenerate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    testCorrectness_setSpreads(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    testCorrectness_setThresholdFactor(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_updateCapacity(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_updateMarket(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_updatePrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_viewActive(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    testCorrectness_viewCapacity(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_viewLastActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_viewMarket(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    testCorrectness_viewPrice(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    testCorrectness_viewRange(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    testCorrectness_viewSpread(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    userCreator(overrides?: CallOverrides): Promise<[string]>;

    vm(overrides?: CallOverrides): Promise<[string]>;
  };

  IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  failed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setUp(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_cannotSetParametersWithInvalidParams(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_cannotUpdateMarketWithInvalidParams(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_onlyPermittedPoliciesCanCallGatedFunctions(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_regenerate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_setSpreads(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_setThresholdFactor(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_updateCapacity(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_updateMarket(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_updatePrices(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_viewActive(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_viewCapacity(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_viewLastActive(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_viewMarket(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_viewPrice(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_viewRange(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_viewSpread(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  userCreator(overrides?: CallOverrides): Promise<string>;

  vm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    setUp(overrides?: CallOverrides): Promise<void>;

    testCorrectness_cannotSetParametersWithInvalidParams(overrides?: CallOverrides): Promise<void>;

    testCorrectness_cannotUpdateMarketWithInvalidParams(overrides?: CallOverrides): Promise<void>;

    testCorrectness_onlyPermittedPoliciesCanCallGatedFunctions(overrides?: CallOverrides): Promise<void>;

    testCorrectness_regenerate(overrides?: CallOverrides): Promise<void>;

    testCorrectness_setSpreads(overrides?: CallOverrides): Promise<void>;

    testCorrectness_setThresholdFactor(overrides?: CallOverrides): Promise<void>;

    testCorrectness_updateCapacity(overrides?: CallOverrides): Promise<void>;

    testCorrectness_updateMarket(overrides?: CallOverrides): Promise<void>;

    testCorrectness_updatePrices(overrides?: CallOverrides): Promise<void>;

    testCorrectness_viewActive(overrides?: CallOverrides): Promise<void>;

    testCorrectness_viewCapacity(overrides?: CallOverrides): Promise<void>;

    testCorrectness_viewLastActive(overrides?: CallOverrides): Promise<void>;

    testCorrectness_viewMarket(overrides?: CallOverrides): Promise<void>;

    testCorrectness_viewPrice(overrides?: CallOverrides): Promise<void>;

    testCorrectness_viewRange(overrides?: CallOverrides): Promise<void>;

    testCorrectness_viewSpread(overrides?: CallOverrides): Promise<void>;

    userCreator(overrides?: CallOverrides): Promise<string>;

    vm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CushionDown(bool,uint256)"(high?: null, timestamp?: null): CushionDownEventFilter;
    CushionDown(high?: null, timestamp?: null): CushionDownEventFilter;

    "CushionUp(bool,uint256,uint256)"(high?: null, timestamp?: null, capacity?: null): CushionUpEventFilter;
    CushionUp(high?: null, timestamp?: null, capacity?: null): CushionUpEventFilter;

    "SpreadsChanged(uint256,uint256)"(cushionSpread_?: null, wallSpread_?: null): SpreadsChangedEventFilter;
    SpreadsChanged(cushionSpread_?: null, wallSpread_?: null): SpreadsChangedEventFilter;

    "WallDown(bool,uint256,uint256)"(high_?: null, timestamp_?: null, capacity_?: null): WallDownEventFilter;
    WallDown(high_?: null, timestamp_?: null, capacity_?: null): WallDownEventFilter;

    "WallUp(bool,uint256,uint256)"(high_?: null, timestamp_?: null, capacity_?: null): WallUpEventFilter;
    WallUp(high_?: null, timestamp_?: null, capacity_?: null): WallUpEventFilter;

    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(key?: null, val?: null): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(key?: null, val?: null): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(key?: null, val?: null): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(key?: null, val?: null): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(key?: null, val?: null): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(key?: null, val?: null): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null,
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(key?: null, val?: null, decimals?: null): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null,
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(key?: null, val?: null, decimals?: null): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(key?: null, val?: null): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(key?: null, val?: null): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(key?: null, val?: null): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<BigNumber>;

    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setUp(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_cannotSetParametersWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_cannotUpdateMarketWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_onlyPermittedPoliciesCanCallGatedFunctions(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_regenerate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_setSpreads(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_setThresholdFactor(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_updateCapacity(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_updateMarket(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_updatePrices(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_viewActive(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_viewCapacity(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_viewLastActive(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_viewMarket(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_viewPrice(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_viewRange(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_viewSpread(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    userCreator(overrides?: CallOverrides): Promise<BigNumber>;

    vm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setUp(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    testCorrectness_cannotSetParametersWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_cannotUpdateMarketWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_onlyPermittedPoliciesCanCallGatedFunctions(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_regenerate(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setSpreads(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setThresholdFactor(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_updateCapacity(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_updateMarket(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_updatePrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_viewActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_viewCapacity(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_viewLastActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_viewMarket(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_viewPrice(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    testCorrectness_viewRange(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    testCorrectness_viewSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
