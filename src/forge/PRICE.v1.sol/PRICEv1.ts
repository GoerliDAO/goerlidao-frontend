/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";

export interface PRICEv1Interface extends utils.Interface {
  functions: {
    "INIT()": FunctionFragment;
    "KEYCODE()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "changeKernel(address)": FunctionFragment;
    "changeMinimumTargetPrice(uint256)": FunctionFragment;
    "changeMovingAverageDuration(uint48)": FunctionFragment;
    "changeObservationFrequency(uint48)": FunctionFragment;
    "changeUpdateThresholds(uint48,uint48)": FunctionFragment;
    "cumulativeObs()": FunctionFragment;
    "decimals()": FunctionFragment;
    "gdaoEthPriceFeed()": FunctionFragment;
    "gdaoEthUpdateThreshold()": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "getLastPrice()": FunctionFragment;
    "getMovingAverage()": FunctionFragment;
    "getTargetPrice()": FunctionFragment;
    "initialize(uint256[],uint48)": FunctionFragment;
    "initialized()": FunctionFragment;
    "kernel()": FunctionFragment;
    "lastObservationTime()": FunctionFragment;
    "minimumTargetPrice()": FunctionFragment;
    "movingAverageDuration()": FunctionFragment;
    "nextObsIndex()": FunctionFragment;
    "numObservations()": FunctionFragment;
    "observationFrequency()": FunctionFragment;
    "observations(uint256)": FunctionFragment;
    "reserveEthPriceFeed()": FunctionFragment;
    "reserveEthUpdateThreshold()": FunctionFragment;
    "updateMovingAverage()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INIT"
      | "KEYCODE"
      | "VERSION"
      | "changeKernel"
      | "changeMinimumTargetPrice"
      | "changeMovingAverageDuration"
      | "changeObservationFrequency"
      | "changeUpdateThresholds"
      | "cumulativeObs"
      | "decimals"
      | "gdaoEthPriceFeed"
      | "gdaoEthUpdateThreshold"
      | "getCurrentPrice"
      | "getLastPrice"
      | "getMovingAverage"
      | "getTargetPrice"
      | "initialize"
      | "initialized"
      | "kernel"
      | "lastObservationTime"
      | "minimumTargetPrice"
      | "movingAverageDuration"
      | "nextObsIndex"
      | "numObservations"
      | "observationFrequency"
      | "observations"
      | "reserveEthPriceFeed"
      | "reserveEthUpdateThreshold"
      | "updateMovingAverage",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "INIT", values?: undefined): string;
  encodeFunctionData(functionFragment: "KEYCODE", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeKernel", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "changeMinimumTargetPrice", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "changeMovingAverageDuration", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "changeObservationFrequency", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "changeUpdateThresholds",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "cumulativeObs", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "gdaoEthPriceFeed", values?: undefined): string;
  encodeFunctionData(functionFragment: "gdaoEthUpdateThreshold", values?: undefined): string;
  encodeFunctionData(functionFragment: "getCurrentPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "getLastPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "getMovingAverage", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTargetPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "initialized", values?: undefined): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(functionFragment: "lastObservationTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "minimumTargetPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "movingAverageDuration", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextObsIndex", values?: undefined): string;
  encodeFunctionData(functionFragment: "numObservations", values?: undefined): string;
  encodeFunctionData(functionFragment: "observationFrequency", values?: undefined): string;
  encodeFunctionData(functionFragment: "observations", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "reserveEthPriceFeed", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserveEthUpdateThreshold", values?: undefined): string;
  encodeFunctionData(functionFragment: "updateMovingAverage", values?: undefined): string;

  decodeFunctionResult(functionFragment: "INIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KEYCODE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeKernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeMinimumTargetPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeMovingAverageDuration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeObservationFrequency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeUpdateThresholds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cumulativeObs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gdaoEthPriceFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gdaoEthUpdateThreshold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCurrentPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLastPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMovingAverage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTargetPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastObservationTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minimumTargetPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "movingAverageDuration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextObsIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numObservations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "observationFrequency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "observations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserveEthPriceFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserveEthUpdateThreshold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateMovingAverage", data: BytesLike): Result;

  events: {
    "MinimumTargetPriceChanged(uint256)": EventFragment;
    "MovingAverageDurationChanged(uint48)": EventFragment;
    "NewObservation(uint256,uint256,uint256)": EventFragment;
    "ObservationFrequencyChanged(uint48)": EventFragment;
    "UpdateThresholdsChanged(uint48,uint48)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MinimumTargetPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MovingAverageDurationChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewObservation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ObservationFrequencyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateThresholdsChanged"): EventFragment;
}

export interface MinimumTargetPriceChangedEventObject {
  minimumTargetPrice_: BigNumber;
}
export type MinimumTargetPriceChangedEvent = TypedEvent<[BigNumber], MinimumTargetPriceChangedEventObject>;

export type MinimumTargetPriceChangedEventFilter = TypedEventFilter<MinimumTargetPriceChangedEvent>;

export interface MovingAverageDurationChangedEventObject {
  movingAverageDuration_: number;
}
export type MovingAverageDurationChangedEvent = TypedEvent<[number], MovingAverageDurationChangedEventObject>;

export type MovingAverageDurationChangedEventFilter = TypedEventFilter<MovingAverageDurationChangedEvent>;

export interface NewObservationEventObject {
  timestamp_: BigNumber;
  price_: BigNumber;
  movingAverage_: BigNumber;
}
export type NewObservationEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], NewObservationEventObject>;

export type NewObservationEventFilter = TypedEventFilter<NewObservationEvent>;

export interface ObservationFrequencyChangedEventObject {
  observationFrequency_: number;
}
export type ObservationFrequencyChangedEvent = TypedEvent<[number], ObservationFrequencyChangedEventObject>;

export type ObservationFrequencyChangedEventFilter = TypedEventFilter<ObservationFrequencyChangedEvent>;

export interface UpdateThresholdsChangedEventObject {
  gdaoEthUpdateThreshold_: number;
  reserveEthUpdateThreshold_: number;
}
export type UpdateThresholdsChangedEvent = TypedEvent<[number, number], UpdateThresholdsChangedEventObject>;

export type UpdateThresholdsChangedEventFilter = TypedEventFilter<UpdateThresholdsChangedEvent>;

export interface PRICEv1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PRICEv1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    KEYCODE(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[number, number] & { major: number; minor: number }>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeMinimumTargetPrice(
      minimumTargetPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeMovingAverageDuration(
      movingAverageDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeObservationFrequency(
      observationFrequency_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeUpdateThresholds(
      gdaoEthUpdateThreshold_: PromiseOrValue<BigNumberish>,
      reserveEthUpdateThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    cumulativeObs(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    gdaoEthPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    gdaoEthUpdateThreshold(overrides?: CallOverrides): Promise<[number]>;

    getCurrentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMovingAverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTargetPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      startObservations_: PromiseOrValue<BigNumberish>[],
      lastObservationTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    lastObservationTime(overrides?: CallOverrides): Promise<[number]>;

    minimumTargetPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    movingAverageDuration(overrides?: CallOverrides): Promise<[number]>;

    nextObsIndex(overrides?: CallOverrides): Promise<[number]>;

    numObservations(overrides?: CallOverrides): Promise<[number]>;

    observationFrequency(overrides?: CallOverrides): Promise<[number]>;

    observations(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    reserveEthPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    reserveEthUpdateThreshold(overrides?: CallOverrides): Promise<[number]>;

    updateMovingAverage(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  KEYCODE(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<[number, number] & { major: number; minor: number }>;

  changeKernel(
    newKernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeMinimumTargetPrice(
    minimumTargetPrice_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeMovingAverageDuration(
    movingAverageDuration_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeObservationFrequency(
    observationFrequency_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeUpdateThresholds(
    gdaoEthUpdateThreshold_: PromiseOrValue<BigNumberish>,
    reserveEthUpdateThreshold_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  cumulativeObs(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  gdaoEthPriceFeed(overrides?: CallOverrides): Promise<string>;

  gdaoEthUpdateThreshold(overrides?: CallOverrides): Promise<number>;

  getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getLastPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getMovingAverage(overrides?: CallOverrides): Promise<BigNumber>;

  getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    startObservations_: PromiseOrValue<BigNumberish>[],
    lastObservationTime_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  lastObservationTime(overrides?: CallOverrides): Promise<number>;

  minimumTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  movingAverageDuration(overrides?: CallOverrides): Promise<number>;

  nextObsIndex(overrides?: CallOverrides): Promise<number>;

  numObservations(overrides?: CallOverrides): Promise<number>;

  observationFrequency(overrides?: CallOverrides): Promise<number>;

  observations(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  reserveEthPriceFeed(overrides?: CallOverrides): Promise<string>;

  reserveEthUpdateThreshold(overrides?: CallOverrides): Promise<number>;

  updateMovingAverage(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    INIT(overrides?: CallOverrides): Promise<void>;

    KEYCODE(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<[number, number] & { major: number; minor: number }>;

    changeKernel(newKernel_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    changeMinimumTargetPrice(
      minimumTargetPrice_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    changeMovingAverageDuration(
      movingAverageDuration_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    changeObservationFrequency(
      observationFrequency_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    changeUpdateThresholds(
      gdaoEthUpdateThreshold_: PromiseOrValue<BigNumberish>,
      reserveEthUpdateThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    cumulativeObs(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    gdaoEthPriceFeed(overrides?: CallOverrides): Promise<string>;

    gdaoEthUpdateThreshold(overrides?: CallOverrides): Promise<number>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getLastPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMovingAverage(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      startObservations_: PromiseOrValue<BigNumberish>[],
      lastObservationTime_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    lastObservationTime(overrides?: CallOverrides): Promise<number>;

    minimumTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    movingAverageDuration(overrides?: CallOverrides): Promise<number>;

    nextObsIndex(overrides?: CallOverrides): Promise<number>;

    numObservations(overrides?: CallOverrides): Promise<number>;

    observationFrequency(overrides?: CallOverrides): Promise<number>;

    observations(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    reserveEthPriceFeed(overrides?: CallOverrides): Promise<string>;

    reserveEthUpdateThreshold(overrides?: CallOverrides): Promise<number>;

    updateMovingAverage(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "MinimumTargetPriceChanged(uint256)"(minimumTargetPrice_?: null): MinimumTargetPriceChangedEventFilter;
    MinimumTargetPriceChanged(minimumTargetPrice_?: null): MinimumTargetPriceChangedEventFilter;

    "MovingAverageDurationChanged(uint48)"(movingAverageDuration_?: null): MovingAverageDurationChangedEventFilter;
    MovingAverageDurationChanged(movingAverageDuration_?: null): MovingAverageDurationChangedEventFilter;

    "NewObservation(uint256,uint256,uint256)"(
      timestamp_?: null,
      price_?: null,
      movingAverage_?: null,
    ): NewObservationEventFilter;
    NewObservation(timestamp_?: null, price_?: null, movingAverage_?: null): NewObservationEventFilter;

    "ObservationFrequencyChanged(uint48)"(observationFrequency_?: null): ObservationFrequencyChangedEventFilter;
    ObservationFrequencyChanged(observationFrequency_?: null): ObservationFrequencyChangedEventFilter;

    "UpdateThresholdsChanged(uint48,uint48)"(
      gdaoEthUpdateThreshold_?: null,
      reserveEthUpdateThreshold_?: null,
    ): UpdateThresholdsChangedEventFilter;
    UpdateThresholdsChanged(
      gdaoEthUpdateThreshold_?: null,
      reserveEthUpdateThreshold_?: null,
    ): UpdateThresholdsChangedEventFilter;
  };

  estimateGas: {
    INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    KEYCODE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeMinimumTargetPrice(
      minimumTargetPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeMovingAverageDuration(
      movingAverageDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeObservationFrequency(
      observationFrequency_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeUpdateThresholds(
      gdaoEthUpdateThreshold_: PromiseOrValue<BigNumberish>,
      reserveEthUpdateThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    cumulativeObs(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    gdaoEthPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    gdaoEthUpdateThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getLastPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMovingAverage(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      startObservations_: PromiseOrValue<BigNumberish>[],
      lastObservationTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    lastObservationTime(overrides?: CallOverrides): Promise<BigNumber>;

    minimumTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    movingAverageDuration(overrides?: CallOverrides): Promise<BigNumber>;

    nextObsIndex(overrides?: CallOverrides): Promise<BigNumber>;

    numObservations(overrides?: CallOverrides): Promise<BigNumber>;

    observationFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    observations(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    reserveEthPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    reserveEthUpdateThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    updateMovingAverage(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    KEYCODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeMinimumTargetPrice(
      minimumTargetPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeMovingAverageDuration(
      movingAverageDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeObservationFrequency(
      observationFrequency_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeUpdateThresholds(
      gdaoEthUpdateThreshold_: PromiseOrValue<BigNumberish>,
      reserveEthUpdateThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    cumulativeObs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gdaoEthPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gdaoEthUpdateThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMovingAverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTargetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      startObservations_: PromiseOrValue<BigNumberish>[],
      lastObservationTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastObservationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumTargetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    movingAverageDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextObsIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numObservations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    observationFrequency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    observations(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveEthPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveEthUpdateThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMovingAverage(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
