/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export interface IBondCallbackInterface extends utils.Interface {
  functions: {
    "amountsForMarket(uint256)": FunctionFragment;
    "blacklist(address,uint256)": FunctionFragment;
    "callback(uint256,uint256,uint256)": FunctionFragment;
    "whitelist(address,uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "amountsForMarket" | "blacklist" | "callback" | "whitelist"): FunctionFragment;

  encodeFunctionData(functionFragment: "amountsForMarket", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "blacklist",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "callback",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: "amountsForMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {};
}

export interface IBondCallback extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBondCallbackInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amountsForMarket(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { in_: BigNumber; out_: BigNumber }>;

    blacklist(
      teller_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    callback(
      id_: PromiseOrValue<BigNumberish>,
      inputAmount_: PromiseOrValue<BigNumberish>,
      outputAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    whitelist(
      teller_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  amountsForMarket(
    id_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { in_: BigNumber; out_: BigNumber }>;

  blacklist(
    teller_: PromiseOrValue<string>,
    id_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callback(
    id_: PromiseOrValue<BigNumberish>,
    inputAmount_: PromiseOrValue<BigNumberish>,
    outputAmount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  whitelist(
    teller_: PromiseOrValue<string>,
    id_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    amountsForMarket(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { in_: BigNumber; out_: BigNumber }>;

    blacklist(
      teller_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    callback(
      id_: PromiseOrValue<BigNumberish>,
      inputAmount_: PromiseOrValue<BigNumberish>,
      outputAmount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    whitelist(
      teller_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    amountsForMarket(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    blacklist(
      teller_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    callback(
      id_: PromiseOrValue<BigNumberish>,
      inputAmount_: PromiseOrValue<BigNumberish>,
      outputAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    whitelist(
      teller_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    amountsForMarket(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blacklist(
      teller_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    callback(
      id_: PromiseOrValue<BigNumberish>,
      inputAmount_: PromiseOrValue<BigNumberish>,
      outputAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    whitelist(
      teller_: PromiseOrValue<string>,
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
