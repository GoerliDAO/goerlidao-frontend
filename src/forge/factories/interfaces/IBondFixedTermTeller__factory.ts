/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IBondFixedTermTeller, IBondFixedTermTellerInterface } from "../../interfaces/IBondFixedTermTeller";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "tokenIds_",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    name: "batchRedeem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "underlying_",
        type: "address",
      },
      {
        internalType: "uint48",
        name: "expiry_",
        type: "uint48",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "create",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "underlying_",
        type: "address",
      },
      {
        internalType: "uint48",
        name: "expiry_",
        type: "uint48",
      },
    ],
    name: "deploy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "payoutToken_",
        type: "address",
      },
      {
        internalType: "uint48",
        name: "expiry_",
        type: "uint48",
      },
    ],
    name: "getTokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
    ],
    name: "getTokenNameAndSymbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IBondFixedTermTeller__factory {
  static readonly abi = _abi;
  static createInterface(): IBondFixedTermTellerInterface {
    return new utils.Interface(_abi) as IBondFixedTermTellerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IBondFixedTermTeller {
    return new Contract(address, _abi, signerOrProvider) as IBondFixedTermTeller;
  }
}
