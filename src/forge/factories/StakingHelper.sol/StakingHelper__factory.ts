/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { StakingHelper, StakingHelperInterface } from "../../StakingHelper.sol/StakingHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_staking",
        type: "address",
      },
      {
        internalType: "address",
        name: "_GDAO",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "GDAO",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "staking",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516104ab3803806104ab83398101604081905261002f91610089565b6001600160a01b03821661004257600080fd5b6001600160a01b03808316608052811661005b57600080fd5b6001600160a01b031660a052506100bc565b80516001600160a01b038116811461008457600080fd5b919050565b6000806040838503121561009c57600080fd5b6100a58361006d565b91506100b36020840161006d565b90509250929050565b60805160a0516103aa61010160003960008181609d0152818160e1015261019d015260008181604b0152818161016e0152818161022701526102b401526103aa6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634cf088d914610046578063a694fc3a14610083578063bc39493c14610098575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405161007a919061031e565b60405180910390f35b610096610091366004610332565b6100bf565b005b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610132573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610156919061034b565b5060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a919061034b565b50604051637acb775760e01b8152600481018290523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637acb7757906044016020604051808303816000875af1158015610278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029c919061034b565b50604051630f41a04d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e83409a906102e990339060040161031e565b600060405180830381600087803b15801561030357600080fd5b505af1158015610317573d6000803e3d6000fd5b5050505050565b6001600160a01b0391909116815260200190565b60006020828403121561034457600080fd5b5035919050565b60006020828403121561035d57600080fd5b8151801515811461036d57600080fd5b939250505056fea26469706673582212204955b6870183209d268e6a673a3eba423a618170f273a60f539486f6ebab326264736f6c634300080f0033";

type StakingHelperConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: StakingHelperConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class StakingHelper__factory extends ContractFactory {
  constructor(...args: StakingHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _staking: PromiseOrValue<string>,
    _GDAO: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<StakingHelper> {
    return super.deploy(_staking, _GDAO, overrides || {}) as Promise<StakingHelper>;
  }
  override getDeployTransaction(
    _staking: PromiseOrValue<string>,
    _GDAO: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_staking, _GDAO, overrides || {});
  }
  override attach(address: string): StakingHelper {
    return super.attach(address) as StakingHelper;
  }
  override connect(signer: Signer): StakingHelper__factory {
    return super.connect(signer) as StakingHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingHelperInterface {
    return new utils.Interface(_abi) as StakingHelperInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): StakingHelper {
    return new Contract(address, _abi, signerOrProvider) as StakingHelper;
  }
}
