/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";

export type PermissionsStruct = {
  keycode: PromiseOrValue<BytesLike>;
  funcSelector: PromiseOrValue<BytesLike>;
};

export type PermissionsStructOutput = [string, string] & {
  keycode: string;
  funcSelector: string;
};

export interface DistributorInterface extends utils.Interface {
  functions: {
    "MINTR()": FunctionFragment;
    "ROLES()": FunctionFragment;
    "TRSRY()": FunctionFragment;
    "addPool(uint256,address)": FunctionFragment;
    "bounty()": FunctionFragment;
    "changeKernel(address)": FunctionFragment;
    "configureDependencies()": FunctionFragment;
    "distribute()": FunctionFragment;
    "isActive()": FunctionFragment;
    "kernel()": FunctionFragment;
    "nextRewardFor(address)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "removePool(uint256,address)": FunctionFragment;
    "requestPermissions()": FunctionFragment;
    "retrieveBounty()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "setBounty(uint256)": FunctionFragment;
    "setPools(address[])": FunctionFragment;
    "setRewardRate(uint256)": FunctionFragment;
    "triggerRebase()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MINTR"
      | "ROLES"
      | "TRSRY"
      | "addPool"
      | "bounty"
      | "changeKernel"
      | "configureDependencies"
      | "distribute"
      | "isActive"
      | "kernel"
      | "nextRewardFor"
      | "pools"
      | "removePool"
      | "requestPermissions"
      | "retrieveBounty"
      | "rewardRate"
      | "setBounty"
      | "setPools"
      | "setRewardRate"
      | "triggerRebase",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MINTR", values?: undefined): string;
  encodeFunctionData(functionFragment: "ROLES", values?: undefined): string;
  encodeFunctionData(functionFragment: "TRSRY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "bounty", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeKernel", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "configureDependencies", values?: undefined): string;
  encodeFunctionData(functionFragment: "distribute", values?: undefined): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextRewardFor", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "pools", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "removePool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "requestPermissions", values?: undefined): string;
  encodeFunctionData(functionFragment: "retrieveBounty", values?: undefined): string;
  encodeFunctionData(functionFragment: "rewardRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "setBounty", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setPools", values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: "setRewardRate", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "triggerRebase", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MINTR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROLES", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TRSRY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bounty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeKernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configureDependencies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextRewardFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requestPermissions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "retrieveBounty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBounty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRewardRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "triggerRebase", data: BytesLike): Result;

  events: {};
}

export interface Distributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MINTR(overrides?: CallOverrides): Promise<[string]>;

    ROLES(overrides?: CallOverrides): Promise<[string]>;

    TRSRY(overrides?: CallOverrides): Promise<[string]>;

    addPool(
      index_: PromiseOrValue<BigNumberish>,
      pool_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    bounty(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    distribute(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    nextRewardFor(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    pools(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    removePool(
      index_: PromiseOrValue<BigNumberish>,
      pool_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    requestPermissions(
      overrides?: CallOverrides,
    ): Promise<[PermissionsStructOutput[]] & { permissions: PermissionsStructOutput[] }>;

    retrieveBounty(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBounty(
      bounty_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPools(
      pools_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardRate(
      newRewardRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    triggerRebase(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  MINTR(overrides?: CallOverrides): Promise<string>;

  ROLES(overrides?: CallOverrides): Promise<string>;

  TRSRY(overrides?: CallOverrides): Promise<string>;

  addPool(
    index_: PromiseOrValue<BigNumberish>,
    pool_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  bounty(overrides?: CallOverrides): Promise<BigNumber>;

  changeKernel(
    newKernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  distribute(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  nextRewardFor(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  pools(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  removePool(
    index_: PromiseOrValue<BigNumberish>,
    pool_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  requestPermissions(overrides?: CallOverrides): Promise<PermissionsStructOutput[]>;

  retrieveBounty(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  setBounty(
    bounty_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPools(
    pools_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewardRate(
    newRewardRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  triggerRebase(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    MINTR(overrides?: CallOverrides): Promise<string>;

    ROLES(overrides?: CallOverrides): Promise<string>;

    TRSRY(overrides?: CallOverrides): Promise<string>;

    addPool(
      index_: PromiseOrValue<BigNumberish>,
      pool_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    bounty(overrides?: CallOverrides): Promise<BigNumber>;

    changeKernel(newKernel_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    configureDependencies(overrides?: CallOverrides): Promise<string[]>;

    distribute(overrides?: CallOverrides): Promise<void>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    nextRewardFor(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    removePool(
      index_: PromiseOrValue<BigNumberish>,
      pool_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    requestPermissions(overrides?: CallOverrides): Promise<PermissionsStructOutput[]>;

    retrieveBounty(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    setBounty(bounty_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPools(pools_: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    setRewardRate(newRewardRate_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    triggerRebase(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    MINTR(overrides?: CallOverrides): Promise<BigNumber>;

    ROLES(overrides?: CallOverrides): Promise<BigNumber>;

    TRSRY(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      index_: PromiseOrValue<BigNumberish>,
      pool_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    bounty(overrides?: CallOverrides): Promise<BigNumber>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    distribute(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    nextRewardFor(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    removePool(
      index_: PromiseOrValue<BigNumberish>,
      pool_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    requestPermissions(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveBounty(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    setBounty(
      bounty_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPools(
      pools_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewardRate(
      newRewardRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    triggerRebase(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    MINTR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRSRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPool(
      index_: PromiseOrValue<BigNumberish>,
      pool_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    bounty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    distribute(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextRewardFor(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePool(
      index_: PromiseOrValue<BigNumberish>,
      pool_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    requestPermissions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retrieveBounty(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBounty(
      bounty_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPools(
      pools_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewardRate(
      newRewardRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    triggerRebase(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
