/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";

export interface IDistributorInterface extends utils.Interface {
  functions: {
    "addRecipient(address,uint256)": FunctionFragment;
    "bounty()": FunctionFragment;
    "distribute()": FunctionFragment;
    "nextRewardAt(uint256)": FunctionFragment;
    "nextRewardFor(address)": FunctionFragment;
    "removeRecipient(uint256)": FunctionFragment;
    "retrieveBounty()": FunctionFragment;
    "setAdjustment(uint256,bool,uint256,uint256)": FunctionFragment;
    "setBounty(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addRecipient"
      | "bounty"
      | "distribute"
      | "nextRewardAt"
      | "nextRewardFor"
      | "removeRecipient"
      | "retrieveBounty"
      | "setAdjustment"
      | "setBounty",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRecipient",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "bounty", values?: undefined): string;
  encodeFunctionData(functionFragment: "distribute", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextRewardAt", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "nextRewardFor", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "removeRecipient", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "retrieveBounty", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAdjustment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: "setBounty", values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: "addRecipient", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bounty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextRewardAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextRewardFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeRecipient", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "retrieveBounty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdjustment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBounty", data: BytesLike): Result;

  events: {};
}

export interface IDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRecipient(
      _recipient: PromiseOrValue<string>,
      _rewardRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    bounty(overrides?: CallOverrides): Promise<[BigNumber]>;

    distribute(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    nextRewardAt(_rate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    nextRewardFor(_recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    removeRecipient(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    retrieveBounty(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setAdjustment(
      _index: PromiseOrValue<BigNumberish>,
      _add: PromiseOrValue<boolean>,
      _rate: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setBounty(
      _bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addRecipient(
    _recipient: PromiseOrValue<string>,
    _rewardRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  bounty(overrides?: CallOverrides): Promise<BigNumber>;

  distribute(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  nextRewardAt(_rate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  nextRewardFor(_recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  removeRecipient(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  retrieveBounty(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setAdjustment(
    _index: PromiseOrValue<BigNumberish>,
    _add: PromiseOrValue<boolean>,
    _rate: PromiseOrValue<BigNumberish>,
    _target: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setBounty(
    _bounty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addRecipient(
      _recipient: PromiseOrValue<string>,
      _rewardRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    bounty(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(overrides?: CallOverrides): Promise<void>;

    nextRewardAt(_rate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    nextRewardFor(_recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    removeRecipient(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    retrieveBounty(overrides?: CallOverrides): Promise<BigNumber>;

    setAdjustment(
      _index: PromiseOrValue<BigNumberish>,
      _add: PromiseOrValue<boolean>,
      _rate: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setBounty(_bounty: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addRecipient(
      _recipient: PromiseOrValue<string>,
      _rewardRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    bounty(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    nextRewardAt(_rate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    nextRewardFor(_recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    removeRecipient(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    retrieveBounty(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setAdjustment(
      _index: PromiseOrValue<BigNumberish>,
      _add: PromiseOrValue<boolean>,
      _rate: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setBounty(
      _bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRecipient(
      _recipient: PromiseOrValue<string>,
      _rewardRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    bounty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    nextRewardAt(_rate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextRewardFor(_recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRecipient(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    retrieveBounty(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setAdjustment(
      _index: PromiseOrValue<BigNumberish>,
      _add: PromiseOrValue<boolean>,
      _rate: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setBounty(
      _bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
