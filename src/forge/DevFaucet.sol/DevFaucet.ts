/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";

export interface DevFaucetInterface extends utils.Interface {
  functions: {
    "DAI()": FunctionFragment;
    "addGDAO(address)": FunctionFragment;
    "addStaking(address)": FunctionFragment;
    "approveStaking(address,address)": FunctionFragment;
    "authority()": FunctionFragment;
    "futureStaking(uint256)": FunctionFragment;
    "lastMint(address)": FunctionFragment;
    "mintDAI()": FunctionFragment;
    "mintETH(uint256)": FunctionFragment;
    "mintGDAO(uint256)": FunctionFragment;
    "mintGGDAO()": FunctionFragment;
    "mintSGDAO(uint256)": FunctionFragment;
    "mintable(uint256)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setDAI(address)": FunctionFragment;
    "setGDAO(uint256,address)": FunctionFragment;
    "setStakingV2(address)": FunctionFragment;
    "stakingV2()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DAI"
      | "addGDAO"
      | "addStaking"
      | "approveStaking"
      | "authority"
      | "futureStaking"
      | "lastMint"
      | "mintDAI"
      | "mintETH"
      | "mintGDAO"
      | "mintGGDAO"
      | "mintSGDAO"
      | "mintable"
      | "setAuthority"
      | "setDAI"
      | "setGDAO"
      | "setStakingV2"
      | "stakingV2",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DAI", values?: undefined): string;
  encodeFunctionData(functionFragment: "addGDAO", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "addStaking", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "approveStaking",
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "futureStaking", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "lastMint", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "mintDAI", values?: undefined): string;
  encodeFunctionData(functionFragment: "mintETH", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "mintGDAO", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "mintGGDAO", values?: undefined): string;
  encodeFunctionData(functionFragment: "mintSGDAO", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "mintable", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setAuthority", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setDAI", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "setGDAO",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "setStakingV2", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "stakingV2", values?: undefined): string;

  decodeFunctionResult(functionFragment: "DAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addGDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "futureStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintDAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintGDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintGGDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintSGDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAuthority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStakingV2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakingV2", data: BytesLike): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
}

export interface AuthorityUpdatedEventObject {
  authority: string;
}
export type AuthorityUpdatedEvent = TypedEvent<[string], AuthorityUpdatedEventObject>;

export type AuthorityUpdatedEventFilter = TypedEventFilter<AuthorityUpdatedEvent>;

export interface DevFaucet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DevFaucetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DAI(overrides?: CallOverrides): Promise<[string]>;

    addGDAO(
      gdao_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addStaking(
      staking_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approveStaking(
      gdao_: PromiseOrValue<string>,
      staking_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    futureStaking(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    lastMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    mintDAI(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    mintETH(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintGDAO(
      gdaoIndex_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintGGDAO(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    mintSGDAO(
      gdaoIndex_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintable(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDAI(
      dai_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGDAO(
      gdaoIndex_: PromiseOrValue<BigNumberish>,
      gdao_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStakingV2(
      stakingV2_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakingV2(overrides?: CallOverrides): Promise<[string]>;
  };

  DAI(overrides?: CallOverrides): Promise<string>;

  addGDAO(
    gdao_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addStaking(
    staking_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approveStaking(
    gdao_: PromiseOrValue<string>,
    staking_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  authority(overrides?: CallOverrides): Promise<string>;

  futureStaking(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  lastMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  mintDAI(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  mintETH(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintGDAO(
    gdaoIndex_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintGGDAO(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  mintSGDAO(
    gdaoIndex_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintable(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  setAuthority(
    _newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDAI(
    dai_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGDAO(
    gdaoIndex_: PromiseOrValue<BigNumberish>,
    gdao_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStakingV2(
    stakingV2_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakingV2(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DAI(overrides?: CallOverrides): Promise<string>;

    addGDAO(gdao_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    addStaking(staking_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    approveStaking(
      gdao_: PromiseOrValue<string>,
      staking_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    authority(overrides?: CallOverrides): Promise<string>;

    futureStaking(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    lastMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mintDAI(overrides?: CallOverrides): Promise<void>;

    mintETH(amount_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    mintGDAO(gdaoIndex_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    mintGGDAO(overrides?: CallOverrides): Promise<void>;

    mintSGDAO(gdaoIndex_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    mintable(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    setAuthority(_newAuthority: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setDAI(dai_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setGDAO(
      gdaoIndex_: PromiseOrValue<BigNumberish>,
      gdao_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setStakingV2(stakingV2_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    stakingV2(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: PromiseOrValue<string> | null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: PromiseOrValue<string> | null): AuthorityUpdatedEventFilter;
  };

  estimateGas: {
    DAI(overrides?: CallOverrides): Promise<BigNumber>;

    addGDAO(
      gdao_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addStaking(
      staking_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approveStaking(
      gdao_: PromiseOrValue<string>,
      staking_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    futureStaking(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    lastMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mintDAI(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    mintETH(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintGDAO(
      gdaoIndex_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintGGDAO(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    mintSGDAO(
      gdaoIndex_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintable(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDAI(dai_: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setGDAO(
      gdaoIndex_: PromiseOrValue<BigNumberish>,
      gdao_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStakingV2(
      stakingV2_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakingV2(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addGDAO(
      gdao_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addStaking(
      staking_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approveStaking(
      gdao_: PromiseOrValue<string>,
      staking_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    futureStaking(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintDAI(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    mintETH(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintGDAO(
      gdaoIndex_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintGGDAO(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    mintSGDAO(
      gdaoIndex_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintable(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDAI(
      dai_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGDAO(
      gdaoIndex_: PromiseOrValue<BigNumberish>,
      gdao_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStakingV2(
      stakingV2_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakingV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
