/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export declare namespace IOperator {
  export type ConfigStruct = {
    cushionFactor: PromiseOrValue<BigNumberish>;
    cushionDuration: PromiseOrValue<BigNumberish>;
    cushionDebtBuffer: PromiseOrValue<BigNumberish>;
    cushionDepositInterval: PromiseOrValue<BigNumberish>;
    reserveFactor: PromiseOrValue<BigNumberish>;
    regenWait: PromiseOrValue<BigNumberish>;
    regenThreshold: PromiseOrValue<BigNumberish>;
    regenObserve: PromiseOrValue<BigNumberish>;
  };

  export type ConfigStructOutput = [number, number, number, number, number, number, number, number] & {
    cushionFactor: number;
    cushionDuration: number;
    cushionDebtBuffer: number;
    cushionDepositInterval: number;
    reserveFactor: number;
    regenWait: number;
    regenThreshold: number;
    regenObserve: number;
  };

  export type RegenStruct = {
    count: PromiseOrValue<BigNumberish>;
    lastRegen: PromiseOrValue<BigNumberish>;
    nextObservation: PromiseOrValue<BigNumberish>;
    observations: PromiseOrValue<boolean>[];
  };

  export type RegenStructOutput = [number, number, number, boolean[]] & {
    count: number;
    lastRegen: number;
    nextObservation: number;
    observations: boolean[];
  };

  export type StatusStruct = {
    low: IOperator.RegenStruct;
    high: IOperator.RegenStruct;
  };

  export type StatusStructOutput = [IOperator.RegenStructOutput, IOperator.RegenStructOutput] & {
    low: IOperator.RegenStructOutput;
    high: IOperator.RegenStructOutput;
  };
}

export interface IOperatorInterface extends utils.Interface {
  functions: {
    "activate()": FunctionFragment;
    "config()": FunctionFragment;
    "deactivate()": FunctionFragment;
    "deactivateCushion(bool)": FunctionFragment;
    "fullCapacity(bool)": FunctionFragment;
    "getAmountOut(address,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "operate()": FunctionFragment;
    "regenerate(bool)": FunctionFragment;
    "setBondContracts(address,address)": FunctionFragment;
    "setCushionFactor(uint32)": FunctionFragment;
    "setCushionParams(uint32,uint32,uint32)": FunctionFragment;
    "setRegenParams(uint32,uint32,uint32)": FunctionFragment;
    "setReserveFactor(uint32)": FunctionFragment;
    "setSpreads(uint256,uint256)": FunctionFragment;
    "setThresholdFactor(uint256)": FunctionFragment;
    "status()": FunctionFragment;
    "swap(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activate"
      | "config"
      | "deactivate"
      | "deactivateCushion"
      | "fullCapacity"
      | "getAmountOut"
      | "initialize"
      | "operate"
      | "regenerate"
      | "setBondContracts"
      | "setCushionFactor"
      | "setCushionParams"
      | "setRegenParams"
      | "setReserveFactor"
      | "setSpreads"
      | "setThresholdFactor"
      | "status"
      | "swap",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "activate", values?: undefined): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(functionFragment: "deactivate", values?: undefined): string;
  encodeFunctionData(functionFragment: "deactivateCushion", values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: "fullCapacity", values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "initialize", values?: undefined): string;
  encodeFunctionData(functionFragment: "operate", values?: undefined): string;
  encodeFunctionData(functionFragment: "regenerate", values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: "setBondContracts",
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "setCushionFactor", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "setCushionParams",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "setRegenParams",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "setReserveFactor", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "setSpreads",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "setThresholdFactor", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deactivate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deactivateCushion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fullCapacity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAmountOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "regenerate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBondContracts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCushionFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCushionParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRegenParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReserveFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSpreads", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setThresholdFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {
    "CushionFactorChanged(uint32)": EventFragment;
    "CushionParamsChanged(uint32,uint32,uint32)": EventFragment;
    "RegenParamsChanged(uint32,uint32,uint32)": EventFragment;
    "ReserveFactorChanged(uint32)": EventFragment;
    "Swap(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CushionFactorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CushionParamsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegenParamsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveFactorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export interface CushionFactorChangedEventObject {
  cushionFactor_: number;
}
export type CushionFactorChangedEvent = TypedEvent<[number], CushionFactorChangedEventObject>;

export type CushionFactorChangedEventFilter = TypedEventFilter<CushionFactorChangedEvent>;

export interface CushionParamsChangedEventObject {
  duration_: number;
  debtBuffer_: number;
  depositInterval_: number;
}
export type CushionParamsChangedEvent = TypedEvent<[number, number, number], CushionParamsChangedEventObject>;

export type CushionParamsChangedEventFilter = TypedEventFilter<CushionParamsChangedEvent>;

export interface RegenParamsChangedEventObject {
  wait_: number;
  threshold_: number;
  observe_: number;
}
export type RegenParamsChangedEvent = TypedEvent<[number, number, number], RegenParamsChangedEventObject>;

export type RegenParamsChangedEventFilter = TypedEventFilter<RegenParamsChangedEvent>;

export interface ReserveFactorChangedEventObject {
  reserveFactor_: number;
}
export type ReserveFactorChangedEvent = TypedEvent<[number], ReserveFactorChangedEventObject>;

export type ReserveFactorChangedEventFilter = TypedEventFilter<ReserveFactorChangedEvent>;

export interface SwapEventObject {
  tokenIn_: string;
  tokenOut_: string;
  amountIn_: BigNumber;
  amountOut_: BigNumber;
}
export type SwapEvent = TypedEvent<[string, string, BigNumber, BigNumber], SwapEventObject>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface IOperator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOperatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    config(overrides?: CallOverrides): Promise<[IOperator.ConfigStructOutput]>;

    deactivate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    deactivateCushion(
      high_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    fullCapacity(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmountOut(
      tokenIn_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    operate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    regenerate(
      high_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setBondContracts(
      auctioneer_: PromiseOrValue<string>,
      callback_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCushionFactor(
      cushionFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCushionParams(
      duration_: PromiseOrValue<BigNumberish>,
      debtBuffer_: PromiseOrValue<BigNumberish>,
      depositInterval_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRegenParams(
      wait_: PromiseOrValue<BigNumberish>,
      threshold_: PromiseOrValue<BigNumberish>,
      observe_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setReserveFactor(
      reserveFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSpreads(
      cushionSpread_: PromiseOrValue<BigNumberish>,
      wallSpread_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setThresholdFactor(
      thresholdFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    status(overrides?: CallOverrides): Promise<[IOperator.StatusStructOutput]>;

    swap(
      tokenIn_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  config(overrides?: CallOverrides): Promise<IOperator.ConfigStructOutput>;

  deactivate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  deactivateCushion(
    high_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  fullCapacity(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

  getAmountOut(
    tokenIn_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  operate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  regenerate(
    high_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setBondContracts(
    auctioneer_: PromiseOrValue<string>,
    callback_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCushionFactor(
    cushionFactor_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCushionParams(
    duration_: PromiseOrValue<BigNumberish>,
    debtBuffer_: PromiseOrValue<BigNumberish>,
    depositInterval_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRegenParams(
    wait_: PromiseOrValue<BigNumberish>,
    threshold_: PromiseOrValue<BigNumberish>,
    observe_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setReserveFactor(
    reserveFactor_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSpreads(
    cushionSpread_: PromiseOrValue<BigNumberish>,
    wallSpread_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setThresholdFactor(
    thresholdFactor_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  status(overrides?: CallOverrides): Promise<IOperator.StatusStructOutput>;

  swap(
    tokenIn_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    minAmountOut_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    activate(overrides?: CallOverrides): Promise<void>;

    config(overrides?: CallOverrides): Promise<IOperator.ConfigStructOutput>;

    deactivate(overrides?: CallOverrides): Promise<void>;

    deactivateCushion(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    fullCapacity(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOut(
      tokenIn_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    operate(overrides?: CallOverrides): Promise<void>;

    regenerate(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setBondContracts(
      auctioneer_: PromiseOrValue<string>,
      callback_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCushionFactor(cushionFactor_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setCushionParams(
      duration_: PromiseOrValue<BigNumberish>,
      debtBuffer_: PromiseOrValue<BigNumberish>,
      depositInterval_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRegenParams(
      wait_: PromiseOrValue<BigNumberish>,
      threshold_: PromiseOrValue<BigNumberish>,
      observe_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setReserveFactor(reserveFactor_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setSpreads(
      cushionSpread_: PromiseOrValue<BigNumberish>,
      wallSpread_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setThresholdFactor(thresholdFactor_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    status(overrides?: CallOverrides): Promise<IOperator.StatusStructOutput>;

    swap(
      tokenIn_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    "CushionFactorChanged(uint32)"(cushionFactor_?: null): CushionFactorChangedEventFilter;
    CushionFactorChanged(cushionFactor_?: null): CushionFactorChangedEventFilter;

    "CushionParamsChanged(uint32,uint32,uint32)"(
      duration_?: null,
      debtBuffer_?: null,
      depositInterval_?: null,
    ): CushionParamsChangedEventFilter;
    CushionParamsChanged(
      duration_?: null,
      debtBuffer_?: null,
      depositInterval_?: null,
    ): CushionParamsChangedEventFilter;

    "RegenParamsChanged(uint32,uint32,uint32)"(
      wait_?: null,
      threshold_?: null,
      observe_?: null,
    ): RegenParamsChangedEventFilter;
    RegenParamsChanged(wait_?: null, threshold_?: null, observe_?: null): RegenParamsChangedEventFilter;

    "ReserveFactorChanged(uint32)"(reserveFactor_?: null): ReserveFactorChangedEventFilter;
    ReserveFactorChanged(reserveFactor_?: null): ReserveFactorChangedEventFilter;

    "Swap(address,address,uint256,uint256)"(
      tokenIn_?: PromiseOrValue<string> | null,
      tokenOut_?: PromiseOrValue<string> | null,
      amountIn_?: null,
      amountOut_?: null,
    ): SwapEventFilter;
    Swap(
      tokenIn_?: PromiseOrValue<string> | null,
      tokenOut_?: PromiseOrValue<string> | null,
      amountIn_?: null,
      amountOut_?: null,
    ): SwapEventFilter;
  };

  estimateGas: {
    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    deactivate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    deactivateCushion(
      high_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    fullCapacity(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOut(
      tokenIn_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    operate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    regenerate(
      high_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setBondContracts(
      auctioneer_: PromiseOrValue<string>,
      callback_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCushionFactor(
      cushionFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCushionParams(
      duration_: PromiseOrValue<BigNumberish>,
      debtBuffer_: PromiseOrValue<BigNumberish>,
      depositInterval_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRegenParams(
      wait_: PromiseOrValue<BigNumberish>,
      threshold_: PromiseOrValue<BigNumberish>,
      observe_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setReserveFactor(
      reserveFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSpreads(
      cushionSpread_: PromiseOrValue<BigNumberish>,
      wallSpread_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setThresholdFactor(
      thresholdFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      tokenIn_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    deactivateCushion(
      high_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    fullCapacity(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountOut(
      tokenIn_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    operate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    regenerate(
      high_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setBondContracts(
      auctioneer_: PromiseOrValue<string>,
      callback_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCushionFactor(
      cushionFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCushionParams(
      duration_: PromiseOrValue<BigNumberish>,
      debtBuffer_: PromiseOrValue<BigNumberish>,
      depositInterval_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRegenParams(
      wait_: PromiseOrValue<BigNumberish>,
      threshold_: PromiseOrValue<BigNumberish>,
      observe_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setReserveFactor(
      reserveFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSpreads(
      cushionSpread_: PromiseOrValue<BigNumberish>,
      wallSpread_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setThresholdFactor(
      thresholdFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      tokenIn_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
