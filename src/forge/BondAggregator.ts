/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export interface BondAggregatorInterface extends utils.Interface {
  functions: {
    "auctioneers(uint256)": FunctionFragment;
    "authority()": FunctionFragment;
    "currentCapacity(uint256)": FunctionFragment;
    "findMarketFor(address,address,uint256,uint256,uint256)": FunctionFragment;
    "getAuctioneer(uint256)": FunctionFragment;
    "getTeller(uint256)": FunctionFragment;
    "isInstantSwap(uint256)": FunctionFragment;
    "isLive(uint256)": FunctionFragment;
    "liveMarketsBetween(uint256,uint256)": FunctionFragment;
    "liveMarketsBy(address,uint256,uint256)": FunctionFragment;
    "liveMarketsFor(address,bool)": FunctionFragment;
    "marketCounter()": FunctionFragment;
    "marketPrice(uint256)": FunctionFragment;
    "marketScale(uint256)": FunctionFragment;
    "marketsFor(address,address)": FunctionFragment;
    "marketsForPayout(address,uint256)": FunctionFragment;
    "marketsForQuote(address,uint256)": FunctionFragment;
    "marketsToAuctioneers(uint256)": FunctionFragment;
    "maxAmountAccepted(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "payoutFor(uint256,uint256,address)": FunctionFragment;
    "registerAuctioneer(address)": FunctionFragment;
    "registerMarket(address,address)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctioneers"
      | "authority"
      | "currentCapacity"
      | "findMarketFor"
      | "getAuctioneer"
      | "getTeller"
      | "isInstantSwap"
      | "isLive"
      | "liveMarketsBetween"
      | "liveMarketsBy"
      | "liveMarketsFor"
      | "marketCounter"
      | "marketPrice"
      | "marketScale"
      | "marketsFor"
      | "marketsForPayout"
      | "marketsForQuote"
      | "marketsToAuctioneers"
      | "maxAmountAccepted"
      | "owner"
      | "payoutFor"
      | "registerAuctioneer"
      | "registerMarket"
      | "setAuthority"
      | "setOwner",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "auctioneers", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "currentCapacity", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "findMarketFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: "getAuctioneer", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getTeller", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "isInstantSwap", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "isLive", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "liveMarketsBetween",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "liveMarketsBy",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "liveMarketsFor",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: "marketCounter", values?: undefined): string;
  encodeFunctionData(functionFragment: "marketPrice", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "marketScale", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "marketsFor", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "marketsForPayout",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "marketsForQuote",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "marketsToAuctioneers", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "maxAmountAccepted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoutFor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "registerAuctioneer", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "registerMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "setAuthority", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setOwner", values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: "auctioneers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currentCapacity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "findMarketFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAuctioneer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTeller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInstantSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liveMarketsBetween", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liveMarketsBy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liveMarketsFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketScale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketsFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketsForPayout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketsForQuote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketsToAuctioneers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxAmountAccepted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registerAuctioneer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registerMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAuthority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;

  events: {
    "AuthorityUpdated(address,address)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
}

export interface AuthorityUpdatedEventObject {
  user: string;
  newAuthority: string;
}
export type AuthorityUpdatedEvent = TypedEvent<[string, string], AuthorityUpdatedEventObject>;

export type AuthorityUpdatedEventFilter = TypedEventFilter<AuthorityUpdatedEvent>;

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<[string, string], OwnerUpdatedEventObject>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface BondAggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BondAggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctioneers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    findMarketFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      maxExpiry_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getAuctioneer(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    getTeller(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    liveMarketsBetween(
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    liveMarketsBy(
      owner_: PromiseOrValue<string>,
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    liveMarketsFor(
      token_: PromiseOrValue<string>,
      isPayout_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    marketCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    marketsFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    marketsForPayout(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    marketsForQuote(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    marketsToAuctioneers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    registerAuctioneer(
      auctioneer_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerMarket(
      payoutToken_: PromiseOrValue<string>,
      quoteToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  auctioneers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  authority(overrides?: CallOverrides): Promise<string>;

  currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  findMarketFor(
    payout_: PromiseOrValue<string>,
    quote_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    minAmountOut_: PromiseOrValue<BigNumberish>,
    maxExpiry_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAuctioneer(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getTeller(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  liveMarketsBetween(
    firstIndex_: PromiseOrValue<BigNumberish>,
    lastIndex_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  liveMarketsBy(
    owner_: PromiseOrValue<string>,
    firstIndex_: PromiseOrValue<BigNumberish>,
    lastIndex_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  liveMarketsFor(
    token_: PromiseOrValue<string>,
    isPayout_: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  marketCounter(overrides?: CallOverrides): Promise<BigNumber>;

  marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  marketsFor(
    payout_: PromiseOrValue<string>,
    quote_: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  marketsForPayout(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  marketsForQuote(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  marketsToAuctioneers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  maxAmountAccepted(
    id_: PromiseOrValue<BigNumberish>,
    referrer_: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  payoutFor(
    amount_: PromiseOrValue<BigNumberish>,
    id_: PromiseOrValue<BigNumberish>,
    referrer_: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  registerAuctioneer(
    auctioneer_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerMarket(
    payoutToken_: PromiseOrValue<string>,
    quoteToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAuthority(
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    auctioneers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    authority(overrides?: CallOverrides): Promise<string>;

    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    findMarketFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      maxExpiry_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAuctioneer(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getTeller(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    liveMarketsBetween(
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    liveMarketsBy(
      owner_: PromiseOrValue<string>,
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    liveMarketsFor(
      token_: PromiseOrValue<string>,
      isPayout_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    marketCounter(overrides?: CallOverrides): Promise<BigNumber>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketsFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    marketsForPayout(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    marketsForQuote(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    marketsToAuctioneers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    registerAuctioneer(auctioneer_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    registerMarket(
      payoutToken_: PromiseOrValue<string>,
      quoteToken_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setAuthority(newAuthority: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setOwner(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AuthorityUpdated(address,address)"(
      user?: PromiseOrValue<string> | null,
      newAuthority?: PromiseOrValue<string> | null,
    ): AuthorityUpdatedEventFilter;
    AuthorityUpdated(
      user?: PromiseOrValue<string> | null,
      newAuthority?: PromiseOrValue<string> | null,
    ): AuthorityUpdatedEventFilter;

    "OwnerUpdated(address,address)"(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnerUpdatedEventFilter;
  };

  estimateGas: {
    auctioneers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    findMarketFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      maxExpiry_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAuctioneer(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTeller(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    liveMarketsBetween(
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liveMarketsBy(
      owner_: PromiseOrValue<string>,
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liveMarketsFor(
      token_: PromiseOrValue<string>,
      isPayout_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    marketCounter(overrides?: CallOverrides): Promise<BigNumber>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketsFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    marketsForPayout(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    marketsForQuote(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    marketsToAuctioneers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    registerAuctioneer(
      auctioneer_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerMarket(
      payoutToken_: PromiseOrValue<string>,
      quoteToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctioneers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    findMarketFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      maxExpiry_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAuctioneer(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTeller(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liveMarketsBetween(
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liveMarketsBy(
      owner_: PromiseOrValue<string>,
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liveMarketsFor(
      token_: PromiseOrValue<string>,
      isPayout_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    marketCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketsFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    marketsForPayout(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    marketsForQuote(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    marketsToAuctioneers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    registerAuctioneer(
      auctioneer_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerMarket(
      payoutToken_: PromiseOrValue<string>,
      quoteToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
