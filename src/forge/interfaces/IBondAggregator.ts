/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";

export interface IBondAggregatorInterface extends utils.Interface {
  functions: {
    "currentCapacity(uint256)": FunctionFragment;
    "findMarketFor(address,address,uint256,uint256,uint256)": FunctionFragment;
    "getAuctioneer(uint256)": FunctionFragment;
    "getTeller(uint256)": FunctionFragment;
    "isInstantSwap(uint256)": FunctionFragment;
    "isLive(uint256)": FunctionFragment;
    "liveMarketsBetween(uint256,uint256)": FunctionFragment;
    "liveMarketsBy(address,uint256,uint256)": FunctionFragment;
    "liveMarketsFor(address,bool)": FunctionFragment;
    "marketPrice(uint256)": FunctionFragment;
    "marketScale(uint256)": FunctionFragment;
    "marketsFor(address,address)": FunctionFragment;
    "maxAmountAccepted(uint256,address)": FunctionFragment;
    "payoutFor(uint256,uint256,address)": FunctionFragment;
    "registerAuctioneer(address)": FunctionFragment;
    "registerMarket(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "currentCapacity"
      | "findMarketFor"
      | "getAuctioneer"
      | "getTeller"
      | "isInstantSwap"
      | "isLive"
      | "liveMarketsBetween"
      | "liveMarketsBy"
      | "liveMarketsFor"
      | "marketPrice"
      | "marketScale"
      | "marketsFor"
      | "maxAmountAccepted"
      | "payoutFor"
      | "registerAuctioneer"
      | "registerMarket",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "currentCapacity", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "findMarketFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: "getAuctioneer", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getTeller", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "isInstantSwap", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "isLive", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "liveMarketsBetween",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "liveMarketsBy",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "liveMarketsFor",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: "marketPrice", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "marketScale", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "marketsFor", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "maxAmountAccepted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "payoutFor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "registerAuctioneer", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "registerMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: "currentCapacity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "findMarketFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAuctioneer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTeller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInstantSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liveMarketsBetween", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liveMarketsBy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liveMarketsFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketScale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketsFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxAmountAccepted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registerAuctioneer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registerMarket", data: BytesLike): Result;

  events: {};
}

export interface IBondAggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBondAggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    findMarketFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      maxExpiry_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getAuctioneer(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    getTeller(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    liveMarketsBetween(
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    liveMarketsBy(
      owner_: PromiseOrValue<string>,
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    liveMarketsFor(
      token_: PromiseOrValue<string>,
      isPayout_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    marketsFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    registerAuctioneer(
      auctioneer_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerMarket(
      payoutToken_: PromiseOrValue<string>,
      quoteToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  findMarketFor(
    payout_: PromiseOrValue<string>,
    quote_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    minAmountOut_: PromiseOrValue<BigNumberish>,
    maxExpiry_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAuctioneer(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getTeller(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  liveMarketsBetween(
    firstIndex_: PromiseOrValue<BigNumberish>,
    lastIndex_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  liveMarketsBy(
    owner_: PromiseOrValue<string>,
    firstIndex_: PromiseOrValue<BigNumberish>,
    lastIndex_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  liveMarketsFor(
    token_: PromiseOrValue<string>,
    isPayout_: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  marketsFor(
    payout_: PromiseOrValue<string>,
    quote_: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  maxAmountAccepted(
    id_: PromiseOrValue<BigNumberish>,
    referrer_: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  payoutFor(
    amount_: PromiseOrValue<BigNumberish>,
    id_: PromiseOrValue<BigNumberish>,
    referrer_: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  registerAuctioneer(
    auctioneer_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerMarket(
    payoutToken_: PromiseOrValue<string>,
    quoteToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    findMarketFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      maxExpiry_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAuctioneer(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getTeller(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    liveMarketsBetween(
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    liveMarketsBy(
      owner_: PromiseOrValue<string>,
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    liveMarketsFor(
      token_: PromiseOrValue<string>,
      isPayout_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketsFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    registerAuctioneer(auctioneer_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    registerMarket(
      payoutToken_: PromiseOrValue<string>,
      quoteToken_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    findMarketFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      maxExpiry_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAuctioneer(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTeller(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    liveMarketsBetween(
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liveMarketsBy(
      owner_: PromiseOrValue<string>,
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liveMarketsFor(
      token_: PromiseOrValue<string>,
      isPayout_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketsFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    registerAuctioneer(
      auctioneer_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerMarket(
      payoutToken_: PromiseOrValue<string>,
      quoteToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    findMarketFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      maxExpiry_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAuctioneer(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTeller(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liveMarketsBetween(
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liveMarketsBy(
      owner_: PromiseOrValue<string>,
      firstIndex_: PromiseOrValue<BigNumberish>,
      lastIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liveMarketsFor(
      token_: PromiseOrValue<string>,
      isPayout_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketsFor(
      payout_: PromiseOrValue<string>,
      quote_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    registerAuctioneer(
      auctioneer_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerMarket(
      payoutToken_: PromiseOrValue<string>,
      quoteToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
