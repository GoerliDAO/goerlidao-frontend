/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export interface IStakingInterface extends utils.Interface {
  functions: {
    "claim(address,bool)": FunctionFragment;
    "contractBalance()": FunctionFragment;
    "forfeit()": FunctionFragment;
    "index()": FunctionFragment;
    "rebase()": FunctionFragment;
    "stake(address,uint256,bool,bool)": FunctionFragment;
    "supplyInWarmup()": FunctionFragment;
    "toggleLock()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "unstake(address,uint256,bool,bool)": FunctionFragment;
    "unwrap(address,uint256)": FunctionFragment;
    "wrap(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "contractBalance"
      | "forfeit"
      | "index"
      | "rebase"
      | "stake"
      | "supplyInWarmup"
      | "toggleLock"
      | "totalStaked"
      | "unstake"
      | "unwrap"
      | "wrap",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claim", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: "contractBalance", values?: undefined): string;
  encodeFunctionData(functionFragment: "forfeit", values?: undefined): string;
  encodeFunctionData(functionFragment: "index", values?: undefined): string;
  encodeFunctionData(functionFragment: "rebase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: "supplyInWarmup", values?: undefined): string;
  encodeFunctionData(functionFragment: "toggleLock", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalStaked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: "unwrap",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "wrap", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contractBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forfeit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "index", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplyInWarmup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toggleLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalStaked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unwrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;

  events: {};
}

export interface IStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      _recipient: PromiseOrValue<string>,
      _rebasing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    contractBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    forfeit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    index(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebase(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    stake(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _rebasing: PromiseOrValue<boolean>,
      _claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supplyInWarmup(overrides?: CallOverrides): Promise<[BigNumber]>;

    toggleLock(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstake(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _trigger: PromiseOrValue<boolean>,
      _rebasing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unwrap(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    wrap(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  claim(
    _recipient: PromiseOrValue<string>,
    _rebasing: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  contractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  forfeit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  index(overrides?: CallOverrides): Promise<BigNumber>;

  rebase(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  stake(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _rebasing: PromiseOrValue<boolean>,
    _claim: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supplyInWarmup(overrides?: CallOverrides): Promise<BigNumber>;

  toggleLock(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _trigger: PromiseOrValue<boolean>,
    _rebasing: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unwrap(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  wrap(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      _recipient: PromiseOrValue<string>,
      _rebasing: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    contractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    forfeit(overrides?: CallOverrides): Promise<BigNumber>;

    index(overrides?: CallOverrides): Promise<BigNumber>;

    rebase(overrides?: CallOverrides): Promise<void>;

    stake(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _rebasing: PromiseOrValue<boolean>,
      _claim: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    supplyInWarmup(overrides?: CallOverrides): Promise<BigNumber>;

    toggleLock(overrides?: CallOverrides): Promise<void>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _trigger: PromiseOrValue<boolean>,
      _rebasing: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    unwrap(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    wrap(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    claim(
      _recipient: PromiseOrValue<string>,
      _rebasing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    contractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    forfeit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    index(overrides?: CallOverrides): Promise<BigNumber>;

    rebase(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    stake(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _rebasing: PromiseOrValue<boolean>,
      _claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supplyInWarmup(overrides?: CallOverrides): Promise<BigNumber>;

    toggleLock(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _trigger: PromiseOrValue<boolean>,
      _rebasing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unwrap(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    wrap(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      _recipient: PromiseOrValue<string>,
      _rebasing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    contractBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forfeit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    index(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebase(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    stake(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _rebasing: PromiseOrValue<boolean>,
      _claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supplyInWarmup(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleLock(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _trigger: PromiseOrValue<boolean>,
      _rebasing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unwrap(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    wrap(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
