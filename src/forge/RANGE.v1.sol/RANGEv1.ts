/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";

export declare namespace RANGEv1 {
  export type SideStruct = {
    active: PromiseOrValue<boolean>;
    lastActive: PromiseOrValue<BigNumberish>;
    capacity: PromiseOrValue<BigNumberish>;
    threshold: PromiseOrValue<BigNumberish>;
    market: PromiseOrValue<BigNumberish>;
  };

  export type SideStructOutput = [boolean, number, BigNumber, BigNumber, BigNumber] & {
    active: boolean;
    lastActive: number;
    capacity: BigNumber;
    threshold: BigNumber;
    market: BigNumber;
  };

  export type LineStruct = { price: PromiseOrValue<BigNumberish> };

  export type LineStructOutput = [BigNumber] & { price: BigNumber };

  export type BandStruct = {
    high: RANGEv1.LineStruct;
    low: RANGEv1.LineStruct;
    spread: PromiseOrValue<BigNumberish>;
  };

  export type BandStructOutput = [RANGEv1.LineStructOutput, RANGEv1.LineStructOutput, BigNumber] & {
    high: RANGEv1.LineStructOutput;
    low: RANGEv1.LineStructOutput;
    spread: BigNumber;
  };

  export type RangeStruct = {
    low: RANGEv1.SideStruct;
    high: RANGEv1.SideStruct;
    cushion: RANGEv1.BandStruct;
    wall: RANGEv1.BandStruct;
  };

  export type RangeStructOutput = [
    RANGEv1.SideStructOutput,
    RANGEv1.SideStructOutput,
    RANGEv1.BandStructOutput,
    RANGEv1.BandStructOutput,
  ] & {
    low: RANGEv1.SideStructOutput;
    high: RANGEv1.SideStructOutput;
    cushion: RANGEv1.BandStructOutput;
    wall: RANGEv1.BandStructOutput;
  };
}

export interface RANGEv1Interface extends utils.Interface {
  functions: {
    "INIT()": FunctionFragment;
    "KEYCODE()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "active(bool)": FunctionFragment;
    "capacity(bool)": FunctionFragment;
    "changeKernel(address)": FunctionFragment;
    "gdao()": FunctionFragment;
    "kernel()": FunctionFragment;
    "lastActive(bool)": FunctionFragment;
    "market(bool)": FunctionFragment;
    "price(bool,bool)": FunctionFragment;
    "range()": FunctionFragment;
    "regenerate(bool,uint256)": FunctionFragment;
    "reserve()": FunctionFragment;
    "setSpreads(uint256,uint256)": FunctionFragment;
    "setThresholdFactor(uint256)": FunctionFragment;
    "spread(bool)": FunctionFragment;
    "thresholdFactor()": FunctionFragment;
    "updateCapacity(bool,uint256)": FunctionFragment;
    "updateMarket(bool,uint256,uint256)": FunctionFragment;
    "updatePrices(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INIT"
      | "KEYCODE"
      | "VERSION"
      | "active"
      | "capacity"
      | "changeKernel"
      | "gdao"
      | "kernel"
      | "lastActive"
      | "market"
      | "price"
      | "range"
      | "regenerate"
      | "reserve"
      | "setSpreads"
      | "setThresholdFactor"
      | "spread"
      | "thresholdFactor"
      | "updateCapacity"
      | "updateMarket"
      | "updatePrices",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "INIT", values?: undefined): string;
  encodeFunctionData(functionFragment: "KEYCODE", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "active", values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: "capacity", values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: "changeKernel", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "gdao", values?: undefined): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(functionFragment: "lastActive", values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: "market", values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: "price", values: [PromiseOrValue<boolean>, PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: "range", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "regenerate",
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setSpreads",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "setThresholdFactor", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "spread", values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: "thresholdFactor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCapacity",
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarket",
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "updatePrices", values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: "INIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KEYCODE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "capacity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeKernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gdao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "range", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "regenerate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSpreads", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setThresholdFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spread", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "thresholdFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateCapacity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePrices", data: BytesLike): Result;

  events: {
    "CushionDown(bool,uint256)": EventFragment;
    "CushionUp(bool,uint256,uint256)": EventFragment;
    "PricesChanged(uint256,uint256,uint256,uint256)": EventFragment;
    "SpreadsChanged(uint256,uint256)": EventFragment;
    "ThresholdFactorChanged(uint256)": EventFragment;
    "WallDown(bool,uint256,uint256)": EventFragment;
    "WallUp(bool,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CushionDown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CushionUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PricesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpreadsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdFactorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WallDown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WallUp"): EventFragment;
}

export interface CushionDownEventObject {
  high_: boolean;
  timestamp_: BigNumber;
}
export type CushionDownEvent = TypedEvent<[boolean, BigNumber], CushionDownEventObject>;

export type CushionDownEventFilter = TypedEventFilter<CushionDownEvent>;

export interface CushionUpEventObject {
  high_: boolean;
  timestamp_: BigNumber;
  capacity_: BigNumber;
}
export type CushionUpEvent = TypedEvent<[boolean, BigNumber, BigNumber], CushionUpEventObject>;

export type CushionUpEventFilter = TypedEventFilter<CushionUpEvent>;

export interface PricesChangedEventObject {
  wallLowPrice_: BigNumber;
  cushionLowPrice_: BigNumber;
  cushionHighPrice_: BigNumber;
  wallHighPrice_: BigNumber;
}
export type PricesChangedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, BigNumber], PricesChangedEventObject>;

export type PricesChangedEventFilter = TypedEventFilter<PricesChangedEvent>;

export interface SpreadsChangedEventObject {
  cushionSpread_: BigNumber;
  wallSpread_: BigNumber;
}
export type SpreadsChangedEvent = TypedEvent<[BigNumber, BigNumber], SpreadsChangedEventObject>;

export type SpreadsChangedEventFilter = TypedEventFilter<SpreadsChangedEvent>;

export interface ThresholdFactorChangedEventObject {
  thresholdFactor_: BigNumber;
}
export type ThresholdFactorChangedEvent = TypedEvent<[BigNumber], ThresholdFactorChangedEventObject>;

export type ThresholdFactorChangedEventFilter = TypedEventFilter<ThresholdFactorChangedEvent>;

export interface WallDownEventObject {
  high_: boolean;
  timestamp_: BigNumber;
  capacity_: BigNumber;
}
export type WallDownEvent = TypedEvent<[boolean, BigNumber, BigNumber], WallDownEventObject>;

export type WallDownEventFilter = TypedEventFilter<WallDownEvent>;

export interface WallUpEventObject {
  high_: boolean;
  timestamp_: BigNumber;
  capacity_: BigNumber;
}
export type WallUpEvent = TypedEvent<[boolean, BigNumber, BigNumber], WallUpEventObject>;

export type WallUpEventFilter = TypedEventFilter<WallUpEvent>;

export interface RANGEv1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RANGEv1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    KEYCODE(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[number, number] & { major: number; minor: number }>;

    active(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[boolean]>;

    capacity(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    gdao(overrides?: CallOverrides): Promise<[string]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    lastActive(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[BigNumber]>;

    market(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[BigNumber]>;

    price(
      wall_: PromiseOrValue<boolean>,
      high_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    range(overrides?: CallOverrides): Promise<[RANGEv1.RangeStructOutput]>;

    regenerate(
      high_: PromiseOrValue<boolean>,
      capacity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    setSpreads(
      cushionSpread_: PromiseOrValue<BigNumberish>,
      wallSpread_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setThresholdFactor(
      thresholdFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    spread(wall_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[BigNumber]>;

    thresholdFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateCapacity(
      high_: PromiseOrValue<boolean>,
      capacity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMarket(
      high_: PromiseOrValue<boolean>,
      market_: PromiseOrValue<BigNumberish>,
      marketCapacity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePrices(
      movingAverage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  KEYCODE(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<[number, number] & { major: number; minor: number }>;

  active(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<boolean>;

  capacity(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

  changeKernel(
    newKernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  gdao(overrides?: CallOverrides): Promise<string>;

  kernel(overrides?: CallOverrides): Promise<string>;

  lastActive(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

  market(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

  price(wall_: PromiseOrValue<boolean>, high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

  range(overrides?: CallOverrides): Promise<RANGEv1.RangeStructOutput>;

  regenerate(
    high_: PromiseOrValue<boolean>,
    capacity_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reserve(overrides?: CallOverrides): Promise<string>;

  setSpreads(
    cushionSpread_: PromiseOrValue<BigNumberish>,
    wallSpread_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setThresholdFactor(
    thresholdFactor_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  spread(wall_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

  thresholdFactor(overrides?: CallOverrides): Promise<BigNumber>;

  updateCapacity(
    high_: PromiseOrValue<boolean>,
    capacity_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMarket(
    high_: PromiseOrValue<boolean>,
    market_: PromiseOrValue<BigNumberish>,
    marketCapacity_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePrices(
    movingAverage_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    INIT(overrides?: CallOverrides): Promise<void>;

    KEYCODE(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<[number, number] & { major: number; minor: number }>;

    active(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<boolean>;

    capacity(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    changeKernel(newKernel_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    gdao(overrides?: CallOverrides): Promise<string>;

    kernel(overrides?: CallOverrides): Promise<string>;

    lastActive(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    market(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    price(
      wall_: PromiseOrValue<boolean>,
      high_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    range(overrides?: CallOverrides): Promise<RANGEv1.RangeStructOutput>;

    regenerate(
      high_: PromiseOrValue<boolean>,
      capacity_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    reserve(overrides?: CallOverrides): Promise<string>;

    setSpreads(
      cushionSpread_: PromiseOrValue<BigNumberish>,
      wallSpread_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setThresholdFactor(thresholdFactor_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    spread(wall_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    thresholdFactor(overrides?: CallOverrides): Promise<BigNumber>;

    updateCapacity(
      high_: PromiseOrValue<boolean>,
      capacity_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMarket(
      high_: PromiseOrValue<boolean>,
      market_: PromiseOrValue<BigNumberish>,
      marketCapacity_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updatePrices(movingAverage_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CushionDown(bool,uint256)"(high_?: null, timestamp_?: null): CushionDownEventFilter;
    CushionDown(high_?: null, timestamp_?: null): CushionDownEventFilter;

    "CushionUp(bool,uint256,uint256)"(high_?: null, timestamp_?: null, capacity_?: null): CushionUpEventFilter;
    CushionUp(high_?: null, timestamp_?: null, capacity_?: null): CushionUpEventFilter;

    "PricesChanged(uint256,uint256,uint256,uint256)"(
      wallLowPrice_?: null,
      cushionLowPrice_?: null,
      cushionHighPrice_?: null,
      wallHighPrice_?: null,
    ): PricesChangedEventFilter;
    PricesChanged(
      wallLowPrice_?: null,
      cushionLowPrice_?: null,
      cushionHighPrice_?: null,
      wallHighPrice_?: null,
    ): PricesChangedEventFilter;

    "SpreadsChanged(uint256,uint256)"(cushionSpread_?: null, wallSpread_?: null): SpreadsChangedEventFilter;
    SpreadsChanged(cushionSpread_?: null, wallSpread_?: null): SpreadsChangedEventFilter;

    "ThresholdFactorChanged(uint256)"(thresholdFactor_?: null): ThresholdFactorChangedEventFilter;
    ThresholdFactorChanged(thresholdFactor_?: null): ThresholdFactorChangedEventFilter;

    "WallDown(bool,uint256,uint256)"(high_?: null, timestamp_?: null, capacity_?: null): WallDownEventFilter;
    WallDown(high_?: null, timestamp_?: null, capacity_?: null): WallDownEventFilter;

    "WallUp(bool,uint256,uint256)"(high_?: null, timestamp_?: null, capacity_?: null): WallUpEventFilter;
    WallUp(high_?: null, timestamp_?: null, capacity_?: null): WallUpEventFilter;
  };

  estimateGas: {
    INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    KEYCODE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    active(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    capacity(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    gdao(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    lastActive(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    market(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    price(
      wall_: PromiseOrValue<boolean>,
      high_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    range(overrides?: CallOverrides): Promise<BigNumber>;

    regenerate(
      high_: PromiseOrValue<boolean>,
      capacity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    setSpreads(
      cushionSpread_: PromiseOrValue<BigNumberish>,
      wallSpread_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setThresholdFactor(
      thresholdFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    spread(wall_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    thresholdFactor(overrides?: CallOverrides): Promise<BigNumber>;

    updateCapacity(
      high_: PromiseOrValue<boolean>,
      capacity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMarket(
      high_: PromiseOrValue<boolean>,
      market_: PromiseOrValue<BigNumberish>,
      marketCapacity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePrices(
      movingAverage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    KEYCODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    active(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    capacity(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    gdao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastActive(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    market(high_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(
      wall_: PromiseOrValue<boolean>,
      high_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    range(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    regenerate(
      high_: PromiseOrValue<boolean>,
      capacity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSpreads(
      cushionSpread_: PromiseOrValue<BigNumberish>,
      wallSpread_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setThresholdFactor(
      thresholdFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    spread(wall_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    thresholdFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCapacity(
      high_: PromiseOrValue<boolean>,
      capacity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMarket(
      high_: PromiseOrValue<boolean>,
      market_: PromiseOrValue<BigNumberish>,
      marketCapacity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePrices(
      movingAverage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
