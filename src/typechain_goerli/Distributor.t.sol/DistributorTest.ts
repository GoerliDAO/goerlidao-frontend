/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";

export interface DistributorTestInterface extends utils.Interface {
  functions: {
    "IS_SCRIPT()": FunctionFragment;
    "IS_TEST()": FunctionFragment;
    "failed()": FunctionFragment;
    "setUp()": FunctionFragment;
    "testCorrectness_addPoolEmptySlot()": FunctionFragment;
    "testCorrectness_addPoolOccupiedSlot()": FunctionFragment;
    "testCorrectness_addPoolRequiresRole(address)": FunctionFragment;
    "testCorrectness_distributeNotUnlocked()": FunctionFragment;
    "testCorrectness_distributeOnlyStaking()": FunctionFragment;
    "testCorrectness_nextRewardFor()": FunctionFragment;
    "testCorrectness_removePoolFailsOnSanityCheck()": FunctionFragment;
    "testCorrectness_removePoolRequiresRole(address)": FunctionFragment;
    "testCorrectness_removesPool()": FunctionFragment;
    "testCorrectness_setBounty(uint256)": FunctionFragment;
    "testCorrectness_setBountyRequiresRole(address)": FunctionFragment;
    "testCorrectness_setPools()": FunctionFragment;
    "testCorrectness_setPoolsRequiresRole(address)": FunctionFragment;
    "testCorrectness_setRewardRateRequiresRole(address)": FunctionFragment;
    "testCorrectness_setsRewardRate(uint256)": FunctionFragment;
    "test_defaultState()": FunctionFragment;
    "test_retrieveBountyIsZero()": FunctionFragment;
    "test_retrieveBountyOnlyStaking()": FunctionFragment;
    "test_triggerRebaseStory1()": FunctionFragment;
    "test_triggerRebaseStory2()": FunctionFragment;
    "test_triggerRebaseStory3()": FunctionFragment;
    "test_triggerRebaseStory4()": FunctionFragment;
    "test_triggerRebaseStory5()": FunctionFragment;
    "vm()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_SCRIPT"
      | "IS_TEST"
      | "failed"
      | "setUp"
      | "testCorrectness_addPoolEmptySlot"
      | "testCorrectness_addPoolOccupiedSlot"
      | "testCorrectness_addPoolRequiresRole"
      | "testCorrectness_distributeNotUnlocked"
      | "testCorrectness_distributeOnlyStaking"
      | "testCorrectness_nextRewardFor"
      | "testCorrectness_removePoolFailsOnSanityCheck"
      | "testCorrectness_removePoolRequiresRole"
      | "testCorrectness_removesPool"
      | "testCorrectness_setBounty"
      | "testCorrectness_setBountyRequiresRole"
      | "testCorrectness_setPools"
      | "testCorrectness_setPoolsRequiresRole"
      | "testCorrectness_setRewardRateRequiresRole"
      | "testCorrectness_setsRewardRate"
      | "test_defaultState"
      | "test_retrieveBountyIsZero"
      | "test_retrieveBountyOnlyStaking"
      | "test_triggerRebaseStory1"
      | "test_triggerRebaseStory2"
      | "test_triggerRebaseStory3"
      | "test_triggerRebaseStory4"
      | "test_triggerRebaseStory5"
      | "vm",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_addPoolEmptySlot", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_addPoolOccupiedSlot", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_addPoolRequiresRole", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "testCorrectness_distributeNotUnlocked", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_distributeOnlyStaking", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_nextRewardFor", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_removePoolFailsOnSanityCheck", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_removePoolRequiresRole",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "testCorrectness_removesPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_setBounty", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_setBountyRequiresRole",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "testCorrectness_setPools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_setPoolsRequiresRole",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_setRewardRateRequiresRole",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_setsRewardRate",
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "test_defaultState", values?: undefined): string;
  encodeFunctionData(functionFragment: "test_retrieveBountyIsZero", values?: undefined): string;
  encodeFunctionData(functionFragment: "test_retrieveBountyOnlyStaking", values?: undefined): string;
  encodeFunctionData(functionFragment: "test_triggerRebaseStory1", values?: undefined): string;
  encodeFunctionData(functionFragment: "test_triggerRebaseStory2", values?: undefined): string;
  encodeFunctionData(functionFragment: "test_triggerRebaseStory3", values?: undefined): string;
  encodeFunctionData(functionFragment: "test_triggerRebaseStory4", values?: undefined): string;
  encodeFunctionData(functionFragment: "test_triggerRebaseStory5", values?: undefined): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_addPoolEmptySlot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_addPoolOccupiedSlot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_addPoolRequiresRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_distributeNotUnlocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_distributeOnlyStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_nextRewardFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_removePoolFailsOnSanityCheck", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_removePoolRequiresRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_removesPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setBounty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setBountyRequiresRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setPoolsRequiresRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setRewardRateRequiresRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setsRewardRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_defaultState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_retrieveBountyIsZero", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_retrieveBountyOnlyStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_triggerRebaseStory1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_triggerRebaseStory2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_triggerRebaseStory3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_triggerRebaseStory4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_triggerRebaseStory5", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;

  events: {
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_array(string,uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_array(string,int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_array(string,address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<[BigNumber[]], log_array_uint256_array_EventObject>;

export type log_array_uint256_array_EventFilter = TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<[BigNumber[]], log_array_int256_array_EventObject>;

export type log_array_int256_array_EventFilter = TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<[string[]], log_array_address_array_EventObject>;

export type log_array_address_array_EventFilter = TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<[string, string], log_named_addressEventObject>;

export type log_named_addressEventFilter = TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<[string, string], log_named_bytesEventObject>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<[string, string], log_named_bytes32EventObject>;

export type log_named_bytes32EventFilter = TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<[string, BigNumber, BigNumber], log_named_decimal_intEventObject>;

export type log_named_decimal_intEventFilter = TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<[string, BigNumber, BigNumber], log_named_decimal_uintEventObject>;

export type log_named_decimal_uintEventFilter = TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<[string, BigNumber], log_named_intEventObject>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<[string, string], log_named_stringEventObject>;

export type log_named_stringEventFilter = TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<[string, BigNumber], log_named_uintEventObject>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface DistributorTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DistributorTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<[boolean]>;

    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    failed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setUp(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    testCorrectness_addPoolEmptySlot(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_addPoolOccupiedSlot(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_addPoolRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_distributeNotUnlocked(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_distributeOnlyStaking(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_nextRewardFor(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_removePoolFailsOnSanityCheck(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_removePoolRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_removesPool(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_setBounty(
      newBounty_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_setBountyRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_setPools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    testCorrectness_setPoolsRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_setRewardRateRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_setsRewardRate(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    test_defaultState(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    test_retrieveBountyIsZero(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    test_retrieveBountyOnlyStaking(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    test_triggerRebaseStory1(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    test_triggerRebaseStory2(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    test_triggerRebaseStory3(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    test_triggerRebaseStory4(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    test_triggerRebaseStory5(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    vm(overrides?: CallOverrides): Promise<[string]>;
  };

  IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  failed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setUp(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_addPoolEmptySlot(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_addPoolOccupiedSlot(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_addPoolRequiresRole(
    user_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_distributeNotUnlocked(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_distributeOnlyStaking(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_nextRewardFor(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_removePoolFailsOnSanityCheck(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_removePoolRequiresRole(
    user_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_removesPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_setBounty(
    newBounty_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_setBountyRequiresRole(
    user_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_setPools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_setPoolsRequiresRole(
    user_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_setRewardRateRequiresRole(
    user_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_setsRewardRate(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  test_defaultState(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  test_retrieveBountyIsZero(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  test_retrieveBountyOnlyStaking(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  test_triggerRebaseStory1(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  test_triggerRebaseStory2(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  test_triggerRebaseStory3(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  test_triggerRebaseStory4(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  test_triggerRebaseStory5(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  vm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    setUp(overrides?: CallOverrides): Promise<void>;

    testCorrectness_addPoolEmptySlot(overrides?: CallOverrides): Promise<void>;

    testCorrectness_addPoolOccupiedSlot(overrides?: CallOverrides): Promise<void>;

    testCorrectness_addPoolRequiresRole(user_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    testCorrectness_distributeNotUnlocked(overrides?: CallOverrides): Promise<void>;

    testCorrectness_distributeOnlyStaking(overrides?: CallOverrides): Promise<void>;

    testCorrectness_nextRewardFor(overrides?: CallOverrides): Promise<void>;

    testCorrectness_removePoolFailsOnSanityCheck(overrides?: CallOverrides): Promise<void>;

    testCorrectness_removePoolRequiresRole(user_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    testCorrectness_removesPool(overrides?: CallOverrides): Promise<void>;

    testCorrectness_setBounty(newBounty_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    testCorrectness_setBountyRequiresRole(user_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    testCorrectness_setPools(overrides?: CallOverrides): Promise<void>;

    testCorrectness_setPoolsRequiresRole(user_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    testCorrectness_setRewardRateRequiresRole(user_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    testCorrectness_setsRewardRate(amount_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    test_defaultState(overrides?: CallOverrides): Promise<void>;

    test_retrieveBountyIsZero(overrides?: CallOverrides): Promise<void>;

    test_retrieveBountyOnlyStaking(overrides?: CallOverrides): Promise<void>;

    test_triggerRebaseStory1(overrides?: CallOverrides): Promise<void>;

    test_triggerRebaseStory2(overrides?: CallOverrides): Promise<void>;

    test_triggerRebaseStory3(overrides?: CallOverrides): Promise<void>;

    test_triggerRebaseStory4(overrides?: CallOverrides): Promise<void>;

    test_triggerRebaseStory5(overrides?: CallOverrides): Promise<void>;

    vm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(key?: null, val?: null): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(key?: null, val?: null): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(key?: null, val?: null): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(key?: null, val?: null): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(key?: null, val?: null): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(key?: null, val?: null): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null,
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(key?: null, val?: null, decimals?: null): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null,
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(key?: null, val?: null, decimals?: null): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(key?: null, val?: null): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(key?: null, val?: null): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(key?: null, val?: null): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<BigNumber>;

    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setUp(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_addPoolEmptySlot(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_addPoolOccupiedSlot(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_addPoolRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_distributeNotUnlocked(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_distributeOnlyStaking(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_nextRewardFor(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_removePoolFailsOnSanityCheck(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_removePoolRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_removesPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_setBounty(
      newBounty_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_setBountyRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_setPools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_setPoolsRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_setRewardRateRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_setsRewardRate(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    test_defaultState(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    test_retrieveBountyIsZero(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    test_retrieveBountyOnlyStaking(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    test_triggerRebaseStory1(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    test_triggerRebaseStory2(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    test_triggerRebaseStory3(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    test_triggerRebaseStory4(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    test_triggerRebaseStory5(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    vm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setUp(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    testCorrectness_addPoolEmptySlot(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_addPoolOccupiedSlot(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_addPoolRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_distributeNotUnlocked(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_distributeOnlyStaking(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_nextRewardFor(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_removePoolFailsOnSanityCheck(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_removePoolRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_removesPool(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setBounty(
      newBounty_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setBountyRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setPools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    testCorrectness_setPoolsRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setRewardRateRequiresRole(
      user_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setsRewardRate(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    test_defaultState(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    test_retrieveBountyIsZero(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    test_retrieveBountyOnlyStaking(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    test_triggerRebaseStory1(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    test_triggerRebaseStory2(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    test_triggerRebaseStory3(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    test_triggerRebaseStory4(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    test_triggerRebaseStory5(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
