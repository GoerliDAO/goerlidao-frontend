/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export interface MockPriceFeedInterface extends utils.Interface {
  functions: {
    "decimals()": FunctionFragment;
    "description()": FunctionFragment;
    "getAnswer(uint256)": FunctionFragment;
    "getRoundData(uint80)": FunctionFragment;
    "getTimestamp(uint256)": FunctionFragment;
    "latestAnswer()": FunctionFragment;
    "latestAnsweredInRound()": FunctionFragment;
    "latestRound()": FunctionFragment;
    "latestRoundData()": FunctionFragment;
    "latestTimestamp()": FunctionFragment;
    "s_answer()": FunctionFragment;
    "s_answeredInRound()": FunctionFragment;
    "s_decimals()": FunctionFragment;
    "s_roundId()": FunctionFragment;
    "s_timestamp()": FunctionFragment;
    "setAnsweredInRound(uint80)": FunctionFragment;
    "setDecimals(uint8)": FunctionFragment;
    "setLatestAnswer(int256)": FunctionFragment;
    "setRoundId(uint80)": FunctionFragment;
    "setTimestamp(uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "decimals"
      | "description"
      | "getAnswer"
      | "getRoundData"
      | "getTimestamp"
      | "latestAnswer"
      | "latestAnsweredInRound"
      | "latestRound"
      | "latestRoundData"
      | "latestTimestamp"
      | "s_answer"
      | "s_answeredInRound"
      | "s_decimals"
      | "s_roundId"
      | "s_timestamp"
      | "setAnsweredInRound"
      | "setDecimals"
      | "setLatestAnswer"
      | "setRoundId"
      | "setTimestamp"
      | "version",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "description", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAnswer", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getRoundData", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getTimestamp", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "latestAnswer", values?: undefined): string;
  encodeFunctionData(functionFragment: "latestAnsweredInRound", values?: undefined): string;
  encodeFunctionData(functionFragment: "latestRound", values?: undefined): string;
  encodeFunctionData(functionFragment: "latestRoundData", values?: undefined): string;
  encodeFunctionData(functionFragment: "latestTimestamp", values?: undefined): string;
  encodeFunctionData(functionFragment: "s_answer", values?: undefined): string;
  encodeFunctionData(functionFragment: "s_answeredInRound", values?: undefined): string;
  encodeFunctionData(functionFragment: "s_decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "s_roundId", values?: undefined): string;
  encodeFunctionData(functionFragment: "s_timestamp", values?: undefined): string;
  encodeFunctionData(functionFragment: "setAnsweredInRound", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setDecimals", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setLatestAnswer", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setRoundId", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setTimestamp", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "description", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoundData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTimestamp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "latestAnswer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "latestAnsweredInRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "latestRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "latestRoundData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "latestTimestamp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "s_answer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "s_answeredInRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "s_decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "s_roundId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "s_timestamp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAnsweredInRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDecimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLatestAnswer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoundId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTimestamp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AnswerUpdated(int256,uint256,uint256)": EventFragment;
    "NewRound(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnswerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRound"): EventFragment;
}

export interface AnswerUpdatedEventObject {
  current: BigNumber;
  roundId: BigNumber;
  updatedAt: BigNumber;
}
export type AnswerUpdatedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], AnswerUpdatedEventObject>;

export type AnswerUpdatedEventFilter = TypedEventFilter<AnswerUpdatedEvent>;

export interface NewRoundEventObject {
  roundId: BigNumber;
  startedBy: string;
  startedAt: BigNumber;
}
export type NewRoundEvent = TypedEvent<[BigNumber, string, BigNumber], NewRoundEventObject>;

export type NewRoundEventFilter = TypedEventFilter<NewRoundEvent>;

export interface MockPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockPriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decimals(overrides?: CallOverrides): Promise<[number]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    getAnswer(roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoundData(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getTimestamp(roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    latestAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestAnsweredInRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestRoundData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    latestTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_answer(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_answeredInRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_decimals(overrides?: CallOverrides): Promise<[number]>;

    s_roundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_timestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAnsweredInRound(
      answeredInRound_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDecimals(
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLatestAnswer(
      answer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRoundId(
      roundId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTimestamp(
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  decimals(overrides?: CallOverrides): Promise<number>;

  description(overrides?: CallOverrides): Promise<string>;

  getAnswer(roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getRoundData(
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  getTimestamp(roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

  latestAnsweredInRound(overrides?: CallOverrides): Promise<BigNumber>;

  latestRound(overrides?: CallOverrides): Promise<BigNumber>;

  latestRoundData(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  s_answer(overrides?: CallOverrides): Promise<BigNumber>;

  s_answeredInRound(overrides?: CallOverrides): Promise<BigNumber>;

  s_decimals(overrides?: CallOverrides): Promise<number>;

  s_roundId(overrides?: CallOverrides): Promise<BigNumber>;

  s_timestamp(overrides?: CallOverrides): Promise<BigNumber>;

  setAnsweredInRound(
    answeredInRound_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDecimals(
    decimals_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLatestAnswer(
    answer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRoundId(
    roundId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTimestamp(
    timestamp_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    decimals(overrides?: CallOverrides): Promise<number>;

    description(overrides?: CallOverrides): Promise<string>;

    getAnswer(roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoundData(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getTimestamp(roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    latestAnsweredInRound(overrides?: CallOverrides): Promise<BigNumber>;

    latestRound(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    s_answer(overrides?: CallOverrides): Promise<BigNumber>;

    s_answeredInRound(overrides?: CallOverrides): Promise<BigNumber>;

    s_decimals(overrides?: CallOverrides): Promise<number>;

    s_roundId(overrides?: CallOverrides): Promise<BigNumber>;

    s_timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    setAnsweredInRound(answeredInRound_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setDecimals(decimals_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setLatestAnswer(answer: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setRoundId(roundId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setTimestamp(timestamp_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AnswerUpdated(int256,uint256,uint256)"(
      current?: PromiseOrValue<BigNumberish> | null,
      roundId?: PromiseOrValue<BigNumberish> | null,
      updatedAt?: null,
    ): AnswerUpdatedEventFilter;
    AnswerUpdated(
      current?: PromiseOrValue<BigNumberish> | null,
      roundId?: PromiseOrValue<BigNumberish> | null,
      updatedAt?: null,
    ): AnswerUpdatedEventFilter;

    "NewRound(uint256,address,uint256)"(
      roundId?: PromiseOrValue<BigNumberish> | null,
      startedBy?: PromiseOrValue<string> | null,
      startedAt?: null,
    ): NewRoundEventFilter;
    NewRound(
      roundId?: PromiseOrValue<BigNumberish> | null,
      startedBy?: PromiseOrValue<string> | null,
      startedAt?: null,
    ): NewRoundEventFilter;
  };

  estimateGas: {
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    getAnswer(roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoundData(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTimestamp(roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    latestAnsweredInRound(overrides?: CallOverrides): Promise<BigNumber>;

    latestRound(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

    latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    s_answer(overrides?: CallOverrides): Promise<BigNumber>;

    s_answeredInRound(overrides?: CallOverrides): Promise<BigNumber>;

    s_decimals(overrides?: CallOverrides): Promise<BigNumber>;

    s_roundId(overrides?: CallOverrides): Promise<BigNumber>;

    s_timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    setAnsweredInRound(
      answeredInRound_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDecimals(
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLatestAnswer(
      answer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRoundId(
      roundId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTimestamp(
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAnswer(roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoundData(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTimestamp(roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestAnsweredInRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_answer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_answeredInRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_roundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAnsweredInRound(
      answeredInRound_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDecimals(
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLatestAnswer(
      answer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRoundId(
      roundId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTimestamp(
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
