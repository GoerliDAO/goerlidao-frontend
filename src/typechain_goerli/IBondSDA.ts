/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export interface IBondSDAInterface extends utils.Interface {
  functions: {
    "closeMarket(uint256)": FunctionFragment;
    "createMarket(bytes)": FunctionFragment;
    "currentCapacity(uint256)": FunctionFragment;
    "currentControlVariable(uint256)": FunctionFragment;
    "currentDebt(uint256)": FunctionFragment;
    "getAggregator()": FunctionFragment;
    "getMarketInfoForPurchase(uint256)": FunctionFragment;
    "getTeller()": FunctionFragment;
    "isInstantSwap(uint256)": FunctionFragment;
    "isLive(uint256)": FunctionFragment;
    "marketPrice(uint256)": FunctionFragment;
    "marketScale(uint256)": FunctionFragment;
    "maxAmountAccepted(uint256,address)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "payoutFor(uint256,uint256,address)": FunctionFragment;
    "pullOwnership(uint256)": FunctionFragment;
    "purchaseBond(uint256,uint256,uint256)": FunctionFragment;
    "pushOwnership(uint256,address)": FunctionFragment;
    "setAllowNewMarkets(bool)": FunctionFragment;
    "setCallbackAuthStatus(address,bool)": FunctionFragment;
    "setDefaults(uint32[6])": FunctionFragment;
    "setIntervals(uint256,uint32[3])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "closeMarket"
      | "createMarket"
      | "currentCapacity"
      | "currentControlVariable"
      | "currentDebt"
      | "getAggregator"
      | "getMarketInfoForPurchase"
      | "getTeller"
      | "isInstantSwap"
      | "isLive"
      | "marketPrice"
      | "marketScale"
      | "maxAmountAccepted"
      | "ownerOf"
      | "payoutFor"
      | "pullOwnership"
      | "purchaseBond"
      | "pushOwnership"
      | "setAllowNewMarkets"
      | "setCallbackAuthStatus"
      | "setDefaults"
      | "setIntervals",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "closeMarket", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "createMarket", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: "currentCapacity", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "currentControlVariable", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "currentDebt", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getAggregator", values?: undefined): string;
  encodeFunctionData(functionFragment: "getMarketInfoForPurchase", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getTeller", values?: undefined): string;
  encodeFunctionData(functionFragment: "isInstantSwap", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "isLive", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "marketPrice", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "marketScale", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "maxAmountAccepted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "ownerOf", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "payoutFor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "pullOwnership", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "purchaseBond",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "pushOwnership",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "setAllowNewMarkets", values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: "setCallbackAuthStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: "setDefaults", values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(
    functionFragment: "setIntervals",
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    ],
  ): string;

  decodeFunctionResult(functionFragment: "closeMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currentCapacity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currentControlVariable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currentDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAggregator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMarketInfoForPurchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTeller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInstantSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketScale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxAmountAccepted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pullOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchaseBond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAllowNewMarkets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCallbackAuthStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDefaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setIntervals", data: BytesLike): Result;

  events: {};
}

export interface IBondSDA extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBondSDAInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    closeMarket(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createMarket(
      params_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    currentControlVariable(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    currentDebt(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAggregator(overrides?: CallOverrides): Promise<[string]>;

    getMarketInfoForPurchase(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string, number, BigNumber] & {
        owner: string;
        callbackAddr: string;
        payoutToken: string;
        quoteToken: string;
        vesting: number;
        maxPayout: BigNumber;
      }
    >;

    getTeller(overrides?: CallOverrides): Promise<[string]>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    ownerOf(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    pullOwnership(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    purchaseBond(
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pushOwnership(
      id_: PromiseOrValue<BigNumberish>,
      newOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAllowNewMarkets(
      status_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCallbackAuthStatus(
      creator_: PromiseOrValue<string>,
      status_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDefaults(
      defaults_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setIntervals(
      id_: PromiseOrValue<BigNumberish>,
      intervals_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  closeMarket(
    id_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createMarket(
    params_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  currentControlVariable(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  currentDebt(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getAggregator(overrides?: CallOverrides): Promise<string>;

  getMarketInfoForPurchase(
    id_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, string, number, BigNumber] & {
      owner: string;
      callbackAddr: string;
      payoutToken: string;
      quoteToken: string;
      vesting: number;
      maxPayout: BigNumber;
    }
  >;

  getTeller(overrides?: CallOverrides): Promise<string>;

  isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  maxAmountAccepted(
    id_: PromiseOrValue<BigNumberish>,
    referrer_: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  ownerOf(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  payoutFor(
    amount_: PromiseOrValue<BigNumberish>,
    id_: PromiseOrValue<BigNumberish>,
    referrer_: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  pullOwnership(
    id_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  purchaseBond(
    id_: PromiseOrValue<BigNumberish>,
    amount_: PromiseOrValue<BigNumberish>,
    minAmountOut_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pushOwnership(
    id_: PromiseOrValue<BigNumberish>,
    newOwner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAllowNewMarkets(
    status_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCallbackAuthStatus(
    creator_: PromiseOrValue<string>,
    status_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDefaults(
    defaults_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setIntervals(
    id_: PromiseOrValue<BigNumberish>,
    intervals_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    closeMarket(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    createMarket(params_: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    currentControlVariable(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    currentDebt(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getAggregator(overrides?: CallOverrides): Promise<string>;

    getMarketInfoForPurchase(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string, number, BigNumber] & {
        owner: string;
        callbackAddr: string;
        payoutToken: string;
        quoteToken: string;
        vesting: number;
        maxPayout: BigNumber;
      }
    >;

    getTeller(overrides?: CallOverrides): Promise<string>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    ownerOf(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pullOwnership(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    purchaseBond(
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pushOwnership(
      id_: PromiseOrValue<BigNumberish>,
      newOwner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAllowNewMarkets(status_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setCallbackAuthStatus(
      creator_: PromiseOrValue<string>,
      status_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDefaults(defaults_: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    setIntervals(
      id_: PromiseOrValue<BigNumberish>,
      intervals_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    closeMarket(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createMarket(
      params_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    currentControlVariable(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    currentDebt(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketInfoForPurchase(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTeller(overrides?: CallOverrides): Promise<BigNumber>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    ownerOf(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pullOwnership(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    purchaseBond(
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pushOwnership(
      id_: PromiseOrValue<BigNumberish>,
      newOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAllowNewMarkets(
      status_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCallbackAuthStatus(
      creator_: PromiseOrValue<string>,
      status_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDefaults(
      defaults_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setIntervals(
      id_: PromiseOrValue<BigNumberish>,
      intervals_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closeMarket(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createMarket(
      params_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentControlVariable(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentDebt(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketInfoForPurchase(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTeller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    ownerOf(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pullOwnership(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    purchaseBond(
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pushOwnership(
      id_: PromiseOrValue<BigNumberish>,
      newOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAllowNewMarkets(
      status_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCallbackAuthStatus(
      creator_: PromiseOrValue<string>,
      status_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDefaults(
      defaults_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setIntervals(
      id_: PromiseOrValue<BigNumberish>,
      intervals_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
