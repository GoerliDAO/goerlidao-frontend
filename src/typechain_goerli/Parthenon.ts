/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export type PermissionsStruct = {
  keycode: PromiseOrValue<BytesLike>;
  funcSelector: PromiseOrValue<BytesLike>;
};

export type PermissionsStructOutput = [string, string] & {
  keycode: string;
  funcSelector: string;
};

export type InstructionStruct = {
  action: PromiseOrValue<BigNumberish>;
  target: PromiseOrValue<string>;
};

export type InstructionStructOutput = [number, string] & {
  action: number;
  target: string;
};

export interface ParthenonInterface extends utils.Interface {
  functions: {
    "ACTIVATION_DEADLINE()": FunctionFragment;
    "ACTIVATION_TIMELOCK()": FunctionFragment;
    "COLLATERAL_DURATION()": FunctionFragment;
    "COLLATERAL_MINIMUM()": FunctionFragment;
    "COLLATERAL_REQUIREMENT()": FunctionFragment;
    "EXECUTION_DEADLINE()": FunctionFragment;
    "EXECUTION_THRESHOLD()": FunctionFragment;
    "EXECUTION_TIMELOCK()": FunctionFragment;
    "INSTR()": FunctionFragment;
    "VOTES()": FunctionFragment;
    "VOTING_PERIOD()": FunctionFragment;
    "WARMUP_PERIOD()": FunctionFragment;
    "_max(uint256,uint256)": FunctionFragment;
    "activateProposal(uint256)": FunctionFragment;
    "changeKernel(address)": FunctionFragment;
    "configureDependencies()": FunctionFragment;
    "executeProposal(uint256)": FunctionFragment;
    "getProposalMetadata(uint256)": FunctionFragment;
    "isActive()": FunctionFragment;
    "kernel()": FunctionFragment;
    "reclaimCollateral(uint256)": FunctionFragment;
    "requestPermissions()": FunctionFragment;
    "submitProposal((uint8,address)[],string,string)": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACTIVATION_DEADLINE"
      | "ACTIVATION_TIMELOCK"
      | "COLLATERAL_DURATION"
      | "COLLATERAL_MINIMUM"
      | "COLLATERAL_REQUIREMENT"
      | "EXECUTION_DEADLINE"
      | "EXECUTION_THRESHOLD"
      | "EXECUTION_TIMELOCK"
      | "INSTR"
      | "VOTES"
      | "VOTING_PERIOD"
      | "WARMUP_PERIOD"
      | "_max"
      | "activateProposal"
      | "changeKernel"
      | "configureDependencies"
      | "executeProposal"
      | "getProposalMetadata"
      | "isActive"
      | "kernel"
      | "reclaimCollateral"
      | "requestPermissions"
      | "submitProposal"
      | "vote",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ACTIVATION_DEADLINE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ACTIVATION_TIMELOCK", values?: undefined): string;
  encodeFunctionData(functionFragment: "COLLATERAL_DURATION", values?: undefined): string;
  encodeFunctionData(functionFragment: "COLLATERAL_MINIMUM", values?: undefined): string;
  encodeFunctionData(functionFragment: "COLLATERAL_REQUIREMENT", values?: undefined): string;
  encodeFunctionData(functionFragment: "EXECUTION_DEADLINE", values?: undefined): string;
  encodeFunctionData(functionFragment: "EXECUTION_THRESHOLD", values?: undefined): string;
  encodeFunctionData(functionFragment: "EXECUTION_TIMELOCK", values?: undefined): string;
  encodeFunctionData(functionFragment: "INSTR", values?: undefined): string;
  encodeFunctionData(functionFragment: "VOTES", values?: undefined): string;
  encodeFunctionData(functionFragment: "VOTING_PERIOD", values?: undefined): string;
  encodeFunctionData(functionFragment: "WARMUP_PERIOD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_max",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "activateProposal", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "changeKernel", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "configureDependencies", values?: undefined): string;
  encodeFunctionData(functionFragment: "executeProposal", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getProposalMetadata", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(functionFragment: "reclaimCollateral", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "requestPermissions", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [InstructionStruct[], PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]): string;

  decodeFunctionResult(functionFragment: "ACTIVATION_DEADLINE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ACTIVATION_TIMELOCK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "COLLATERAL_DURATION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "COLLATERAL_MINIMUM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "COLLATERAL_REQUIREMENT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "EXECUTION_DEADLINE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "EXECUTION_THRESHOLD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "EXECUTION_TIMELOCK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INSTR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VOTES", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VOTING_PERIOD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WARMUP_PERIOD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_max", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activateProposal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeKernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configureDependencies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeProposal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProposalMetadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reclaimCollateral", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requestPermissions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitProposal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "CollateralReclaimed(uint256,uint256)": EventFragment;
    "ProposalActivated(uint256,uint256)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "ProposalSubmitted(uint256,string,string)": EventFragment;
    "VotesCast(uint256,address,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollateralReclaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotesCast"): EventFragment;
}

export interface CollateralReclaimedEventObject {
  proposalId: BigNumber;
  tokensReclaimed_: BigNumber;
}
export type CollateralReclaimedEvent = TypedEvent<[BigNumber, BigNumber], CollateralReclaimedEventObject>;

export type CollateralReclaimedEventFilter = TypedEventFilter<CollateralReclaimedEvent>;

export interface ProposalActivatedEventObject {
  proposalId: BigNumber;
  timestamp: BigNumber;
}
export type ProposalActivatedEvent = TypedEvent<[BigNumber, BigNumber], ProposalActivatedEventObject>;

export type ProposalActivatedEventFilter = TypedEventFilter<ProposalActivatedEvent>;

export interface ProposalExecutedEventObject {
  proposalId: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<[BigNumber], ProposalExecutedEventObject>;

export type ProposalExecutedEventFilter = TypedEventFilter<ProposalExecutedEvent>;

export interface ProposalSubmittedEventObject {
  proposalId: BigNumber;
  title: string;
  proposalURI: string;
}
export type ProposalSubmittedEvent = TypedEvent<[BigNumber, string, string], ProposalSubmittedEventObject>;

export type ProposalSubmittedEventFilter = TypedEventFilter<ProposalSubmittedEvent>;

export interface VotesCastEventObject {
  proposalId: BigNumber;
  voter: string;
  approve: boolean;
  userVotes: BigNumber;
}
export type VotesCastEvent = TypedEvent<[BigNumber, string, boolean, BigNumber], VotesCastEventObject>;

export type VotesCastEventFilter = TypedEventFilter<VotesCastEvent>;

export interface Parthenon extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ParthenonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACTIVATION_DEADLINE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ACTIVATION_TIMELOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    COLLATERAL_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    COLLATERAL_MINIMUM(overrides?: CallOverrides): Promise<[BigNumber]>;

    COLLATERAL_REQUIREMENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    EXECUTION_DEADLINE(overrides?: CallOverrides): Promise<[BigNumber]>;

    EXECUTION_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    EXECUTION_TIMELOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    INSTR(overrides?: CallOverrides): Promise<[string]>;

    VOTES(overrides?: CallOverrides): Promise<[string]>;

    VOTING_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    WARMUP_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    _max(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    activateProposal(
      proposalId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    executeProposal(
      proposalId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getProposalMetadata(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
        submitter: string;
        submissionTimestamp: BigNumber;
        collateralAmt: BigNumber;
        activationTimestamp: BigNumber;
        totalRegisteredVotes: BigNumber;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        isExecuted: boolean;
        isCollateralReturned: boolean;
      }
    >;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    reclaimCollateral(
      proposalId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    requestPermissions(
      overrides?: CallOverrides,
    ): Promise<[PermissionsStructOutput[]] & { requests: PermissionsStructOutput[] }>;

    submitProposal(
      instructions_: InstructionStruct[],
      title_: PromiseOrValue<string>,
      proposalURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vote(
      proposalId_: PromiseOrValue<BigNumberish>,
      approve_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  ACTIVATION_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

  ACTIVATION_TIMELOCK(overrides?: CallOverrides): Promise<BigNumber>;

  COLLATERAL_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  COLLATERAL_MINIMUM(overrides?: CallOverrides): Promise<BigNumber>;

  COLLATERAL_REQUIREMENT(overrides?: CallOverrides): Promise<BigNumber>;

  EXECUTION_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

  EXECUTION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  EXECUTION_TIMELOCK(overrides?: CallOverrides): Promise<BigNumber>;

  INSTR(overrides?: CallOverrides): Promise<string>;

  VOTES(overrides?: CallOverrides): Promise<string>;

  VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  WARMUP_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  _max(a: PromiseOrValue<BigNumberish>, b: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  activateProposal(
    proposalId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeKernel(
    newKernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  executeProposal(
    proposalId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getProposalMetadata(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
      submitter: string;
      submissionTimestamp: BigNumber;
      collateralAmt: BigNumber;
      activationTimestamp: BigNumber;
      totalRegisteredVotes: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      isExecuted: boolean;
      isCollateralReturned: boolean;
    }
  >;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  reclaimCollateral(
    proposalId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  requestPermissions(overrides?: CallOverrides): Promise<PermissionsStructOutput[]>;

  submitProposal(
    instructions_: InstructionStruct[],
    title_: PromiseOrValue<string>,
    proposalURI_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vote(
    proposalId_: PromiseOrValue<BigNumberish>,
    approve_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ACTIVATION_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

    ACTIVATION_TIMELOCK(overrides?: CallOverrides): Promise<BigNumber>;

    COLLATERAL_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    COLLATERAL_MINIMUM(overrides?: CallOverrides): Promise<BigNumber>;

    COLLATERAL_REQUIREMENT(overrides?: CallOverrides): Promise<BigNumber>;

    EXECUTION_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

    EXECUTION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    EXECUTION_TIMELOCK(overrides?: CallOverrides): Promise<BigNumber>;

    INSTR(overrides?: CallOverrides): Promise<string>;

    VOTES(overrides?: CallOverrides): Promise<string>;

    VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    WARMUP_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    _max(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    activateProposal(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    changeKernel(newKernel_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    configureDependencies(overrides?: CallOverrides): Promise<string[]>;

    executeProposal(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    getProposalMetadata(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
        submitter: string;
        submissionTimestamp: BigNumber;
        collateralAmt: BigNumber;
        activationTimestamp: BigNumber;
        totalRegisteredVotes: BigNumber;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        isExecuted: boolean;
        isCollateralReturned: boolean;
      }
    >;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    reclaimCollateral(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    requestPermissions(overrides?: CallOverrides): Promise<PermissionsStructOutput[]>;

    submitProposal(
      instructions_: InstructionStruct[],
      title_: PromiseOrValue<string>,
      proposalURI_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    vote(
      proposalId_: PromiseOrValue<BigNumberish>,
      approve_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    "CollateralReclaimed(uint256,uint256)"(proposalId?: null, tokensReclaimed_?: null): CollateralReclaimedEventFilter;
    CollateralReclaimed(proposalId?: null, tokensReclaimed_?: null): CollateralReclaimedEventFilter;

    "ProposalActivated(uint256,uint256)"(proposalId?: null, timestamp?: null): ProposalActivatedEventFilter;
    ProposalActivated(proposalId?: null, timestamp?: null): ProposalActivatedEventFilter;

    "ProposalExecuted(uint256)"(proposalId?: null): ProposalExecutedEventFilter;
    ProposalExecuted(proposalId?: null): ProposalExecutedEventFilter;

    "ProposalSubmitted(uint256,string,string)"(
      proposalId?: null,
      title?: null,
      proposalURI?: null,
    ): ProposalSubmittedEventFilter;
    ProposalSubmitted(proposalId?: null, title?: null, proposalURI?: null): ProposalSubmittedEventFilter;

    "VotesCast(uint256,address,bool,uint256)"(
      proposalId?: null,
      voter?: null,
      approve?: null,
      userVotes?: null,
    ): VotesCastEventFilter;
    VotesCast(proposalId?: null, voter?: null, approve?: null, userVotes?: null): VotesCastEventFilter;
  };

  estimateGas: {
    ACTIVATION_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

    ACTIVATION_TIMELOCK(overrides?: CallOverrides): Promise<BigNumber>;

    COLLATERAL_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    COLLATERAL_MINIMUM(overrides?: CallOverrides): Promise<BigNumber>;

    COLLATERAL_REQUIREMENT(overrides?: CallOverrides): Promise<BigNumber>;

    EXECUTION_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

    EXECUTION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    EXECUTION_TIMELOCK(overrides?: CallOverrides): Promise<BigNumber>;

    INSTR(overrides?: CallOverrides): Promise<BigNumber>;

    VOTES(overrides?: CallOverrides): Promise<BigNumber>;

    VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    WARMUP_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    _max(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    activateProposal(
      proposalId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    executeProposal(
      proposalId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getProposalMetadata(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    reclaimCollateral(
      proposalId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    requestPermissions(overrides?: CallOverrides): Promise<BigNumber>;

    submitProposal(
      instructions_: InstructionStruct[],
      title_: PromiseOrValue<string>,
      proposalURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vote(
      proposalId_: PromiseOrValue<BigNumberish>,
      approve_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACTIVATION_DEADLINE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ACTIVATION_TIMELOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COLLATERAL_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COLLATERAL_MINIMUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COLLATERAL_REQUIREMENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXECUTION_DEADLINE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXECUTION_THRESHOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXECUTION_TIMELOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INSTR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTING_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WARMUP_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _max(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    activateProposal(
      proposalId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    executeProposal(
      proposalId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getProposalMetadata(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reclaimCollateral(
      proposalId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    requestPermissions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitProposal(
      instructions_: InstructionStruct[],
      title_: PromiseOrValue<string>,
      proposalURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vote(
      proposalId_: PromiseOrValue<BigNumberish>,
      approve_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
