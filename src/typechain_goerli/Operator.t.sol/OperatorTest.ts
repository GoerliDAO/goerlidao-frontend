/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";

export interface OperatorTestInterface extends utils.Interface {
  functions: {
    "IS_SCRIPT()": FunctionFragment;
    "IS_TEST()": FunctionFragment;
    "failed()": FunctionFragment;
    "setUp()": FunctionFragment;
    "testCorrectness_cannotInitializeTwice()": FunctionFragment;
    "testCorrectness_cannotOperatorIfNotInitialized()": FunctionFragment;
    "testCorrectness_cannotPerformMarketOpsWhileInactive()": FunctionFragment;
    "testCorrectness_cannotSetCushionFactorWithInvalidParams()": FunctionFragment;
    "testCorrectness_cannotSetCushionParamsWithInvalidParams()": FunctionFragment;
    "testCorrectness_cannotSetReserveFactorWithInvalidParams()": FunctionFragment;
    "testCorrectness_cannotSetSpreadWithInvalidParams()": FunctionFragment;
    "testCorrectness_cannotSwapHighWallWhenDown()": FunctionFragment;
    "testCorrectness_cannotSwapHighWallWithStalePrice()": FunctionFragment;
    "testCorrectness_cannotSwapLowWallWhenDown()": FunctionFragment;
    "testCorrectness_cannotSwapLowWallWithStalePrice()": FunctionFragment;
    "testCorrectness_deactivateShutsdownCushions()": FunctionFragment;
    "testCorrectness_highCushionClosedAboveSpread()": FunctionFragment;
    "testCorrectness_highCushionClosedBelowSpread()": FunctionFragment;
    "testCorrectness_highCushionClosedOnRegen()": FunctionFragment;
    "testCorrectness_highCushionClosedWhenWallDown()": FunctionFragment;
    "testCorrectness_highCushionDeployedInSpread()": FunctionFragment;
    "testCorrectness_highCushionNotDeployedWhenWallDown()": FunctionFragment;
    "testCorrectness_highCushionPurchasesReduceCapacity()": FunctionFragment;
    "testCorrectness_highWallBreaksAtThreshold()": FunctionFragment;
    "testCorrectness_highWallRegenA()": FunctionFragment;
    "testCorrectness_highWallRegenB()": FunctionFragment;
    "testCorrectness_highWallRegenC()": FunctionFragment;
    "testCorrectness_highWallRegenD()": FunctionFragment;
    "testCorrectness_highWallRegenTime()": FunctionFragment;
    "testCorrectness_initialize()": FunctionFragment;
    "testCorrectness_lowCushionClosedAboveSpread()": FunctionFragment;
    "testCorrectness_lowCushionClosedBelowSpread()": FunctionFragment;
    "testCorrectness_lowCushionClosedOnRegen()": FunctionFragment;
    "testCorrectness_lowCushionClosedWhenWallDown()": FunctionFragment;
    "testCorrectness_lowCushionDeployedInSpread()": FunctionFragment;
    "testCorrectness_lowCushionNotDeployedWhenWallDown()": FunctionFragment;
    "testCorrectness_lowCushionPurchasesReduceCapacity()": FunctionFragment;
    "testCorrectness_lowWallBreaksAtThreshold()": FunctionFragment;
    "testCorrectness_lowWallRegenA()": FunctionFragment;
    "testCorrectness_lowWallRegenB()": FunctionFragment;
    "testCorrectness_lowWallRegenC()": FunctionFragment;
    "testCorrectness_lowWallRegenD()": FunctionFragment;
    "testCorrectness_lowWallRegenTime()": FunctionFragment;
    "testCorrectness_nonGuardianCannotCall()": FunctionFragment;
    "testCorrectness_nonPolicyCannotSetConfig()": FunctionFragment;
    "testCorrectness_onlyHeartCanOperate()": FunctionFragment;
    "testCorrectness_regenerate()": FunctionFragment;
    "testCorrectness_setBondContracts()": FunctionFragment;
    "testCorrectness_setCushionFactor()": FunctionFragment;
    "testCorrectness_setCushionParams()": FunctionFragment;
    "testCorrectness_setRegenParams()": FunctionFragment;
    "testCorrectness_setReserveFactor()": FunctionFragment;
    "testCorrectness_setSpreads()": FunctionFragment;
    "testCorrectness_setThresholdFactor()": FunctionFragment;
    "testCorrectness_swapHighWall()": FunctionFragment;
    "testCorrectness_swapLowWall()": FunctionFragment;
    "testCorrectness_swapRevertsOnSlippage()": FunctionFragment;
    "testCorrectness_swapRevertsWithInvalidToken()": FunctionFragment;
    "testCorrectness_updateRange()": FunctionFragment;
    "testCorrectness_viewFullCapacity()": FunctionFragment;
    "testCorrectness_viewGetAmountOut()": FunctionFragment;
    "test_marketClosesAsExpected1()": FunctionFragment;
    "test_marketClosesAsExpected2()": FunctionFragment;
    "userCreator()": FunctionFragment;
    "vm()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_SCRIPT"
      | "IS_TEST"
      | "failed"
      | "setUp"
      | "testCorrectness_cannotInitializeTwice"
      | "testCorrectness_cannotOperatorIfNotInitialized"
      | "testCorrectness_cannotPerformMarketOpsWhileInactive"
      | "testCorrectness_cannotSetCushionFactorWithInvalidParams"
      | "testCorrectness_cannotSetCushionParamsWithInvalidParams"
      | "testCorrectness_cannotSetReserveFactorWithInvalidParams"
      | "testCorrectness_cannotSetSpreadWithInvalidParams"
      | "testCorrectness_cannotSwapHighWallWhenDown"
      | "testCorrectness_cannotSwapHighWallWithStalePrice"
      | "testCorrectness_cannotSwapLowWallWhenDown"
      | "testCorrectness_cannotSwapLowWallWithStalePrice"
      | "testCorrectness_deactivateShutsdownCushions"
      | "testCorrectness_highCushionClosedAboveSpread"
      | "testCorrectness_highCushionClosedBelowSpread"
      | "testCorrectness_highCushionClosedOnRegen"
      | "testCorrectness_highCushionClosedWhenWallDown"
      | "testCorrectness_highCushionDeployedInSpread"
      | "testCorrectness_highCushionNotDeployedWhenWallDown"
      | "testCorrectness_highCushionPurchasesReduceCapacity"
      | "testCorrectness_highWallBreaksAtThreshold"
      | "testCorrectness_highWallRegenA"
      | "testCorrectness_highWallRegenB"
      | "testCorrectness_highWallRegenC"
      | "testCorrectness_highWallRegenD"
      | "testCorrectness_highWallRegenTime"
      | "testCorrectness_initialize"
      | "testCorrectness_lowCushionClosedAboveSpread"
      | "testCorrectness_lowCushionClosedBelowSpread"
      | "testCorrectness_lowCushionClosedOnRegen"
      | "testCorrectness_lowCushionClosedWhenWallDown"
      | "testCorrectness_lowCushionDeployedInSpread"
      | "testCorrectness_lowCushionNotDeployedWhenWallDown"
      | "testCorrectness_lowCushionPurchasesReduceCapacity"
      | "testCorrectness_lowWallBreaksAtThreshold"
      | "testCorrectness_lowWallRegenA"
      | "testCorrectness_lowWallRegenB"
      | "testCorrectness_lowWallRegenC"
      | "testCorrectness_lowWallRegenD"
      | "testCorrectness_lowWallRegenTime"
      | "testCorrectness_nonGuardianCannotCall"
      | "testCorrectness_nonPolicyCannotSetConfig"
      | "testCorrectness_onlyHeartCanOperate"
      | "testCorrectness_regenerate"
      | "testCorrectness_setBondContracts"
      | "testCorrectness_setCushionFactor"
      | "testCorrectness_setCushionParams"
      | "testCorrectness_setRegenParams"
      | "testCorrectness_setReserveFactor"
      | "testCorrectness_setSpreads"
      | "testCorrectness_setThresholdFactor"
      | "testCorrectness_swapHighWall"
      | "testCorrectness_swapLowWall"
      | "testCorrectness_swapRevertsOnSlippage"
      | "testCorrectness_swapRevertsWithInvalidToken"
      | "testCorrectness_updateRange"
      | "testCorrectness_viewFullCapacity"
      | "testCorrectness_viewGetAmountOut"
      | "test_marketClosesAsExpected1"
      | "test_marketClosesAsExpected2"
      | "userCreator"
      | "vm",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_cannotInitializeTwice", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_cannotOperatorIfNotInitialized", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_cannotPerformMarketOpsWhileInactive",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_cannotSetCushionFactorWithInvalidParams",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_cannotSetCushionParamsWithInvalidParams",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_cannotSetReserveFactorWithInvalidParams",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "testCorrectness_cannotSetSpreadWithInvalidParams", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_cannotSwapHighWallWhenDown", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_cannotSwapHighWallWithStalePrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_cannotSwapLowWallWhenDown", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_cannotSwapLowWallWithStalePrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_deactivateShutsdownCushions", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_highCushionClosedAboveSpread", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_highCushionClosedBelowSpread", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_highCushionClosedOnRegen", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_highCushionClosedWhenWallDown", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_highCushionDeployedInSpread", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_highCushionNotDeployedWhenWallDown",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "testCorrectness_highCushionPurchasesReduceCapacity",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "testCorrectness_highWallBreaksAtThreshold", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_highWallRegenA", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_highWallRegenB", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_highWallRegenC", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_highWallRegenD", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_highWallRegenTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_initialize", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_lowCushionClosedAboveSpread", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_lowCushionClosedBelowSpread", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_lowCushionClosedOnRegen", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_lowCushionClosedWhenWallDown", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_lowCushionDeployedInSpread", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_lowCushionNotDeployedWhenWallDown", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_lowCushionPurchasesReduceCapacity", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_lowWallBreaksAtThreshold", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_lowWallRegenA", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_lowWallRegenB", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_lowWallRegenC", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_lowWallRegenD", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_lowWallRegenTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_nonGuardianCannotCall", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_nonPolicyCannotSetConfig", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_onlyHeartCanOperate", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_regenerate", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_setBondContracts", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_setCushionFactor", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_setCushionParams", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_setRegenParams", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_setReserveFactor", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_setSpreads", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_setThresholdFactor", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_swapHighWall", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_swapLowWall", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_swapRevertsOnSlippage", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_swapRevertsWithInvalidToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_updateRange", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_viewFullCapacity", values?: undefined): string;
  encodeFunctionData(functionFragment: "testCorrectness_viewGetAmountOut", values?: undefined): string;
  encodeFunctionData(functionFragment: "test_marketClosesAsExpected1", values?: undefined): string;
  encodeFunctionData(functionFragment: "test_marketClosesAsExpected2", values?: undefined): string;
  encodeFunctionData(functionFragment: "userCreator", values?: undefined): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_cannotInitializeTwice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_cannotOperatorIfNotInitialized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testCorrectness_cannotPerformMarketOpsWhileInactive",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCorrectness_cannotSetCushionFactorWithInvalidParams",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCorrectness_cannotSetCushionParamsWithInvalidParams",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCorrectness_cannotSetReserveFactorWithInvalidParams",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_cannotSetSpreadWithInvalidParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_cannotSwapHighWallWhenDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_cannotSwapHighWallWithStalePrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_cannotSwapLowWallWhenDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_cannotSwapLowWallWithStalePrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_deactivateShutsdownCushions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_highCushionClosedAboveSpread", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_highCushionClosedBelowSpread", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_highCushionClosedOnRegen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_highCushionClosedWhenWallDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_highCushionDeployedInSpread", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_highCushionNotDeployedWhenWallDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_highCushionPurchasesReduceCapacity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_highWallBreaksAtThreshold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_highWallRegenA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_highWallRegenB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_highWallRegenC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_highWallRegenD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_highWallRegenTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_lowCushionClosedAboveSpread", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_lowCushionClosedBelowSpread", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_lowCushionClosedOnRegen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_lowCushionClosedWhenWallDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_lowCushionDeployedInSpread", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_lowCushionNotDeployedWhenWallDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_lowCushionPurchasesReduceCapacity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_lowWallBreaksAtThreshold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_lowWallRegenA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_lowWallRegenB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_lowWallRegenC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_lowWallRegenD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_lowWallRegenTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_nonGuardianCannotCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_nonPolicyCannotSetConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_onlyHeartCanOperate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_regenerate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setBondContracts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setCushionFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setCushionParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setRegenParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setReserveFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setSpreads", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_setThresholdFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_swapHighWall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_swapLowWall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_swapRevertsOnSlippage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_swapRevertsWithInvalidToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_updateRange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_viewFullCapacity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCorrectness_viewGetAmountOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_marketClosesAsExpected1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_marketClosesAsExpected2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userCreator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;

  events: {
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_array(string,uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_array(string,int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_array(string,address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<[BigNumber[]], log_array_uint256_array_EventObject>;

export type log_array_uint256_array_EventFilter = TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<[BigNumber[]], log_array_int256_array_EventObject>;

export type log_array_int256_array_EventFilter = TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<[string[]], log_array_address_array_EventObject>;

export type log_array_address_array_EventFilter = TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<[string, string], log_named_addressEventObject>;

export type log_named_addressEventFilter = TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<[string, string], log_named_bytesEventObject>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<[string, string], log_named_bytes32EventObject>;

export type log_named_bytes32EventFilter = TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<[string, BigNumber, BigNumber], log_named_decimal_intEventObject>;

export type log_named_decimal_intEventFilter = TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<[string, BigNumber, BigNumber], log_named_decimal_uintEventObject>;

export type log_named_decimal_uintEventFilter = TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<[string, BigNumber], log_named_intEventObject>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<[string, string], log_named_stringEventObject>;

export type log_named_stringEventFilter = TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<[string, BigNumber], log_named_uintEventObject>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface OperatorTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OperatorTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<[boolean]>;

    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    failed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setUp(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    testCorrectness_cannotInitializeTwice(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_cannotOperatorIfNotInitialized(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_cannotPerformMarketOpsWhileInactive(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_cannotSetCushionFactorWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_cannotSetCushionParamsWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_cannotSetReserveFactorWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_cannotSetSpreadWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_cannotSwapHighWallWhenDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_cannotSwapHighWallWithStalePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_cannotSwapLowWallWhenDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_cannotSwapLowWallWithStalePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_deactivateShutsdownCushions(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_highCushionClosedAboveSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_highCushionClosedBelowSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_highCushionClosedOnRegen(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_highCushionClosedWhenWallDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_highCushionDeployedInSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_highCushionNotDeployedWhenWallDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_highCushionPurchasesReduceCapacity(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_highWallBreaksAtThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_highWallRegenA(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_highWallRegenB(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_highWallRegenC(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_highWallRegenD(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_highWallRegenTime(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    testCorrectness_lowCushionClosedAboveSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_lowCushionClosedBelowSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_lowCushionClosedOnRegen(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_lowCushionClosedWhenWallDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_lowCushionDeployedInSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_lowCushionNotDeployedWhenWallDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_lowCushionPurchasesReduceCapacity(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_lowWallBreaksAtThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_lowWallRegenA(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_lowWallRegenB(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_lowWallRegenC(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_lowWallRegenD(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_lowWallRegenTime(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_nonGuardianCannotCall(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_nonPolicyCannotSetConfig(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_onlyHeartCanOperate(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_regenerate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    testCorrectness_setBondContracts(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_setCushionFactor(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_setCushionParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_setRegenParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_setReserveFactor(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_setSpreads(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    testCorrectness_setThresholdFactor(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_swapHighWall(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_swapLowWall(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_swapRevertsOnSlippage(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_swapRevertsWithInvalidToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_updateRange(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_viewFullCapacity(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testCorrectness_viewGetAmountOut(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    test_marketClosesAsExpected1(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    test_marketClosesAsExpected2(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userCreator(overrides?: CallOverrides): Promise<[string]>;

    vm(overrides?: CallOverrides): Promise<[string]>;
  };

  IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  failed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setUp(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_cannotInitializeTwice(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_cannotOperatorIfNotInitialized(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_cannotPerformMarketOpsWhileInactive(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_cannotSetCushionFactorWithInvalidParams(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_cannotSetCushionParamsWithInvalidParams(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_cannotSetReserveFactorWithInvalidParams(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_cannotSetSpreadWithInvalidParams(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_cannotSwapHighWallWhenDown(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_cannotSwapHighWallWithStalePrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_cannotSwapLowWallWhenDown(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_cannotSwapLowWallWithStalePrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_deactivateShutsdownCushions(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_highCushionClosedAboveSpread(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_highCushionClosedBelowSpread(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_highCushionClosedOnRegen(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_highCushionClosedWhenWallDown(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_highCushionDeployedInSpread(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_highCushionNotDeployedWhenWallDown(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_highCushionPurchasesReduceCapacity(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_highWallBreaksAtThreshold(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_highWallRegenA(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_highWallRegenB(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_highWallRegenC(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_highWallRegenD(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_highWallRegenTime(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_lowCushionClosedAboveSpread(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_lowCushionClosedBelowSpread(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_lowCushionClosedOnRegen(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_lowCushionClosedWhenWallDown(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_lowCushionDeployedInSpread(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_lowCushionNotDeployedWhenWallDown(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_lowCushionPurchasesReduceCapacity(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_lowWallBreaksAtThreshold(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_lowWallRegenA(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_lowWallRegenB(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_lowWallRegenC(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_lowWallRegenD(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_lowWallRegenTime(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_nonGuardianCannotCall(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_nonPolicyCannotSetConfig(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_onlyHeartCanOperate(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_regenerate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_setBondContracts(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_setCushionFactor(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_setCushionParams(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_setRegenParams(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_setReserveFactor(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_setSpreads(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_setThresholdFactor(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_swapHighWall(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_swapLowWall(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_swapRevertsOnSlippage(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_swapRevertsWithInvalidToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_updateRange(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  testCorrectness_viewFullCapacity(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testCorrectness_viewGetAmountOut(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  test_marketClosesAsExpected1(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  test_marketClosesAsExpected2(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  userCreator(overrides?: CallOverrides): Promise<string>;

  vm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    setUp(overrides?: CallOverrides): Promise<void>;

    testCorrectness_cannotInitializeTwice(overrides?: CallOverrides): Promise<void>;

    testCorrectness_cannotOperatorIfNotInitialized(overrides?: CallOverrides): Promise<void>;

    testCorrectness_cannotPerformMarketOpsWhileInactive(overrides?: CallOverrides): Promise<void>;

    testCorrectness_cannotSetCushionFactorWithInvalidParams(overrides?: CallOverrides): Promise<void>;

    testCorrectness_cannotSetCushionParamsWithInvalidParams(overrides?: CallOverrides): Promise<void>;

    testCorrectness_cannotSetReserveFactorWithInvalidParams(overrides?: CallOverrides): Promise<void>;

    testCorrectness_cannotSetSpreadWithInvalidParams(overrides?: CallOverrides): Promise<void>;

    testCorrectness_cannotSwapHighWallWhenDown(overrides?: CallOverrides): Promise<void>;

    testCorrectness_cannotSwapHighWallWithStalePrice(overrides?: CallOverrides): Promise<void>;

    testCorrectness_cannotSwapLowWallWhenDown(overrides?: CallOverrides): Promise<void>;

    testCorrectness_cannotSwapLowWallWithStalePrice(overrides?: CallOverrides): Promise<void>;

    testCorrectness_deactivateShutsdownCushions(overrides?: CallOverrides): Promise<void>;

    testCorrectness_highCushionClosedAboveSpread(overrides?: CallOverrides): Promise<void>;

    testCorrectness_highCushionClosedBelowSpread(overrides?: CallOverrides): Promise<void>;

    testCorrectness_highCushionClosedOnRegen(overrides?: CallOverrides): Promise<void>;

    testCorrectness_highCushionClosedWhenWallDown(overrides?: CallOverrides): Promise<void>;

    testCorrectness_highCushionDeployedInSpread(overrides?: CallOverrides): Promise<void>;

    testCorrectness_highCushionNotDeployedWhenWallDown(overrides?: CallOverrides): Promise<void>;

    testCorrectness_highCushionPurchasesReduceCapacity(overrides?: CallOverrides): Promise<void>;

    testCorrectness_highWallBreaksAtThreshold(overrides?: CallOverrides): Promise<void>;

    testCorrectness_highWallRegenA(overrides?: CallOverrides): Promise<void>;

    testCorrectness_highWallRegenB(overrides?: CallOverrides): Promise<void>;

    testCorrectness_highWallRegenC(overrides?: CallOverrides): Promise<void>;

    testCorrectness_highWallRegenD(overrides?: CallOverrides): Promise<void>;

    testCorrectness_highWallRegenTime(overrides?: CallOverrides): Promise<void>;

    testCorrectness_initialize(overrides?: CallOverrides): Promise<void>;

    testCorrectness_lowCushionClosedAboveSpread(overrides?: CallOverrides): Promise<void>;

    testCorrectness_lowCushionClosedBelowSpread(overrides?: CallOverrides): Promise<void>;

    testCorrectness_lowCushionClosedOnRegen(overrides?: CallOverrides): Promise<void>;

    testCorrectness_lowCushionClosedWhenWallDown(overrides?: CallOverrides): Promise<void>;

    testCorrectness_lowCushionDeployedInSpread(overrides?: CallOverrides): Promise<void>;

    testCorrectness_lowCushionNotDeployedWhenWallDown(overrides?: CallOverrides): Promise<void>;

    testCorrectness_lowCushionPurchasesReduceCapacity(overrides?: CallOverrides): Promise<void>;

    testCorrectness_lowWallBreaksAtThreshold(overrides?: CallOverrides): Promise<void>;

    testCorrectness_lowWallRegenA(overrides?: CallOverrides): Promise<void>;

    testCorrectness_lowWallRegenB(overrides?: CallOverrides): Promise<void>;

    testCorrectness_lowWallRegenC(overrides?: CallOverrides): Promise<void>;

    testCorrectness_lowWallRegenD(overrides?: CallOverrides): Promise<void>;

    testCorrectness_lowWallRegenTime(overrides?: CallOverrides): Promise<void>;

    testCorrectness_nonGuardianCannotCall(overrides?: CallOverrides): Promise<void>;

    testCorrectness_nonPolicyCannotSetConfig(overrides?: CallOverrides): Promise<void>;

    testCorrectness_onlyHeartCanOperate(overrides?: CallOverrides): Promise<void>;

    testCorrectness_regenerate(overrides?: CallOverrides): Promise<void>;

    testCorrectness_setBondContracts(overrides?: CallOverrides): Promise<void>;

    testCorrectness_setCushionFactor(overrides?: CallOverrides): Promise<void>;

    testCorrectness_setCushionParams(overrides?: CallOverrides): Promise<void>;

    testCorrectness_setRegenParams(overrides?: CallOverrides): Promise<void>;

    testCorrectness_setReserveFactor(overrides?: CallOverrides): Promise<void>;

    testCorrectness_setSpreads(overrides?: CallOverrides): Promise<void>;

    testCorrectness_setThresholdFactor(overrides?: CallOverrides): Promise<void>;

    testCorrectness_swapHighWall(overrides?: CallOverrides): Promise<void>;

    testCorrectness_swapLowWall(overrides?: CallOverrides): Promise<void>;

    testCorrectness_swapRevertsOnSlippage(overrides?: CallOverrides): Promise<void>;

    testCorrectness_swapRevertsWithInvalidToken(overrides?: CallOverrides): Promise<void>;

    testCorrectness_updateRange(overrides?: CallOverrides): Promise<void>;

    testCorrectness_viewFullCapacity(overrides?: CallOverrides): Promise<void>;

    testCorrectness_viewGetAmountOut(overrides?: CallOverrides): Promise<void>;

    test_marketClosesAsExpected1(overrides?: CallOverrides): Promise<void>;

    test_marketClosesAsExpected2(overrides?: CallOverrides): Promise<void>;

    userCreator(overrides?: CallOverrides): Promise<string>;

    vm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(key?: null, val?: null): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(key?: null, val?: null): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(key?: null, val?: null): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(key?: null, val?: null): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(key?: null, val?: null): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(key?: null, val?: null): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null,
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(key?: null, val?: null, decimals?: null): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null,
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(key?: null, val?: null, decimals?: null): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(key?: null, val?: null): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(key?: null, val?: null): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(key?: null, val?: null): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<BigNumber>;

    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setUp(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_cannotInitializeTwice(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_cannotOperatorIfNotInitialized(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_cannotPerformMarketOpsWhileInactive(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_cannotSetCushionFactorWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_cannotSetCushionParamsWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_cannotSetReserveFactorWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_cannotSetSpreadWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_cannotSwapHighWallWhenDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_cannotSwapHighWallWithStalePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_cannotSwapLowWallWhenDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_cannotSwapLowWallWithStalePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_deactivateShutsdownCushions(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_highCushionClosedAboveSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_highCushionClosedBelowSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_highCushionClosedOnRegen(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_highCushionClosedWhenWallDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_highCushionDeployedInSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_highCushionNotDeployedWhenWallDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_highCushionPurchasesReduceCapacity(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_highWallBreaksAtThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_highWallRegenA(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_highWallRegenB(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_highWallRegenC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_highWallRegenD(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_highWallRegenTime(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_lowCushionClosedAboveSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_lowCushionClosedBelowSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_lowCushionClosedOnRegen(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_lowCushionClosedWhenWallDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_lowCushionDeployedInSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_lowCushionNotDeployedWhenWallDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_lowCushionPurchasesReduceCapacity(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_lowWallBreaksAtThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_lowWallRegenA(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_lowWallRegenB(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_lowWallRegenC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_lowWallRegenD(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_lowWallRegenTime(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_nonGuardianCannotCall(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_nonPolicyCannotSetConfig(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_onlyHeartCanOperate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_regenerate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_setBondContracts(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_setCushionFactor(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_setCushionParams(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_setRegenParams(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_setReserveFactor(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_setSpreads(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_setThresholdFactor(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_swapHighWall(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_swapLowWall(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_swapRevertsOnSlippage(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_swapRevertsWithInvalidToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testCorrectness_updateRange(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_viewFullCapacity(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    testCorrectness_viewGetAmountOut(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    test_marketClosesAsExpected1(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    test_marketClosesAsExpected2(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    userCreator(overrides?: CallOverrides): Promise<BigNumber>;

    vm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setUp(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    testCorrectness_cannotInitializeTwice(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_cannotOperatorIfNotInitialized(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_cannotPerformMarketOpsWhileInactive(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_cannotSetCushionFactorWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_cannotSetCushionParamsWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_cannotSetReserveFactorWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_cannotSetSpreadWithInvalidParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_cannotSwapHighWallWhenDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_cannotSwapHighWallWithStalePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_cannotSwapLowWallWhenDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_cannotSwapLowWallWithStalePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_deactivateShutsdownCushions(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_highCushionClosedAboveSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_highCushionClosedBelowSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_highCushionClosedOnRegen(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_highCushionClosedWhenWallDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_highCushionDeployedInSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_highCushionNotDeployedWhenWallDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_highCushionPurchasesReduceCapacity(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_highWallBreaksAtThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_highWallRegenA(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_highWallRegenB(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_highWallRegenC(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_highWallRegenD(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_highWallRegenTime(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_lowCushionClosedAboveSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_lowCushionClosedBelowSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_lowCushionClosedOnRegen(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_lowCushionClosedWhenWallDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_lowCushionDeployedInSpread(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_lowCushionNotDeployedWhenWallDown(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_lowCushionPurchasesReduceCapacity(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_lowWallBreaksAtThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_lowWallRegenA(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_lowWallRegenB(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_lowWallRegenC(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_lowWallRegenD(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_lowWallRegenTime(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_nonGuardianCannotCall(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_nonPolicyCannotSetConfig(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_onlyHeartCanOperate(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_regenerate(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setBondContracts(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setCushionFactor(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setCushionParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setRegenParams(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setReserveFactor(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setSpreads(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_setThresholdFactor(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_swapHighWall(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_swapLowWall(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_swapRevertsOnSlippage(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_swapRevertsWithInvalidToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_updateRange(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_viewFullCapacity(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testCorrectness_viewGetAmountOut(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    test_marketClosesAsExpected1(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    test_marketClosesAsExpected2(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
