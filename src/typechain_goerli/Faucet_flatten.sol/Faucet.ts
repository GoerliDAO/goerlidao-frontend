/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";

export interface FaucetInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "drip(uint8)": FunctionFragment;
    "dripAmount(uint8)": FunctionFragment;
    "dripInterval()": FunctionFragment;
    "dripTestAmounts()": FunctionFragment;
    "lastDrip(address,uint8)": FunctionFragment;
    "setDripAmount(uint8,uint256)": FunctionFragment;
    "setDripInterval(uint256)": FunctionFragment;
    "token(uint8)": FunctionFragment;
    "withdrawAll(address,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "drip"
      | "dripAmount"
      | "dripInterval"
      | "dripTestAmounts"
      | "lastDrip"
      | "setDripAmount"
      | "setDripInterval"
      | "token"
      | "withdrawAll",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "drip", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "dripAmount", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "dripInterval", values?: undefined): string;
  encodeFunctionData(functionFragment: "dripTestAmounts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastDrip",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "setDripAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "setDripInterval", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "token", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dripAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dripInterval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dripTestAmounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastDrip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDripAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDripInterval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawAll", data: BytesLike): Result;

  events: {
    "Drip(address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Drip"): EventFragment;
}

export interface DripEventObject {
  receiver: string;
  asset: number;
  amount: BigNumber;
}
export type DripEvent = TypedEvent<[string, number, BigNumber], DripEventObject>;

export type DripEventFilter = TypedEventFilter<DripEvent>;

export interface Faucet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FaucetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    drip(
      asset_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    dripAmount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    dripInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    dripTestAmounts(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    lastDrip(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    setDripAmount(
      asset_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDripInterval(
      interval_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    token(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    withdrawAll(
      to_: PromiseOrValue<string>,
      asset_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  drip(
    asset_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  dripAmount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  dripInterval(overrides?: CallOverrides): Promise<BigNumber>;

  dripTestAmounts(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  lastDrip(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  setDripAmount(
    asset_: PromiseOrValue<BigNumberish>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDripInterval(
    interval_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  token(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  withdrawAll(
    to_: PromiseOrValue<string>,
    asset_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    drip(asset_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    dripAmount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    dripInterval(overrides?: CallOverrides): Promise<BigNumber>;

    dripTestAmounts(overrides?: CallOverrides): Promise<void>;

    lastDrip(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setDripAmount(
      asset_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDripInterval(interval_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    token(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    withdrawAll(
      to_: PromiseOrValue<string>,
      asset_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    "Drip(address,uint8,uint256)"(receiver?: null, asset?: null, amount?: null): DripEventFilter;
    Drip(receiver?: null, asset?: null, amount?: null): DripEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    drip(
      asset_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    dripAmount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    dripInterval(overrides?: CallOverrides): Promise<BigNumber>;

    dripTestAmounts(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    lastDrip(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setDripAmount(
      asset_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDripInterval(
      interval_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    token(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAll(
      to_: PromiseOrValue<string>,
      asset_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drip(
      asset_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    dripAmount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dripInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dripTestAmounts(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    lastDrip(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setDripAmount(
      asset_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDripInterval(
      interval_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    token(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAll(
      to_: PromiseOrValue<string>,
      asset_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
