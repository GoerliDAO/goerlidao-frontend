/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export interface BondFixedTermSDAInterface extends utils.Interface {
  functions: {
    "adjustments(uint256)": FunctionFragment;
    "allowNewMarkets()": FunctionFragment;
    "authority()": FunctionFragment;
    "callbackAuthorized(address)": FunctionFragment;
    "closeMarket(uint256)": FunctionFragment;
    "createMarket(bytes)": FunctionFragment;
    "currentCapacity(uint256)": FunctionFragment;
    "currentControlVariable(uint256)": FunctionFragment;
    "currentDebt(uint256)": FunctionFragment;
    "defaultTuneAdjustment()": FunctionFragment;
    "defaultTuneInterval()": FunctionFragment;
    "getAggregator()": FunctionFragment;
    "getMarketInfoForPurchase(uint256)": FunctionFragment;
    "getTeller()": FunctionFragment;
    "isInstantSwap(uint256)": FunctionFragment;
    "isLive(uint256)": FunctionFragment;
    "marketPrice(uint256)": FunctionFragment;
    "marketScale(uint256)": FunctionFragment;
    "markets(uint256)": FunctionFragment;
    "maxAmountAccepted(uint256,address)": FunctionFragment;
    "metadata(uint256)": FunctionFragment;
    "minDebtBuffer()": FunctionFragment;
    "minDebtDecayInterval()": FunctionFragment;
    "minDepositInterval()": FunctionFragment;
    "minMarketDuration()": FunctionFragment;
    "newOwners(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "payoutFor(uint256,uint256,address)": FunctionFragment;
    "pullOwnership(uint256)": FunctionFragment;
    "purchaseBond(uint256,uint256,uint256)": FunctionFragment;
    "pushOwnership(uint256,address)": FunctionFragment;
    "setAllowNewMarkets(bool)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setCallbackAuthStatus(address,bool)": FunctionFragment;
    "setDefaults(uint32[6])": FunctionFragment;
    "setIntervals(uint256,uint32[3])": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "terms(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjustments"
      | "allowNewMarkets"
      | "authority"
      | "callbackAuthorized"
      | "closeMarket"
      | "createMarket"
      | "currentCapacity"
      | "currentControlVariable"
      | "currentDebt"
      | "defaultTuneAdjustment"
      | "defaultTuneInterval"
      | "getAggregator"
      | "getMarketInfoForPurchase"
      | "getTeller"
      | "isInstantSwap"
      | "isLive"
      | "marketPrice"
      | "marketScale"
      | "markets"
      | "maxAmountAccepted"
      | "metadata"
      | "minDebtBuffer"
      | "minDebtDecayInterval"
      | "minDepositInterval"
      | "minMarketDuration"
      | "newOwners"
      | "owner"
      | "ownerOf"
      | "payoutFor"
      | "pullOwnership"
      | "purchaseBond"
      | "pushOwnership"
      | "setAllowNewMarkets"
      | "setAuthority"
      | "setCallbackAuthStatus"
      | "setDefaults"
      | "setIntervals"
      | "setOwner"
      | "terms",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "adjustments", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "allowNewMarkets", values?: undefined): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "callbackAuthorized", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "closeMarket", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "createMarket", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: "currentCapacity", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "currentControlVariable", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "currentDebt", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "defaultTuneAdjustment", values?: undefined): string;
  encodeFunctionData(functionFragment: "defaultTuneInterval", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAggregator", values?: undefined): string;
  encodeFunctionData(functionFragment: "getMarketInfoForPurchase", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getTeller", values?: undefined): string;
  encodeFunctionData(functionFragment: "isInstantSwap", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "isLive", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "marketPrice", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "marketScale", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "markets", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "maxAmountAccepted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "metadata", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "minDebtBuffer", values?: undefined): string;
  encodeFunctionData(functionFragment: "minDebtDecayInterval", values?: undefined): string;
  encodeFunctionData(functionFragment: "minDepositInterval", values?: undefined): string;
  encodeFunctionData(functionFragment: "minMarketDuration", values?: undefined): string;
  encodeFunctionData(functionFragment: "newOwners", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerOf", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "payoutFor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "pullOwnership", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "purchaseBond",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "pushOwnership",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "setAllowNewMarkets", values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: "setAuthority", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "setCallbackAuthStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: "setDefaults", values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(
    functionFragment: "setIntervals",
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    ],
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "terms", values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: "adjustments", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowNewMarkets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callbackAuthorized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currentCapacity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currentControlVariable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currentDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "defaultTuneAdjustment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "defaultTuneInterval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAggregator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMarketInfoForPurchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTeller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInstantSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketScale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxAmountAccepted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minDebtBuffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minDebtDecayInterval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minDepositInterval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minMarketDuration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newOwners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pullOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchaseBond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAllowNewMarkets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAuthority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCallbackAuthStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDefaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setIntervals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "terms", data: BytesLike): Result;

  events: {
    "AuthorityUpdated(address,address)": EventFragment;
    "DefaultsUpdated(uint32,uint32,uint32,uint32,uint32,uint32)": EventFragment;
    "MarketClosed(uint256)": EventFragment;
    "MarketCreated(uint256,address,address,uint48,uint256)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
    "Tuned(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Tuned"): EventFragment;
}

export interface AuthorityUpdatedEventObject {
  user: string;
  newAuthority: string;
}
export type AuthorityUpdatedEvent = TypedEvent<[string, string], AuthorityUpdatedEventObject>;

export type AuthorityUpdatedEventFilter = TypedEventFilter<AuthorityUpdatedEvent>;

export interface DefaultsUpdatedEventObject {
  defaultTuneInterval: number;
  defaultTuneAdjustment: number;
  minDebtDecayInterval: number;
  minDepositInterval: number;
  minMarketDuration: number;
  minDebtBuffer: number;
}
export type DefaultsUpdatedEvent = TypedEvent<
  [number, number, number, number, number, number],
  DefaultsUpdatedEventObject
>;

export type DefaultsUpdatedEventFilter = TypedEventFilter<DefaultsUpdatedEvent>;

export interface MarketClosedEventObject {
  id: BigNumber;
}
export type MarketClosedEvent = TypedEvent<[BigNumber], MarketClosedEventObject>;

export type MarketClosedEventFilter = TypedEventFilter<MarketClosedEvent>;

export interface MarketCreatedEventObject {
  id: BigNumber;
  payoutToken: string;
  quoteToken: string;
  vesting: number;
  initialPrice: BigNumber;
}
export type MarketCreatedEvent = TypedEvent<[BigNumber, string, string, number, BigNumber], MarketCreatedEventObject>;

export type MarketCreatedEventFilter = TypedEventFilter<MarketCreatedEvent>;

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<[string, string], OwnerUpdatedEventObject>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface TunedEventObject {
  id: BigNumber;
  oldControlVariable: BigNumber;
  newControlVariable: BigNumber;
}
export type TunedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], TunedEventObject>;

export type TunedEventFilter = TypedEventFilter<TunedEvent>;

export interface BondFixedTermSDA extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BondFixedTermSDAInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, number, number, boolean] & {
        change: BigNumber;
        lastAdjustment: number;
        timeToAdjusted: number;
        active: boolean;
      }
    >;

    allowNewMarkets(overrides?: CallOverrides): Promise<[boolean]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    callbackAuthorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    closeMarket(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createMarket(
      params_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    currentControlVariable(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    currentDebt(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultTuneAdjustment(overrides?: CallOverrides): Promise<[number]>;

    defaultTuneInterval(overrides?: CallOverrides): Promise<[number]>;

    getAggregator(overrides?: CallOverrides): Promise<[string]>;

    getMarketInfoForPurchase(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string, number, BigNumber] & {
        owner: string;
        callbackAddr: string;
        payoutToken: string;
        quoteToken: string;
        vesting: number;
        maxPayout: BigNumber;
      }
    >;

    getTeller(overrides?: CallOverrides): Promise<[string]>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    markets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        owner: string;
        payoutToken: string;
        quoteToken: string;
        callbackAddr: string;
        capacityInQuote: boolean;
        capacity: BigNumber;
        totalDebt: BigNumber;
        minPrice: BigNumber;
        maxPayout: BigNumber;
        sold: BigNumber;
        purchased: BigNumber;
        scale: BigNumber;
      }
    >;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    metadata(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, number, number, number, number, number, BigNumber, BigNumber, BigNumber] & {
        lastTune: number;
        lastDecay: number;
        length: number;
        depositInterval: number;
        tuneInterval: number;
        tuneAdjustmentDelay: number;
        debtDecayInterval: number;
        tuneIntervalCapacity: BigNumber;
        tuneBelowCapacity: BigNumber;
        lastTuneDebt: BigNumber;
      }
    >;

    minDebtBuffer(overrides?: CallOverrides): Promise<[number]>;

    minDebtDecayInterval(overrides?: CallOverrides): Promise<[number]>;

    minDepositInterval(overrides?: CallOverrides): Promise<[number]>;

    minMarketDuration(overrides?: CallOverrides): Promise<[number]>;

    newOwners(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    pullOwnership(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    purchaseBond(
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pushOwnership(
      id_: PromiseOrValue<BigNumberish>,
      newOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAllowNewMarkets(
      status_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCallbackAuthStatus(
      creator_: PromiseOrValue<string>,
      status_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDefaults(
      defaults_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setIntervals(
      id_: PromiseOrValue<BigNumberish>,
      intervals_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    terms(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        controlVariable: BigNumber;
        maxDebt: BigNumber;
        vesting: number;
        conclusion: number;
      }
    >;
  };

  adjustments(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, number, number, boolean] & {
      change: BigNumber;
      lastAdjustment: number;
      timeToAdjusted: number;
      active: boolean;
    }
  >;

  allowNewMarkets(overrides?: CallOverrides): Promise<boolean>;

  authority(overrides?: CallOverrides): Promise<string>;

  callbackAuthorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  closeMarket(
    id_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createMarket(
    params_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  currentControlVariable(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  currentDebt(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  defaultTuneAdjustment(overrides?: CallOverrides): Promise<number>;

  defaultTuneInterval(overrides?: CallOverrides): Promise<number>;

  getAggregator(overrides?: CallOverrides): Promise<string>;

  getMarketInfoForPurchase(
    id_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, string, number, BigNumber] & {
      owner: string;
      callbackAddr: string;
      payoutToken: string;
      quoteToken: string;
      vesting: number;
      maxPayout: BigNumber;
    }
  >;

  getTeller(overrides?: CallOverrides): Promise<string>;

  isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  markets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [
      string,
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
    ] & {
      owner: string;
      payoutToken: string;
      quoteToken: string;
      callbackAddr: string;
      capacityInQuote: boolean;
      capacity: BigNumber;
      totalDebt: BigNumber;
      minPrice: BigNumber;
      maxPayout: BigNumber;
      sold: BigNumber;
      purchased: BigNumber;
      scale: BigNumber;
    }
  >;

  maxAmountAccepted(
    id_: PromiseOrValue<BigNumberish>,
    referrer_: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  metadata(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [number, number, number, number, number, number, number, BigNumber, BigNumber, BigNumber] & {
      lastTune: number;
      lastDecay: number;
      length: number;
      depositInterval: number;
      tuneInterval: number;
      tuneAdjustmentDelay: number;
      debtDecayInterval: number;
      tuneIntervalCapacity: BigNumber;
      tuneBelowCapacity: BigNumber;
      lastTuneDebt: BigNumber;
    }
  >;

  minDebtBuffer(overrides?: CallOverrides): Promise<number>;

  minDebtDecayInterval(overrides?: CallOverrides): Promise<number>;

  minDepositInterval(overrides?: CallOverrides): Promise<number>;

  minMarketDuration(overrides?: CallOverrides): Promise<number>;

  newOwners(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  payoutFor(
    amount_: PromiseOrValue<BigNumberish>,
    id_: PromiseOrValue<BigNumberish>,
    referrer_: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  pullOwnership(
    id_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  purchaseBond(
    id_: PromiseOrValue<BigNumberish>,
    amount_: PromiseOrValue<BigNumberish>,
    minAmountOut_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pushOwnership(
    id_: PromiseOrValue<BigNumberish>,
    newOwner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAllowNewMarkets(
    status_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAuthority(
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCallbackAuthStatus(
    creator_: PromiseOrValue<string>,
    status_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDefaults(
    defaults_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setIntervals(
    id_: PromiseOrValue<BigNumberish>,
    intervals_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  terms(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, number, number] & {
      controlVariable: BigNumber;
      maxDebt: BigNumber;
      vesting: number;
      conclusion: number;
    }
  >;

  callStatic: {
    adjustments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, number, number, boolean] & {
        change: BigNumber;
        lastAdjustment: number;
        timeToAdjusted: number;
        active: boolean;
      }
    >;

    allowNewMarkets(overrides?: CallOverrides): Promise<boolean>;

    authority(overrides?: CallOverrides): Promise<string>;

    callbackAuthorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    closeMarket(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    createMarket(params_: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    currentControlVariable(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    currentDebt(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    defaultTuneAdjustment(overrides?: CallOverrides): Promise<number>;

    defaultTuneInterval(overrides?: CallOverrides): Promise<number>;

    getAggregator(overrides?: CallOverrides): Promise<string>;

    getMarketInfoForPurchase(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string, number, BigNumber] & {
        owner: string;
        callbackAddr: string;
        payoutToken: string;
        quoteToken: string;
        vesting: number;
        maxPayout: BigNumber;
      }
    >;

    getTeller(overrides?: CallOverrides): Promise<string>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    markets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        owner: string;
        payoutToken: string;
        quoteToken: string;
        callbackAddr: string;
        capacityInQuote: boolean;
        capacity: BigNumber;
        totalDebt: BigNumber;
        minPrice: BigNumber;
        maxPayout: BigNumber;
        sold: BigNumber;
        purchased: BigNumber;
        scale: BigNumber;
      }
    >;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    metadata(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, number, number, number, number, number, BigNumber, BigNumber, BigNumber] & {
        lastTune: number;
        lastDecay: number;
        length: number;
        depositInterval: number;
        tuneInterval: number;
        tuneAdjustmentDelay: number;
        debtDecayInterval: number;
        tuneIntervalCapacity: BigNumber;
        tuneBelowCapacity: BigNumber;
        lastTuneDebt: BigNumber;
      }
    >;

    minDebtBuffer(overrides?: CallOverrides): Promise<number>;

    minDebtDecayInterval(overrides?: CallOverrides): Promise<number>;

    minDepositInterval(overrides?: CallOverrides): Promise<number>;

    minMarketDuration(overrides?: CallOverrides): Promise<number>;

    newOwners(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pullOwnership(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    purchaseBond(
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pushOwnership(
      id_: PromiseOrValue<BigNumberish>,
      newOwner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAllowNewMarkets(status_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setAuthority(newAuthority: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setCallbackAuthStatus(
      creator_: PromiseOrValue<string>,
      status_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDefaults(defaults_: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    setIntervals(
      id_: PromiseOrValue<BigNumberish>,
      intervals_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<void>;

    setOwner(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    terms(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        controlVariable: BigNumber;
        maxDebt: BigNumber;
        vesting: number;
        conclusion: number;
      }
    >;
  };

  filters: {
    "AuthorityUpdated(address,address)"(
      user?: PromiseOrValue<string> | null,
      newAuthority?: PromiseOrValue<string> | null,
    ): AuthorityUpdatedEventFilter;
    AuthorityUpdated(
      user?: PromiseOrValue<string> | null,
      newAuthority?: PromiseOrValue<string> | null,
    ): AuthorityUpdatedEventFilter;

    "DefaultsUpdated(uint32,uint32,uint32,uint32,uint32,uint32)"(
      defaultTuneInterval?: null,
      defaultTuneAdjustment?: null,
      minDebtDecayInterval?: null,
      minDepositInterval?: null,
      minMarketDuration?: null,
      minDebtBuffer?: null,
    ): DefaultsUpdatedEventFilter;
    DefaultsUpdated(
      defaultTuneInterval?: null,
      defaultTuneAdjustment?: null,
      minDebtDecayInterval?: null,
      minDepositInterval?: null,
      minMarketDuration?: null,
      minDebtBuffer?: null,
    ): DefaultsUpdatedEventFilter;

    "MarketClosed(uint256)"(id?: PromiseOrValue<BigNumberish> | null): MarketClosedEventFilter;
    MarketClosed(id?: PromiseOrValue<BigNumberish> | null): MarketClosedEventFilter;

    "MarketCreated(uint256,address,address,uint48,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      payoutToken?: PromiseOrValue<string> | null,
      quoteToken?: PromiseOrValue<string> | null,
      vesting?: null,
      initialPrice?: null,
    ): MarketCreatedEventFilter;
    MarketCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      payoutToken?: PromiseOrValue<string> | null,
      quoteToken?: PromiseOrValue<string> | null,
      vesting?: null,
      initialPrice?: null,
    ): MarketCreatedEventFilter;

    "OwnerUpdated(address,address)"(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnerUpdatedEventFilter;

    "Tuned(uint256,uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      oldControlVariable?: null,
      newControlVariable?: null,
    ): TunedEventFilter;
    Tuned(
      id?: PromiseOrValue<BigNumberish> | null,
      oldControlVariable?: null,
      newControlVariable?: null,
    ): TunedEventFilter;
  };

  estimateGas: {
    adjustments(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    allowNewMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    callbackAuthorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    closeMarket(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createMarket(
      params_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    currentControlVariable(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    currentDebt(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    defaultTuneAdjustment(overrides?: CallOverrides): Promise<BigNumber>;

    defaultTuneInterval(overrides?: CallOverrides): Promise<BigNumber>;

    getAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketInfoForPurchase(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTeller(overrides?: CallOverrides): Promise<BigNumber>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    markets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    metadata(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    minDebtBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    minDebtDecayInterval(overrides?: CallOverrides): Promise<BigNumber>;

    minDepositInterval(overrides?: CallOverrides): Promise<BigNumber>;

    minMarketDuration(overrides?: CallOverrides): Promise<BigNumber>;

    newOwners(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pullOwnership(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    purchaseBond(
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pushOwnership(
      id_: PromiseOrValue<BigNumberish>,
      newOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAllowNewMarkets(
      status_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCallbackAuthStatus(
      creator_: PromiseOrValue<string>,
      status_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDefaults(
      defaults_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setIntervals(
      id_: PromiseOrValue<BigNumberish>,
      intervals_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    terms(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustments(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowNewMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callbackAuthorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeMarket(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createMarket(
      params_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    currentCapacity(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentControlVariable(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentDebt(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultTuneAdjustment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultTuneInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketInfoForPurchase(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTeller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInstantSwap(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLive(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketPrice(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketScale(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAmountAccepted(
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    metadata(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDebtBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDebtDecayInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDepositInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minMarketDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newOwners(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(id_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payoutFor(
      amount_: PromiseOrValue<BigNumberish>,
      id_: PromiseOrValue<BigNumberish>,
      referrer_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pullOwnership(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    purchaseBond(
      id_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      minAmountOut_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pushOwnership(
      id_: PromiseOrValue<BigNumberish>,
      newOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAllowNewMarkets(
      status_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCallbackAuthStatus(
      creator_: PromiseOrValue<string>,
      status_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDefaults(
      defaults_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setIntervals(
      id_: PromiseOrValue<BigNumberish>,
      intervals_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    terms(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
