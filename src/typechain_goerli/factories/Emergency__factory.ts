/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Emergency, EmergencyInterface } from "../Emergency";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Kernel",
        name: "kernel_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller_",
        type: "address",
      },
    ],
    name: "KernelAdapter_OnlyKernel",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Keycode",
        name: "keycode_",
        type: "bytes5",
      },
    ],
    name: "Policy_ModuleDoesNotExist",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "treasury_",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "minter_",
        type: "bool",
      },
    ],
    name: "Status",
    type: "event",
  },
  {
    inputs: [],
    name: "MINTR",
    outputs: [
      {
        internalType: "contract MINTRv1",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROLES",
    outputs: [
      {
        internalType: "contract ROLESv1",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TRSRY",
    outputs: [
      {
        internalType: "contract TRSRYv1",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract Kernel",
        name: "newKernel_",
        type: "address",
      },
    ],
    name: "changeKernel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "configureDependencies",
    outputs: [
      {
        internalType: "Keycode[]",
        name: "dependencies",
        type: "bytes5[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kernel",
    outputs: [
      {
        internalType: "contract Kernel",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "requestPermissions",
    outputs: [
      {
        components: [
          {
            internalType: "Keycode",
            name: "keycode",
            type: "bytes5",
          },
          {
            internalType: "bytes4",
            name: "funcSelector",
            type: "bytes4",
          },
        ],
        internalType: "struct Permissions[]",
        name: "requests",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "restart",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "restartMinting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "restartWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shutdown",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shutdownMinting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shutdownWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161150e38038061150e83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61147b806100936000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806380cee4ab1161008c578063c12954fa11610066578063c12954fa146101e8578063d4aae0c4146101f0578063ec3984f614610210578063fc0e74d11461021857600080fd5b806380cee4ab14610193578063923cb952146101b35780639459b875146101d357600080fd5b80634657b36c116100c85780634657b36c1461011e5780634674546814610131578063577de7d0146101395780635924be701461017e57600080fd5b806301ffa059146100ef5780631ef3755d146100f957806322f3e2d414610101575b600080fd5b6100f7610220565b005b6100f7610357565b6101096104ed565b60405190151581526020015b60405180910390f35b6100f761012c366004611278565b610585565b6100f7610624565b6003546101599073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610115565b610186610738565b604051610115919061129c565b6002546101599073ffffffffffffffffffffffffffffffffffffffff1681565b6001546101599073ffffffffffffffffffffffffffffffffffffffff1681565b6101db610a81565b604051610115919061132f565b6100f7610d0e565b6000546101599073ffffffffffffffffffffffffffffffffffffffff1681565b6100f7610da0565b6100f7610eb4565b6001546040517fd09a20c50000000000000000000000000000000000000000000000000000000081527f656d657267656e63795f72657374617274000000000000000000000000000000600482018190523360248301529173ffffffffffffffffffffffffffffffffffffffff169063d09a20c590604401600060405180830381600087803b1580156102b257600080fd5b505af11580156102c6573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f15f4c06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561033457600080fd5b505af1158015610348573d6000803e3d6000fd5b50505050610354610fc8565b50565b6001546040517fd09a20c50000000000000000000000000000000000000000000000000000000081527f656d657267656e63795f72657374617274000000000000000000000000000000600482018190523360248301529173ffffffffffffffffffffffffffffffffffffffff169063d09a20c590604401600060405180830381600087803b1580156103e957600080fd5b505af11580156103fd573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f15f4c06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561046b57600080fd5b505af115801561047f573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f15f4c06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561033457600080fd5b600080546040517fe52223bb00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063e52223bb90602401602060405180830381865afa15801561055c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105809190611395565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105dd576040517f14fa403c0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6001546040517fd09a20c50000000000000000000000000000000000000000000000000000000081527f656d657267656e63795f73687574646f776e0000000000000000000000000000600482018190523360248301529173ffffffffffffffffffffffffffffffffffffffff169063d09a20c590604401600060405180830381600087803b1580156106b657600080fd5b505af11580156106ca573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351b42b006040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561033457600080fd5b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ae7ec2e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cd91906113b7565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ae7ec2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561083e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086291906113b7565b60408051600480825260a08201909252919250816020015b604080518082019091526000808252602082015281526020019060019003908161087a575050604080518082019091527fffffffffff000000000000000000000000000000000000000000000000000000841681527f51b42b00000000000000000000000000000000000000000000000000000000006020820152815191945090849060009061090c5761090c6113f9565b60200260200101819052506040518060400160405280837affffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001630f15f4c060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525083600181518110610983576109836113f9565b60200260200101819052506040518060400160405280827affffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016351b42b0060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250836002815181106109fa576109fa6113f9565b60200260200101819052506040518060400160405280827affffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001630f15f4c060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525083600381518110610a7157610a716113f9565b6020026020010181905250505090565b604080516003808252608082019092526060916020820183803683370190505090507f545253525900000000000000000000000000000000000000000000000000000081600081518110610ad757610ad76113f9565b7fffffffffff00000000000000000000000000000000000000000000000000000090921660209283029190910190910152610b2f7f4d494e545200000000000000000000000000000000000000000000000000000090565b81600181518110610b4257610b426113f9565b7fffffffffff00000000000000000000000000000000000000000000000000000090921660209283029190910190910152610b9a7f524f4c455300000000000000000000000000000000000000000000000000000090565b81600281518110610bad57610bad6113f9565b60200260200101907affffffffffffffffffffffffffffffffffffffffffffffffffffff191690817affffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050610c1a81600081518110610c0d57610c0d6113f9565b6020026020010151611128565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c7081600181518110610c0d57610c0d6113f9565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610cc681600281518110610c0d57610c0d6113f9565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905590565b6001546040517fd09a20c50000000000000000000000000000000000000000000000000000000081527f656d657267656e63795f72657374617274000000000000000000000000000000600482018190523360248301529173ffffffffffffffffffffffffffffffffffffffff169063d09a20c590604401600060405180830381600087803b15801561046b57600080fd5b6001546040517fd09a20c50000000000000000000000000000000000000000000000000000000081527f656d657267656e63795f73687574646f776e0000000000000000000000000000600482018190523360248301529173ffffffffffffffffffffffffffffffffffffffff169063d09a20c590604401600060405180830381600087803b158015610e3257600080fd5b505af1158015610e46573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351b42b006040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561033457600080fd5b6001546040517fd09a20c50000000000000000000000000000000000000000000000000000000081527f656d657267656e63795f73687574646f776e0000000000000000000000000000600482018190523360248301529173ffffffffffffffffffffffffffffffffffffffff169063d09a20c590604401600060405180830381600087803b158015610f4657600080fd5b505af1158015610f5a573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351b42b006040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106b657600080fd5b600254604080517f02fb0c5e00000000000000000000000000000000000000000000000000000000815290517f4e3bf9f8dfd7253fb755f99807f80c9c14d9ed0a71f36ede9c8e11606996c4799273ffffffffffffffffffffffffffffffffffffffff16916302fb0c5e9160048083019260209291908290030181865afa158015611057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107b9190611395565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302fb0c5e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c9190611395565b60408051921515835290151560208301520160405180910390a1565b600080546040517fb4dc00b40000000000000000000000000000000000000000000000000000000081527fffffffffff00000000000000000000000000000000000000000000000000000084166004820152829173ffffffffffffffffffffffffffffffffffffffff169063b4dc00b490602401602060405180830381865afa1580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd9190611428565b905073ffffffffffffffffffffffffffffffffffffffff8116611250576040517f5c3fa9cd0000000000000000000000000000000000000000000000000000000081527fffffffffff000000000000000000000000000000000000000000000000000000841660048201526024016105d4565b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461035457600080fd5b60006020828403121561128a57600080fd5b813561129581611256565b9392505050565b602080825282518282018190526000919060409081850190868401855b8281101561132257815180517fffffffffff0000000000000000000000000000000000000000000000000000001685528601517fffffffff00000000000000000000000000000000000000000000000000000000168685015292840192908501906001016112b9565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156113895783517fffffffffff000000000000000000000000000000000000000000000000000000168352928401929184019160010161134b565b50909695505050505050565b6000602082840312156113a757600080fd5b8151801515811461129557600080fd5b6000602082840312156113c957600080fd5b81517fffffffffff0000000000000000000000000000000000000000000000000000008116811461129557600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561143a57600080fd5b81516112958161125656fea2646970667358221220ad0382473fd6854aee42693a53434a3e790ca7526629994a6fc4dbefa02e978864736f6c634300080f0033";

type EmergencyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: EmergencyConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class Emergency__factory extends ContractFactory {
  constructor(...args: EmergencyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    kernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<Emergency> {
    return super.deploy(kernel_, overrides || {}) as Promise<Emergency>;
  }
  override getDeployTransaction(
    kernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(kernel_, overrides || {});
  }
  override attach(address: string): Emergency {
    return super.attach(address) as Emergency;
  }
  override connect(signer: Signer): Emergency__factory {
    return super.connect(signer) as Emergency__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EmergencyInterface {
    return new utils.Interface(_abi) as EmergencyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Emergency {
    return new Contract(address, _abi, signerOrProvider) as Emergency;
  }
}
