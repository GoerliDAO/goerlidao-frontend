/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { DeployMockTests, DeployMockTestsInterface } from "../../DeployMockTests.s.sol/DeployMockTests";

const _abi = [
  {
    inputs: [],
    name: "IS_SCRIPT",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "run",
    outputs: [
      {
        internalType: "contract MockPolicy",
        name: "test_mocks",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vm",
    outputs: [
      {
        internalType: "contract Vm",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805460ff1916600117905534801561001d57600080fd5b50610de58061002d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633a76846314610046578063c04062261461008b578063f8ccbf4714610093575b600080fd5b610061737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100616100b0565b6000546100a09060ff1681565b6040519015158152602001610082565b6040517fc1978d1f00000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4b45524e454c5f5052495600000000000000000000000000000000000000000060448201526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f906064016020604051808303816000875af115801561014d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610171919061039d565b6040517fce817d4700000000000000000000000000000000000000000000000000000000815260048101829052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d4790602401600060405180830381600087803b1580156101da57600080fd5b505af11580156101ee573d6000803e3d6000fd5b50506040517f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f5345504f4c49415f4b45524e454c000000000000000000000000000000000000604482015260009250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063350d56bf906064016020604051808303816000875af115801561028d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b191906103b6565b90506000819050806040516102c590610390565b73ffffffffffffffffffffffffffffffffffffffff9091168152602001604051809103906000f0801580156102fe573d6000803e3d6000fd5b5093507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c60601b60601c73ffffffffffffffffffffffffffffffffffffffff166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561037257600080fd5b505af1158015610386573d6000803e3d6000fd5b5050505050505090565b6109bc806103f483390190565b6000602082840312156103af57600080fd5b5051919050565b6000602082840312156103c857600080fd5b815173ffffffffffffffffffffffffffffffffffffffff811681146103ec57600080fd5b939250505056fe608060405234801561001057600080fd5b506040516109bc3803806109bc83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610929806100936000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635924be701161005b5780635924be70146100cf5780639459b875146100e4578063d4aae0c4146100f9578063fd37d9631461013e57600080fd5b8063098da0731461008d57806322f3e2d414610097578063340bd7fd146100b45780634657b36c146100bc575b600080fd5b61009561015e565b005b61009f6101e2565b60405190151581526020015b60405180910390f35b61009561027a565b6100956100ca366004610726565b6102e4565b6100d7610383565b6040516100ab919061074a565b6100ec6104c8565b6040516100ab91906107dd565b6000546101199073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ab565b6001546101199073ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a7167caf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101c857600080fd5b505af11580156101dc573d6000803e3d6000fd5b50505050565b600080546040517fe52223bb00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063e52223bb90602401602060405180830381865afa158015610251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102759190610843565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663382b325f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101c857600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff16331461033c576040517f14fa403c0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604080516001808252818301909252606091816020015b604080518082019091526000808252602082015281526020019060019003908161039a575050604080518082018083526001547f1ae7ec2e00000000000000000000000000000000000000000000000000000000909152915192935091829173ffffffffffffffffffffffffffffffffffffffff1690631ae7ec2e906044808501916020918187030181865afa158015610438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045c9190610865565b7fffffffffff0000000000000000000000000000000000000000000000000000001681527fa7167caf00000000000000000000000000000000000000000000000000000000602090910152815182906000906104ba576104ba6108a7565b602002602001018190525090565b604080516001808252818301909252606091602080830190803683370190505090507f4d4f434b590000000000000000000000000000000000000000000000000000008160008151811061051e5761051e6108a7565b60200260200101907affffffffffffffffffffffffffffffffffffffffffffffffffffff191690817affffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505061058b8160008151811061057e5761057e6108a7565b60200260200101516105d3565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905590565b600080546040517fb4dc00b40000000000000000000000000000000000000000000000000000000081527fffffffffff00000000000000000000000000000000000000000000000000000084166004820152829173ffffffffffffffffffffffffffffffffffffffff169063b4dc00b490602401602060405180830381865afa158015610664573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068891906108d6565b905073ffffffffffffffffffffffffffffffffffffffff81166106fb576040517f5c3fa9cd0000000000000000000000000000000000000000000000000000000081527fffffffffff00000000000000000000000000000000000000000000000000000084166004820152602401610333565b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461072357600080fd5b50565b60006020828403121561073857600080fd5b813561074381610701565b9392505050565b602080825282518282018190526000919060409081850190868401855b828110156107d057815180517fffffffffff0000000000000000000000000000000000000000000000000000001685528601517fffffffff0000000000000000000000000000000000000000000000000000000016868501529284019290850190600101610767565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156108375783517fffffffffff00000000000000000000000000000000000000000000000000000016835292840192918401916001016107f9565b50909695505050505050565b60006020828403121561085557600080fd5b8151801515811461074357600080fd5b60006020828403121561087757600080fd5b81517fffffffffff0000000000000000000000000000000000000000000000000000008116811461074357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156108e857600080fd5b81516107438161070156fea2646970667358221220db18f5e4617b4e2d2dbd9f9a08f2831549564244b4c75d73d8559831b1a068ff64736f6c634300080f0033a26469706673582212208371c3f9efbd0dabcd4da06810d53d43e47b7a5303f04261718b0e693c8e439e64736f6c634300080f0033";

type DeployMockTestsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: DeployMockTestsConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class DeployMockTests__factory extends ContractFactory {
  constructor(...args: DeployMockTestsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<DeployMockTests> {
    return super.deploy(overrides || {}) as Promise<DeployMockTests>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DeployMockTests {
    return super.attach(address) as DeployMockTests;
  }
  override connect(signer: Signer): DeployMockTests__factory {
    return super.connect(signer) as DeployMockTests__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DeployMockTestsInterface {
    return new utils.Interface(_abi) as DeployMockTestsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): DeployMockTests {
    return new Contract(address, _abi, signerOrProvider) as DeployMockTests;
  }
}
