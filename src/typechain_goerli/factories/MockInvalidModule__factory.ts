/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MockInvalidModule, MockInvalidModuleInterface } from "../MockInvalidModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Kernel",
        name: "kernel_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller_",
        type: "address",
      },
    ],
    name: "KernelAdapter_OnlyKernel",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "policy_",
        type: "address",
      },
    ],
    name: "Module_PolicyNotPermitted",
    type: "error",
  },
  {
    inputs: [],
    name: "INIT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "KEYCODE",
    outputs: [
      {
        internalType: "Keycode",
        name: "",
        type: "bytes5",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "uint8",
        name: "major",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "minor",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract Kernel",
        name: "newKernel_",
        type: "address",
      },
    ],
    name: "changeKernel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "kernel",
    outputs: [
      {
        internalType: "contract Kernel",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161030f38038061030f83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61027c806100936000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063d4aae0c411610050578063d4aae0c4146100b4578063ea643914146100f9578063ffa1ad741461010157600080fd5b80631ae7ec2e1461006c5780634657b36c1461009f575b600080fd5b6040517f696e76616c00000000000000000000000000000000000000000000000000000081526020015b60405180910390f35b6100b26100ad366004610209565b610115565b005b6000546100d49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610096565b6100b26101b4565b604080516000808252602082015201610096565b60005473ffffffffffffffffffffffffffffffffffffffff16331461016d576040517f14fa403c0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610207576040517f14fa403c000000000000000000000000000000000000000000000000000000008152336004820152602401610164565b565b60006020828403121561021b57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461023f57600080fd5b939250505056fea264697066735822122021f5996a805d6eda79c26a3b77ce8683112c0ecce69fe56fb5df93dbc32ab6d164736f6c634300080f0033";

type MockInvalidModuleConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockInvalidModuleConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MockInvalidModule__factory extends ContractFactory {
  constructor(...args: MockInvalidModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    kernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<MockInvalidModule> {
    return super.deploy(kernel_, overrides || {}) as Promise<MockInvalidModule>;
  }
  override getDeployTransaction(
    kernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(kernel_, overrides || {});
  }
  override attach(address: string): MockInvalidModule {
    return super.attach(address) as MockInvalidModule;
  }
  override connect(signer: Signer): MockInvalidModule__factory {
    return super.connect(signer) as MockInvalidModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockInvalidModuleInterface {
    return new utils.Interface(_abi) as MockInvalidModuleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockInvalidModule {
    return new Contract(address, _abi, signerOrProvider) as MockInvalidModule;
  }
}
