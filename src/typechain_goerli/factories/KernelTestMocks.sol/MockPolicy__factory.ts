/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { MockPolicy, MockPolicyInterface } from "../../KernelTestMocks.sol/MockPolicy";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Kernel",
        name: "kernel_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller_",
        type: "address",
      },
    ],
    name: "KernelAdapter_OnlyKernel",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Keycode",
        name: "keycode_",
        type: "bytes5",
      },
    ],
    name: "Policy_ModuleDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "MOCKY",
    outputs: [
      {
        internalType: "contract MockModule",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "callPermissionedFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "callPublicFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract Kernel",
        name: "newKernel_",
        type: "address",
      },
    ],
    name: "changeKernel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "configureDependencies",
    outputs: [
      {
        internalType: "Keycode[]",
        name: "dependencies",
        type: "bytes5[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kernel",
    outputs: [
      {
        internalType: "contract Kernel",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "requestPermissions",
    outputs: [
      {
        components: [
          {
            internalType: "Keycode",
            name: "keycode",
            type: "bytes5",
          },
          {
            internalType: "bytes4",
            name: "funcSelector",
            type: "bytes4",
          },
        ],
        internalType: "struct Permissions[]",
        name: "requests",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109bc3803806109bc83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610929806100936000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635924be701161005b5780635924be70146100cf5780639459b875146100e4578063d4aae0c4146100f9578063fd37d9631461013e57600080fd5b8063098da0731461008d57806322f3e2d414610097578063340bd7fd146100b45780634657b36c146100bc575b600080fd5b61009561015e565b005b61009f6101e2565b60405190151581526020015b60405180910390f35b61009561027a565b6100956100ca366004610726565b6102e4565b6100d7610383565b6040516100ab919061074a565b6100ec6104c8565b6040516100ab91906107dd565b6000546101199073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ab565b6001546101199073ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a7167caf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101c857600080fd5b505af11580156101dc573d6000803e3d6000fd5b50505050565b600080546040517fe52223bb00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063e52223bb90602401602060405180830381865afa158015610251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102759190610843565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663382b325f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101c857600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff16331461033c576040517f14fa403c0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604080516001808252818301909252606091816020015b604080518082019091526000808252602082015281526020019060019003908161039a575050604080518082018083526001547f1ae7ec2e00000000000000000000000000000000000000000000000000000000909152915192935091829173ffffffffffffffffffffffffffffffffffffffff1690631ae7ec2e906044808501916020918187030181865afa158015610438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045c9190610865565b7fffffffffff0000000000000000000000000000000000000000000000000000001681527fa7167caf00000000000000000000000000000000000000000000000000000000602090910152815182906000906104ba576104ba6108a7565b602002602001018190525090565b604080516001808252818301909252606091602080830190803683370190505090507f4d4f434b590000000000000000000000000000000000000000000000000000008160008151811061051e5761051e6108a7565b60200260200101907affffffffffffffffffffffffffffffffffffffffffffffffffffff191690817affffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505061058b8160008151811061057e5761057e6108a7565b60200260200101516105d3565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905590565b600080546040517fb4dc00b40000000000000000000000000000000000000000000000000000000081527fffffffffff00000000000000000000000000000000000000000000000000000084166004820152829173ffffffffffffffffffffffffffffffffffffffff169063b4dc00b490602401602060405180830381865afa158015610664573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068891906108d6565b905073ffffffffffffffffffffffffffffffffffffffff81166106fb576040517f5c3fa9cd0000000000000000000000000000000000000000000000000000000081527fffffffffff00000000000000000000000000000000000000000000000000000084166004820152602401610333565b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461072357600080fd5b50565b60006020828403121561073857600080fd5b813561074381610701565b9392505050565b602080825282518282018190526000919060409081850190868401855b828110156107d057815180517fffffffffff0000000000000000000000000000000000000000000000000000001685528601517fffffffff0000000000000000000000000000000000000000000000000000000016868501529284019290850190600101610767565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156108375783517fffffffffff00000000000000000000000000000000000000000000000000000016835292840192918401916001016107f9565b50909695505050505050565b60006020828403121561085557600080fd5b8151801515811461074357600080fd5b60006020828403121561087757600080fd5b81517fffffffffff0000000000000000000000000000000000000000000000000000008116811461074357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156108e857600080fd5b81516107438161070156fea2646970667358221220db18f5e4617b4e2d2dbd9f9a08f2831549564244b4c75d73d8559831b1a068ff64736f6c634300080f0033";

type MockPolicyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockPolicyConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MockPolicy__factory extends ContractFactory {
  constructor(...args: MockPolicyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    kernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<MockPolicy> {
    return super.deploy(kernel_, overrides || {}) as Promise<MockPolicy>;
  }
  override getDeployTransaction(
    kernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(kernel_, overrides || {});
  }
  override attach(address: string): MockPolicy {
    return super.attach(address) as MockPolicy;
  }
  override connect(signer: Signer): MockPolicy__factory {
    return super.connect(signer) as MockPolicy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPolicyInterface {
    return new utils.Interface(_abi) as MockPolicyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockPolicy {
    return new Contract(address, _abi, signerOrProvider) as MockPolicy;
  }
}
