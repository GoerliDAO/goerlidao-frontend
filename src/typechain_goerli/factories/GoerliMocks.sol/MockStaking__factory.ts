/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, BigNumberish, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { MockStaking, MockStakingInterface } from "../../GoerliMocks.sol/MockStaking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "gdao_",
        type: "address",
      },
      {
        internalType: "address",
        name: "sgdao_",
        type: "address",
      },
      {
        internalType: "address",
        name: "xgdao_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "epochLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "firstEpochNumber_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "firstEpochTime_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "GDAO",
    outputs: [
      {
        internalType: "contract MockERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "distributor",
    outputs: [
      {
        internalType: "contract IDistributor",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "epoch",
    outputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "distribute",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rebase",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sGDAO",
    outputs: [
      {
        internalType: "contract MockERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "distributor_",
        type: "address",
      },
    ],
    name: "setDistributor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "rebasing_",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "claim_",
        type: "bool",
      },
    ],
    name: "stake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "trigger_",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "rebasing_",
        type: "bool",
      },
    ],
    name: "unstake",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "xGDAO",
    outputs: [
      {
        internalType: "contract MockXgdao",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610b99380380610b9983398101604081905261002f916100bf565b600080546001600160a01b03199081166001600160a01b0398891617825560018054821697891697909717909655600280549096169490961693909317909355604080516080810182528281526020810185905290810183905260600184905260035560049190915560055560065561011e565b80516001600160a01b03811681146100ba57600080fd5b919050565b60008060008060008060c087890312156100d857600080fd5b6100e1876100a3565b95506100ef602088016100a3565b94506100fd604088016100a3565b9350606087015192506080870151915060a087015190509295509295509295565b610a6c8061012d6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063af14052c11610076578063bfe109281161005b578063bfe10928146101c8578063d866c9d8146101e8578063e03481e1146101fb57600080fd5b8063af14052c146101a0578063bc39493c146101a857600080fd5b806375619ab5146100a8578063900cf0cf146100ff578063990966d51461013a5780639ad602971461015b575b600080fd5b6100fd6100b6366004610944565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b6003546004546005546006546101159392919084565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b61014d610148366004610970565b61021b565b604051908152602001610131565b60015461017b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610131565b61014d6104bb565b60005461017b9073ffffffffffffffffffffffffffffffffffffffff1681565b60075461017b9073ffffffffffffffffffffffffffffffffffffffff1681565b61014d6101f6366004610970565b6105fc565b60025461017b9073ffffffffffffffffffffffffffffffffffffffff1681565b600080831561022f5761022c6104bb565b90505b82156102e8576001546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810187905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af11580156102b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d691906109c1565b506102e181866109de565b9150610414565b6002546040517f9dc29fac0000000000000000000000000000000000000000000000000000000081523360048201526024810187905273ffffffffffffffffffffffffffffffffffffffff90911690639dc29fac90604401600060405180830381600087803b15801561035a57600080fd5b505af115801561036e573d6000803e3d6000fd5b50506002546040517fa82487680000000000000000000000000000000000000000000000000000000081526004810189905284935073ffffffffffffffffffffffffffffffffffffffff909116915063a824876890602401602060405180830381865afa1580156103e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104079190610a1d565b61041191906109de565b91505b6000546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af115801561048d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b191906109c1565b5050949350505050565b60008042600360020154116105f7576003546005546104da91906109de565b600555600754604080517fe4fc6b6d000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169163e4fc6b6d9160048082019260009290919082900301818387803b15801561054957600080fd5b505af115801561055d573d6000803e3d6000fd5b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7187e8a6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156105d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f49190610a1d565b90505b919050565b600080546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810186905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af115801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e91906109c1565b506106a76104bb565b6106b190856109de565b93506106be8585856106c7565b95945050505050565b60008115610763576001546040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015260248201869052909116906340c10f1990604401600060405180830381600087803b15801561074357600080fd5b505af1158015610757573d6000803e3d6000fd5b50505050829050610919565b6002546040517f66a5236c0000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990869083906366a5236c90602401602060405180830381865afa1580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108009190610a1d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561086b57600080fd5b505af115801561087f573d6000803e3d6000fd5b50506002546040517f66a5236c0000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff90911692506366a5236c9150602401602060405180830381865afa1580156108f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109169190610a1d565b90505b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146105f757600080fd5b60006020828403121561095657600080fd5b61091982610920565b801515811461096d57600080fd5b50565b6000806000806080858703121561098657600080fd5b61098f85610920565b93506020850135925060408501356109a68161095f565b915060608501356109b68161095f565b939692955090935050565b6000602082840312156109d357600080fd5b81516109198161095f565b60008219821115610a18577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b600060208284031215610a2f57600080fd5b505191905056fea2646970667358221220307e32cfdf4d2ef18482134ce2223706722ae55b8f08bc563d39dfef5fd2908264736f6c634300080f0033";

type MockStakingConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockStakingConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MockStaking__factory extends ContractFactory {
  constructor(...args: MockStakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    gdao_: PromiseOrValue<string>,
    sgdao_: PromiseOrValue<string>,
    xgdao_: PromiseOrValue<string>,
    epochLength: PromiseOrValue<BigNumberish>,
    firstEpochNumber_: PromiseOrValue<BigNumberish>,
    firstEpochTime_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<MockStaking> {
    return super.deploy(
      gdao_,
      sgdao_,
      xgdao_,
      epochLength,
      firstEpochNumber_,
      firstEpochTime_,
      overrides || {},
    ) as Promise<MockStaking>;
  }
  override getDeployTransaction(
    gdao_: PromiseOrValue<string>,
    sgdao_: PromiseOrValue<string>,
    xgdao_: PromiseOrValue<string>,
    epochLength: PromiseOrValue<BigNumberish>,
    firstEpochNumber_: PromiseOrValue<BigNumberish>,
    firstEpochTime_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(
      gdao_,
      sgdao_,
      xgdao_,
      epochLength,
      firstEpochNumber_,
      firstEpochTime_,
      overrides || {},
    );
  }
  override attach(address: string): MockStaking {
    return super.attach(address) as MockStaking;
  }
  override connect(signer: Signer): MockStaking__factory {
    return super.connect(signer) as MockStaking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStakingInterface {
    return new utils.Interface(_abi) as MockStakingInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockStaking {
    return new Contract(address, _abi, signerOrProvider) as MockStaking;
  }
}
