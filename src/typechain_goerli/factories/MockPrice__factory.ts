/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, BigNumberish, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MockPrice, MockPriceInterface } from "../MockPrice";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Kernel",
        name: "kernel_",
        type: "address",
      },
      {
        internalType: "uint48",
        name: "observationFrequency_",
        type: "uint48",
      },
      {
        internalType: "uint256",
        name: "minimumTargetPrice_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller_",
        type: "address",
      },
    ],
    name: "KernelAdapter_OnlyKernel",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "policy_",
        type: "address",
      },
    ],
    name: "Module_PolicyNotPermitted",
    type: "error",
  },
  {
    inputs: [],
    name: "Price_CustomError",
    type: "error",
  },
  {
    inputs: [],
    name: "INIT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "KEYCODE",
    outputs: [
      {
        internalType: "Keycode",
        name: "",
        type: "bytes5",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "uint8",
        name: "major",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "minor",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract Kernel",
        name: "newKernel_",
        type: "address",
      },
    ],
    name: "changeKernel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint48",
        name: "movingAverageDuration_",
        type: "uint48",
      },
    ],
    name: "changeMovingAverageDuration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint48",
        name: "observationFrequency_",
        type: "uint48",
      },
    ],
    name: "changeObservationFrequency",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "currentPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMovingAverage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTargetPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "startObservations_",
        type: "uint256[]",
      },
      {
        internalType: "uint48",
        name: "lastObservationTime_",
        type: "uint48",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "kernel",
    outputs: [
      {
        internalType: "contract Kernel",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastObservationTime",
    outputs: [
      {
        internalType: "uint48",
        name: "",
        type: "uint48",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minimumTargetPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "movingAverage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "observationFrequency",
    outputs: [
      {
        internalType: "uint48",
        name: "",
        type: "uint48",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "result",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentPrice_",
        type: "uint256",
      },
    ],
    name: "setCurrentPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    name: "setDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lastPrice_",
        type: "uint256",
      },
    ],
    name: "setLastPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint48",
        name: "lastObservationTime_",
        type: "uint48",
      },
    ],
    name: "setLastTime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "movingAverage_",
        type: "uint256",
      },
    ],
    name: "setMovingAverage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "result_",
        type: "bool",
      },
    ],
    name: "setResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateMovingAverage",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161093338038061093383398101604081905261002f91610083565b600080546001600160a01b039094166001600160a01b0319909416939093179092556004805465ffffffffffff909216620100000267ffffffffffffff0019909216919091176101001790556005556100dd565b60008060006060848603121561009857600080fd5b83516001600160a01b03811681146100af57600080fd5b602085015190935065ffffffffffff811681146100cb57600080fd5b80925050604084015190509250925092565b610847806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80637e20be3b116100f9578063d266f5d011610097578063ea64391411610071578063ea64391414610469578063eb91d37e14610471578063f4b4dc2e14610479578063ffa1ad74146104be57600080fd5b8063d266f5d0146103fe578063d4aae0c41461041c578063d8cf24fd1461046157600080fd5b8063902a35b9116100d3578063902a35b9146103d35780639d1b464a146103e5578063b5e71305146103ee578063bd01bb32146103f657600080fd5b80637e20be3b1461036757806386db7df0146103ba5780638a157337146103c257600080fd5b80634657b36c116101665780636d2c2808116101405780636d2c2808146102a05780637321f100146102a95780637a1395aa146102d85780637d4dce761461031a57600080fd5b80634657b36c14610258578063653721471461026b5780636cb56dbc1461028d57600080fd5b80632c19abb9116101975780632c19abb91461021d578063313ce567146102305780633ccec9c41461024f57600080fd5b8063053f14da146101be57806318b20071146101da5780631ae7ec2e146101ef575b600080fd5b6101c760025481565b6040519081526020015b60405180910390f35b6101ed6101e8366004610623565b600355565b005b6040517f505249434500000000000000000000000000000000000000000000000000000081526020016101d1565b6101ed61022b366004610623565b600255565b60045461023d9060ff1681565b60405160ff90911681526020016101d1565b6101c760015481565b6101ed61026636600461063c565b6104d3565b60045461027d90610100900460ff1681565b60405190151581526020016101d1565b6101ed61029b366004610623565b600155565b6101c760055481565b6004546102c19062010000900465ffffffffffff1681565b60405165ffffffffffff90911681526020016101d1565b6101ed6102e6366004610679565b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b6101ed6103283660046106b7565b6004805465ffffffffffff90921662010000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000ffff909216919091179055565b6101ed6103753660046106b7565b6004805465ffffffffffff90921668010000000000000000027fffffffffffffffffffffffffffffffffffff000000000000ffffffffffffffff909216919091179055565b6101ed610572565b6101ed6103d03660046106b7565b50565b6101ed6103e1366004610701565b5050565b6101c760035481565b6001546101c7565b6101c76105b5565b6004546102c19068010000000000000000900465ffffffffffff1681565b60005461043c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d1565b6002546101c7565b6101ed6105d0565b6003546101c7565b6101ed6104873660046107ef565b60048054911515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055565b604080516001815260006020820152016101d1565b60005473ffffffffffffffffffffffffffffffffffffffff16331461052b576040517f14fa403c0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600454610100900460ff166105b3576040517f2cd2cbf700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000600554600154116105c9575060055490565b5060015490565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105b3576040517f14fa403c000000000000000000000000000000000000000000000000000000008152336004820152602401610522565b60006020828403121561063557600080fd5b5035919050565b60006020828403121561064e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461067257600080fd5b9392505050565b60006020828403121561068b57600080fd5b813560ff8116811461067257600080fd5b803565ffffffffffff811681146106b257600080fd5b919050565b6000602082840312156106c957600080fd5b6106728261069c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561071457600080fd5b823567ffffffffffffffff8082111561072c57600080fd5b818501915085601f83011261074057600080fd5b8135602082821115610754576107546106d2565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108682111715610797576107976106d2565b6040529283528183019350848101820192898411156107b557600080fd5b948201945b838610156107d3578535855294820194938201936107ba565b96506107e2905087820161069c565b9450505050509250929050565b60006020828403121561080157600080fd5b8135801515811461067257600080fdfea2646970667358221220d251eb98359526f34b75a509dee50f2a4cf3f702c825b97ba6510c25b3f89e4e64736f6c634300080f0033";

type MockPriceConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockPriceConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MockPrice__factory extends ContractFactory {
  constructor(...args: MockPriceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    kernel_: PromiseOrValue<string>,
    observationFrequency_: PromiseOrValue<BigNumberish>,
    minimumTargetPrice_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<MockPrice> {
    return super.deploy(kernel_, observationFrequency_, minimumTargetPrice_, overrides || {}) as Promise<MockPrice>;
  }
  override getDeployTransaction(
    kernel_: PromiseOrValue<string>,
    observationFrequency_: PromiseOrValue<BigNumberish>,
    minimumTargetPrice_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(kernel_, observationFrequency_, minimumTargetPrice_, overrides || {});
  }
  override attach(address: string): MockPrice {
    return super.attach(address) as MockPrice;
  }
  override connect(signer: Signer): MockPrice__factory {
    return super.connect(signer) as MockPrice__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPriceInterface {
    return new utils.Interface(_abi) as MockPriceInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockPrice {
    return new Contract(address, _abi, signerOrProvider) as MockPrice;
  }
}
