/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { MockOperator, MockOperatorInterface } from "../../Heart.t.sol/MockOperator";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Kernel",
        name: "kernel_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller_",
        type: "address",
      },
    ],
    name: "KernelAdapter_OnlyKernel",
    type: "error",
  },
  {
    inputs: [],
    name: "Operator_CustomError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Keycode",
        name: "keycode_",
        type: "bytes5",
      },
    ],
    name: "Policy_ModuleDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract Kernel",
        name: "newKernel_",
        type: "address",
      },
    ],
    name: "changeKernel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "configureDependencies",
    outputs: [
      {
        internalType: "Keycode[]",
        name: "dependencies",
        type: "bytes5[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kernel",
    outputs: [
      {
        internalType: "contract Kernel",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "operate",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "requestPermissions",
    outputs: [
      {
        components: [
          {
            internalType: "Keycode",
            name: "keycode",
            type: "bytes5",
          },
          {
            internalType: "bytes4",
            name: "funcSelector",
            type: "bytes4",
          },
        ],
        internalType: "struct Permissions[]",
        name: "requests",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "result",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "result_",
        type: "bool",
      },
    ],
    name: "setResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161058238038061058283398101604081905261002f91610059565b600080546001600160a81b0319166001600160a01b0390921691909117600160a01b179055610089565b60006020828403121561006b57600080fd5b81516001600160a01b038116811461008257600080fd5b9392505050565b6104ea806100986000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637159a6181161005b5780637159a618146100f35780639459b875146100fb578063d4aae0c41461010a578063f4b4dc2e1461014f57600080fd5b806322f3e2d41461008d5780634657b36c146100aa5780635924be70146100bf57806365372147146100ce575b600080fd5b6100956101a7565b60405190151581526020015b60405180910390f35b6100bd6100b8366004610333565b61023f565b005b60606040516100a19190610370565b6000546100959074010000000000000000000000000000000000000000900460ff1681565b6100bd6102dd565b60606040516100a19190610403565b60005461012a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a1565b6100bd61015d36600461047a565b6000805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b600080546040517fe52223bb00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063e52223bb90602401602060405180830381865afa158015610216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023a9190610497565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff163314610296576040517f14fa403c00000000000000000000000000000000000000000000000000000000815233600482015260240160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005474010000000000000000000000000000000000000000900460ff16610331576040517f1117572b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60006020828403121561034557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461036957600080fd5b9392505050565b602080825282518282018190526000919060409081850190868401855b828110156103f657815180517fffffffffff0000000000000000000000000000000000000000000000000000001685528601517fffffffff000000000000000000000000000000000000000000000000000000001686850152928401929085019060010161038d565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561045d5783517fffffffffff000000000000000000000000000000000000000000000000000000168352928401929184019160010161041f565b50909695505050505050565b801515811461047757600080fd5b50565b60006020828403121561048c57600080fd5b813561036981610469565b6000602082840312156104a957600080fd5b81516103698161046956fea2646970667358221220389fac777aff67459302ccc6d92016b704db2004ef3fc98aefd9ae9e370ed4c764736f6c634300080f0033";

type MockOperatorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockOperatorConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MockOperator__factory extends ContractFactory {
  constructor(...args: MockOperatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    kernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<MockOperator> {
    return super.deploy(kernel_, overrides || {}) as Promise<MockOperator>;
  }
  override getDeployTransaction(
    kernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(kernel_, overrides || {});
  }
  override attach(address: string): MockOperator {
    return super.attach(address) as MockOperator;
  }
  override connect(signer: Signer): MockOperator__factory {
    return super.connect(signer) as MockOperator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOperatorInterface {
    return new utils.Interface(_abi) as MockOperatorInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockOperator {
    return new Contract(address, _abi, signerOrProvider) as MockOperator;
  }
}
