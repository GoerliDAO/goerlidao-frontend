/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BigNumber, BigNumberish, ContractReceipt } from "ethers";

import { ERC20__factory } from "../factories";
import { useProvider, useSigner } from "wagmi";
import { useQuery, useMutation } from "@tanstack/react-query";

export default class ERC20Queries {
  readonly contractAddress: string;
  readonly networkId?: { chainId: number };

  constructor(contractAddress: string, networkId?: number) {
    this.networkId = networkId ? { chainId: networkId } : undefined;
    this.contractAddress = contractAddress;
  }

  useAllowance = (owner: string, spender: string) => {
    const provider = useProvider(this.networkId);
    const contract = ERC20__factory.connect(this.contractAddress, provider);
    return useQuery<BigNumber>(["allowance", "ERC20", owner, spender], async () => {
      return await contract.allowance(owner, spender);
    });
  };

  useApprove = (spender: string, amount: BigNumberish) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = ERC20__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { spender: string; amount: BigNumberish }>({
      onMutate: async ({ spender, amount }) => {
        const transaction = await contract.approve(spender, amount);
        return transaction.wait();
      },
    });
  };

  useBalanceOf = (account: string) => {
    const provider = useProvider(this.networkId);
    const contract = ERC20__factory.connect(this.contractAddress, provider);
    return useQuery<BigNumber>(["balanceOf", "ERC20", account], async () => {
      return await contract.balanceOf(account);
    });
  };

  useDecimals = () => {
    const provider = useProvider(this.networkId);
    const contract = ERC20__factory.connect(this.contractAddress, provider);
    return useQuery<number>(["decimals", "ERC20"], async () => {
      return await contract.decimals();
    });
  };

  useDecreaseAllowance = (spender: string, subtractedValue: BigNumberish) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = ERC20__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { spender: string; subtractedValue: BigNumberish }>({
      onMutate: async ({ spender, subtractedValue }) => {
        const transaction = await contract.decreaseAllowance(spender, subtractedValue);
        return transaction.wait();
      },
    });
  };

  useIncreaseAllowance = (spender: string, addedValue: BigNumberish) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = ERC20__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { spender: string; addedValue: BigNumberish }>({
      onMutate: async ({ spender, addedValue }) => {
        const transaction = await contract.increaseAllowance(spender, addedValue);
        return transaction.wait();
      },
    });
  };

  useName = () => {
    const provider = useProvider(this.networkId);
    const contract = ERC20__factory.connect(this.contractAddress, provider);
    return useQuery<string>(["name", "ERC20"], async () => {
      return await contract.name();
    });
  };

  useSymbol = () => {
    const provider = useProvider(this.networkId);
    const contract = ERC20__factory.connect(this.contractAddress, provider);
    return useQuery<string>(["symbol", "ERC20"], async () => {
      return await contract.symbol();
    });
  };

  useTotalSupply = () => {
    const provider = useProvider(this.networkId);
    const contract = ERC20__factory.connect(this.contractAddress, provider);
    return useQuery<BigNumber>(["totalSupply", "ERC20"], async () => {
      return await contract.totalSupply();
    });
  };

  useTransfer = (recipient: string, amount: BigNumberish) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = ERC20__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { recipient: string; amount: BigNumberish }>({
      onMutate: async ({ recipient, amount }) => {
        const transaction = await contract.transfer(recipient, amount);
        return transaction.wait();
      },
    });
  };

  useTransferFrom = (sender: string, recipient: string, amount: BigNumberish) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = ERC20__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { sender: string; recipient: string; amount: BigNumberish }>({
      onMutate: async ({ sender, recipient, amount }) => {
        const transaction = await contract.transferFrom(sender, recipient, amount);
        return transaction.wait();
      },
    });
  };
}
