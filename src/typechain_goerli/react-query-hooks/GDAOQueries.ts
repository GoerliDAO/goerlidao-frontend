/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BigNumber, BigNumberish, BytesLike, ContractReceipt } from "ethers";

import { GDAO__factory } from "../factories/GDAO.sol";
import { useProvider, useSigner } from "wagmi";
import { useQuery, useMutation } from "@tanstack/react-query";

export default class GDAOQueries {
  readonly contractAddress: string;
  readonly networkId?: { chainId: number };

  constructor(contractAddress: string, networkId?: number) {
    this.networkId = networkId ? { chainId: networkId } : undefined;
    this.contractAddress = contractAddress;
  }

  useDOMAIN_SEPARATOR = () => {
    const provider = useProvider(this.networkId);
    const contract = GDAO__factory.connect(this.contractAddress, provider);
    return useQuery<string>(["DOMAIN_SEPARATOR", "GDAO"], async () => {
      return await contract.DOMAIN_SEPARATOR();
    });
  };

  useAllowance = (owner: string, spender: string) => {
    const provider = useProvider(this.networkId);
    const contract = GDAO__factory.connect(this.contractAddress, provider);
    return useQuery<BigNumber>(["allowance", "GDAO", owner, spender], async () => {
      return await contract.allowance(owner, spender);
    });
  };

  useApprove = (spender: string, amount: BigNumberish) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = GDAO__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { spender: string; amount: BigNumberish }>({
      onMutate: async ({ spender, amount }) => {
        const transaction = await contract.approve(spender, amount);
        return transaction.wait();
      },
    });
  };

  useAuthority = () => {
    const provider = useProvider(this.networkId);
    const contract = GDAO__factory.connect(this.contractAddress, provider);
    return useQuery<string>(["authority", "GDAO"], async () => {
      return await contract.authority();
    });
  };

  useBalanceOf = (account: string) => {
    const provider = useProvider(this.networkId);
    const contract = GDAO__factory.connect(this.contractAddress, provider);
    return useQuery<BigNumber>(["balanceOf", "GDAO", account], async () => {
      return await contract.balanceOf(account);
    });
  };

  useBurn = (amount: BigNumberish) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = GDAO__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { amount: BigNumberish }>({
      onMutate: async ({ amount }) => {
        const transaction = await contract.burn(amount);
        return transaction.wait();
      },
    });
  };

  useBurnFrom = (account_: string, amount_: BigNumberish) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = GDAO__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { account_: string; amount_: BigNumberish }>({
      onMutate: async ({ account_, amount_ }) => {
        const transaction = await contract.burnFrom(account_, amount_);
        return transaction.wait();
      },
    });
  };

  useDecimals = () => {
    const provider = useProvider(this.networkId);
    const contract = GDAO__factory.connect(this.contractAddress, provider);
    return useQuery<number>(["decimals", "GDAO"], async () => {
      return await contract.decimals();
    });
  };

  useDecreaseAllowance = (spender: string, subtractedValue: BigNumberish) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = GDAO__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { spender: string; subtractedValue: BigNumberish }>({
      onMutate: async ({ spender, subtractedValue }) => {
        const transaction = await contract.decreaseAllowance(spender, subtractedValue);
        return transaction.wait();
      },
    });
  };

  useIncreaseAllowance = (spender: string, addedValue: BigNumberish) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = GDAO__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { spender: string; addedValue: BigNumberish }>({
      onMutate: async ({ spender, addedValue }) => {
        const transaction = await contract.increaseAllowance(spender, addedValue);
        return transaction.wait();
      },
    });
  };

  useMint = (account_: string, amount_: BigNumberish) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = GDAO__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { account_: string; amount_: BigNumberish }>({
      onMutate: async ({ account_, amount_ }) => {
        const transaction = await contract.mint(account_, amount_);
        return transaction.wait();
      },
    });
  };

  useName = () => {
    const provider = useProvider(this.networkId);
    const contract = GDAO__factory.connect(this.contractAddress, provider);
    return useQuery<string>(["name", "GDAO"], async () => {
      return await contract.name();
    });
  };

  useNonces = (owner: string) => {
    const provider = useProvider(this.networkId);
    const contract = GDAO__factory.connect(this.contractAddress, provider);
    return useQuery<BigNumber>(["nonces", "GDAO", owner], async () => {
      return await contract.nonces(owner);
    });
  };

  usePermit = (
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
  ) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = GDAO__factory.connect(this.contractAddress, signer);
    return useMutation<
      ContractReceipt,
      Error,
      {
        owner: string;
        spender: string;
        value: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    >({
      onMutate: async ({ owner, spender, value, deadline, v, r, s }) => {
        const transaction = await contract.permit(owner, spender, value, deadline, v, r, s);
        return transaction.wait();
      },
    });
  };

  useSetAuthority = (_newAuthority: string) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = GDAO__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { _newAuthority: string }>({
      onMutate: async ({ _newAuthority }) => {
        const transaction = await contract.setAuthority(_newAuthority);
        return transaction.wait();
      },
    });
  };

  useSymbol = () => {
    const provider = useProvider(this.networkId);
    const contract = GDAO__factory.connect(this.contractAddress, provider);
    return useQuery<string>(["symbol", "GDAO"], async () => {
      return await contract.symbol();
    });
  };

  useTotalSupply = () => {
    const provider = useProvider(this.networkId);
    const contract = GDAO__factory.connect(this.contractAddress, provider);
    return useQuery<BigNumber>(["totalSupply", "GDAO"], async () => {
      return await contract.totalSupply();
    });
  };

  useTransfer = (recipient: string, amount: BigNumberish) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = GDAO__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { recipient: string; amount: BigNumberish }>({
      onMutate: async ({ recipient, amount }) => {
        const transaction = await contract.transfer(recipient, amount);
        return transaction.wait();
      },
    });
  };

  useTransferFrom = (sender: string, recipient: string, amount: BigNumberish) => {
    const { data: signer } = useSigner();
    if (!signer) throw new Error("Signer is not set");
    const contract = GDAO__factory.connect(this.contractAddress, signer);
    return useMutation<ContractReceipt, Error, { sender: string; recipient: string; amount: BigNumberish }>({
      onMutate: async ({ sender, recipient, amount }) => {
        const transaction = await contract.transferFrom(sender, recipient, amount);
        return transaction.wait();
      },
    });
  };
}
