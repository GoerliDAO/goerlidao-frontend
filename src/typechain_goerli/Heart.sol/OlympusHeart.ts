/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";

export type PermissionsStruct = {
  keycode: PromiseOrValue<BytesLike>;
  funcSelector: PromiseOrValue<BytesLike>;
};

export type PermissionsStructOutput = [string, string] & {
  keycode: string;
  funcSelector: string;
};

export interface OlympusHeartInterface extends utils.Interface {
  functions: {
    "ROLES()": FunctionFragment;
    "activate()": FunctionFragment;
    "active()": FunctionFragment;
    "beat()": FunctionFragment;
    "changeKernel(address)": FunctionFragment;
    "configureDependencies()": FunctionFragment;
    "deactivate()": FunctionFragment;
    "frequency()": FunctionFragment;
    "isActive()": FunctionFragment;
    "kernel()": FunctionFragment;
    "lastBeat()": FunctionFragment;
    "operator()": FunctionFragment;
    "requestPermissions()": FunctionFragment;
    "resetBeat()": FunctionFragment;
    "reward()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setRewardTokenAndAmount(address,uint256)": FunctionFragment;
    "withdrawUnspentRewards(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ROLES"
      | "activate"
      | "active"
      | "beat"
      | "changeKernel"
      | "configureDependencies"
      | "deactivate"
      | "frequency"
      | "isActive"
      | "kernel"
      | "lastBeat"
      | "operator"
      | "requestPermissions"
      | "resetBeat"
      | "reward"
      | "rewardToken"
      | "setOperator"
      | "setRewardTokenAndAmount"
      | "withdrawUnspentRewards",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ROLES", values?: undefined): string;
  encodeFunctionData(functionFragment: "activate", values?: undefined): string;
  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(functionFragment: "beat", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeKernel", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "configureDependencies", values?: undefined): string;
  encodeFunctionData(functionFragment: "deactivate", values?: undefined): string;
  encodeFunctionData(functionFragment: "frequency", values?: undefined): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(functionFragment: "lastBeat", values?: undefined): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "requestPermissions", values?: undefined): string;
  encodeFunctionData(functionFragment: "resetBeat", values?: undefined): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(functionFragment: "rewardToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "setOperator", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "setRewardTokenAndAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "withdrawUnspentRewards", values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: "ROLES", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeKernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configureDependencies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deactivate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frequency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastBeat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requestPermissions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resetBeat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRewardTokenAndAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawUnspentRewards", data: BytesLike): Result;

  events: {
    "Beat(uint256)": EventFragment;
    "RewardIssued(address,uint256)": EventFragment;
    "RewardUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Beat"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardUpdated"): EventFragment;
}

export interface BeatEventObject {
  timestamp_: BigNumber;
}
export type BeatEvent = TypedEvent<[BigNumber], BeatEventObject>;

export type BeatEventFilter = TypedEventFilter<BeatEvent>;

export interface RewardIssuedEventObject {
  to_: string;
  rewardAmount_: BigNumber;
}
export type RewardIssuedEvent = TypedEvent<[string, BigNumber], RewardIssuedEventObject>;

export type RewardIssuedEventFilter = TypedEventFilter<RewardIssuedEvent>;

export interface RewardUpdatedEventObject {
  token_: string;
  rewardAmount_: BigNumber;
}
export type RewardUpdatedEvent = TypedEvent<[string, BigNumber], RewardUpdatedEventObject>;

export type RewardUpdatedEventFilter = TypedEventFilter<RewardUpdatedEvent>;

export interface OlympusHeart extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OlympusHeartInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ROLES(overrides?: CallOverrides): Promise<[string]>;

    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    active(overrides?: CallOverrides): Promise<[boolean]>;

    beat(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    deactivate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    frequency(overrides?: CallOverrides): Promise<[BigNumber]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    lastBeat(overrides?: CallOverrides): Promise<[BigNumber]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    requestPermissions(
      overrides?: CallOverrides,
    ): Promise<[PermissionsStructOutput[]] & { permissions: PermissionsStructOutput[] }>;

    resetBeat(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    reward(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardTokenAndAmount(
      token_: PromiseOrValue<string>,
      reward_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawUnspentRewards(
      token_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  ROLES(overrides?: CallOverrides): Promise<string>;

  activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  active(overrides?: CallOverrides): Promise<boolean>;

  beat(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  changeKernel(
    newKernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  deactivate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  frequency(overrides?: CallOverrides): Promise<BigNumber>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  lastBeat(overrides?: CallOverrides): Promise<BigNumber>;

  operator(overrides?: CallOverrides): Promise<string>;

  requestPermissions(overrides?: CallOverrides): Promise<PermissionsStructOutput[]>;

  resetBeat(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  reward(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setOperator(
    operator_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewardTokenAndAmount(
    token_: PromiseOrValue<string>,
    reward_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawUnspentRewards(
    token_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ROLES(overrides?: CallOverrides): Promise<string>;

    activate(overrides?: CallOverrides): Promise<void>;

    active(overrides?: CallOverrides): Promise<boolean>;

    beat(overrides?: CallOverrides): Promise<void>;

    changeKernel(newKernel_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    configureDependencies(overrides?: CallOverrides): Promise<string[]>;

    deactivate(overrides?: CallOverrides): Promise<void>;

    frequency(overrides?: CallOverrides): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    lastBeat(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<string>;

    requestPermissions(overrides?: CallOverrides): Promise<PermissionsStructOutput[]>;

    resetBeat(overrides?: CallOverrides): Promise<void>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setOperator(operator_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRewardTokenAndAmount(
      token_: PromiseOrValue<string>,
      reward_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawUnspentRewards(token_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Beat(uint256)"(timestamp_?: null): BeatEventFilter;
    Beat(timestamp_?: null): BeatEventFilter;

    "RewardIssued(address,uint256)"(to_?: null, rewardAmount_?: null): RewardIssuedEventFilter;
    RewardIssued(to_?: null, rewardAmount_?: null): RewardIssuedEventFilter;

    "RewardUpdated(address,uint256)"(token_?: null, rewardAmount_?: null): RewardUpdatedEventFilter;
    RewardUpdated(token_?: null, rewardAmount_?: null): RewardUpdatedEventFilter;
  };

  estimateGas: {
    ROLES(overrides?: CallOverrides): Promise<BigNumber>;

    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    active(overrides?: CallOverrides): Promise<BigNumber>;

    beat(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    deactivate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    frequency(overrides?: CallOverrides): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    lastBeat(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    requestPermissions(overrides?: CallOverrides): Promise<BigNumber>;

    resetBeat(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewardTokenAndAmount(
      token_: PromiseOrValue<string>,
      reward_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawUnspentRewards(
      token_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ROLES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beat(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    deactivate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    frequency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastBeat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestPermissions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resetBeat(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewardTokenAndAmount(
      token_: PromiseOrValue<string>,
      reward_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawUnspentRewards(
      token_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
