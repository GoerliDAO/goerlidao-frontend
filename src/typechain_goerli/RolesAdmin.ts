/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export type PermissionsStruct = {
  keycode: PromiseOrValue<BytesLike>;
  funcSelector: PromiseOrValue<BytesLike>;
};

export type PermissionsStructOutput = [string, string] & {
  keycode: string;
  funcSelector: string;
};

export interface RolesAdminInterface extends utils.Interface {
  functions: {
    "ROLES()": FunctionFragment;
    "admin()": FunctionFragment;
    "changeKernel(address)": FunctionFragment;
    "configureDependencies()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "isActive()": FunctionFragment;
    "kernel()": FunctionFragment;
    "newAdmin()": FunctionFragment;
    "pullNewAdmin()": FunctionFragment;
    "pushNewAdmin(address)": FunctionFragment;
    "requestPermissions()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ROLES"
      | "admin"
      | "changeKernel"
      | "configureDependencies"
      | "grantRole"
      | "isActive"
      | "kernel"
      | "newAdmin"
      | "pullNewAdmin"
      | "pushNewAdmin"
      | "requestPermissions"
      | "revokeRole",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ROLES", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeKernel", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "configureDependencies", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(functionFragment: "newAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "pullNewAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "pushNewAdmin", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "requestPermissions", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: "ROLES", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeKernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configureDependencies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pullNewAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushNewAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requestPermissions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;

  events: {
    "NewAdminPulled(address)": EventFragment;
    "NewAdminPushed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewAdminPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdminPushed"): EventFragment;
}

export interface NewAdminPulledEventObject {
  newAdmin_: string;
}
export type NewAdminPulledEvent = TypedEvent<[string], NewAdminPulledEventObject>;

export type NewAdminPulledEventFilter = TypedEventFilter<NewAdminPulledEvent>;

export interface NewAdminPushedEventObject {
  newAdmin_: string;
}
export type NewAdminPushedEvent = TypedEvent<[string], NewAdminPushedEventObject>;

export type NewAdminPushedEventFilter = TypedEventFilter<NewAdminPushedEvent>;

export interface RolesAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RolesAdminInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ROLES(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    grantRole(
      role_: PromiseOrValue<BytesLike>,
      wallet_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    newAdmin(overrides?: CallOverrides): Promise<[string]>;

    pullNewAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    pushNewAdmin(
      newAdmin_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    requestPermissions(
      overrides?: CallOverrides,
    ): Promise<[PermissionsStructOutput[]] & { requests: PermissionsStructOutput[] }>;

    revokeRole(
      role_: PromiseOrValue<BytesLike>,
      wallet_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  ROLES(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  changeKernel(
    newKernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  grantRole(
    role_: PromiseOrValue<BytesLike>,
    wallet_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  newAdmin(overrides?: CallOverrides): Promise<string>;

  pullNewAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  pushNewAdmin(
    newAdmin_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  requestPermissions(overrides?: CallOverrides): Promise<PermissionsStructOutput[]>;

  revokeRole(
    role_: PromiseOrValue<BytesLike>,
    wallet_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ROLES(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    changeKernel(newKernel_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    configureDependencies(overrides?: CallOverrides): Promise<string[]>;

    grantRole(
      role_: PromiseOrValue<BytesLike>,
      wallet_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    newAdmin(overrides?: CallOverrides): Promise<string>;

    pullNewAdmin(overrides?: CallOverrides): Promise<void>;

    pushNewAdmin(newAdmin_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    requestPermissions(overrides?: CallOverrides): Promise<PermissionsStructOutput[]>;

    revokeRole(
      role_: PromiseOrValue<BytesLike>,
      wallet_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    "NewAdminPulled(address)"(newAdmin_?: PromiseOrValue<string> | null): NewAdminPulledEventFilter;
    NewAdminPulled(newAdmin_?: PromiseOrValue<string> | null): NewAdminPulledEventFilter;

    "NewAdminPushed(address)"(newAdmin_?: PromiseOrValue<string> | null): NewAdminPushedEventFilter;
    NewAdminPushed(newAdmin_?: PromiseOrValue<string> | null): NewAdminPushedEventFilter;
  };

  estimateGas: {
    ROLES(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    grantRole(
      role_: PromiseOrValue<BytesLike>,
      wallet_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    newAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pullNewAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    pushNewAdmin(
      newAdmin_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    requestPermissions(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role_: PromiseOrValue<BytesLike>,
      wallet_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ROLES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    configureDependencies(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    grantRole(
      role_: PromiseOrValue<BytesLike>,
      wallet_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pullNewAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    pushNewAdmin(
      newAdmin_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    requestPermissions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeRole(
      role_: PromiseOrValue<BytesLike>,
      wallet_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
