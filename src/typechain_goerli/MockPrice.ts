/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export interface MockPriceInterface extends utils.Interface {
  functions: {
    "INIT()": FunctionFragment;
    "KEYCODE()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "changeKernel(address)": FunctionFragment;
    "changeMovingAverageDuration(uint48)": FunctionFragment;
    "changeObservationFrequency(uint48)": FunctionFragment;
    "currentPrice()": FunctionFragment;
    "decimals()": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "getLastPrice()": FunctionFragment;
    "getMovingAverage()": FunctionFragment;
    "getTargetPrice()": FunctionFragment;
    "initialize(uint256[],uint48)": FunctionFragment;
    "kernel()": FunctionFragment;
    "lastObservationTime()": FunctionFragment;
    "lastPrice()": FunctionFragment;
    "minimumTargetPrice()": FunctionFragment;
    "movingAverage()": FunctionFragment;
    "observationFrequency()": FunctionFragment;
    "result()": FunctionFragment;
    "setCurrentPrice(uint256)": FunctionFragment;
    "setDecimals(uint8)": FunctionFragment;
    "setLastPrice(uint256)": FunctionFragment;
    "setLastTime(uint48)": FunctionFragment;
    "setMovingAverage(uint256)": FunctionFragment;
    "setResult(bool)": FunctionFragment;
    "updateMovingAverage()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INIT"
      | "KEYCODE"
      | "VERSION"
      | "changeKernel"
      | "changeMovingAverageDuration"
      | "changeObservationFrequency"
      | "currentPrice"
      | "decimals"
      | "getCurrentPrice"
      | "getLastPrice"
      | "getMovingAverage"
      | "getTargetPrice"
      | "initialize"
      | "kernel"
      | "lastObservationTime"
      | "lastPrice"
      | "minimumTargetPrice"
      | "movingAverage"
      | "observationFrequency"
      | "result"
      | "setCurrentPrice"
      | "setDecimals"
      | "setLastPrice"
      | "setLastTime"
      | "setMovingAverage"
      | "setResult"
      | "updateMovingAverage",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "INIT", values?: undefined): string;
  encodeFunctionData(functionFragment: "KEYCODE", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeKernel", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "changeMovingAverageDuration", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "changeObservationFrequency", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "currentPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "getCurrentPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "getLastPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "getMovingAverage", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTargetPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(functionFragment: "lastObservationTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "lastPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "minimumTargetPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "movingAverage", values?: undefined): string;
  encodeFunctionData(functionFragment: "observationFrequency", values?: undefined): string;
  encodeFunctionData(functionFragment: "result", values?: undefined): string;
  encodeFunctionData(functionFragment: "setCurrentPrice", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setDecimals", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setLastPrice", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setLastTime", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setMovingAverage", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setResult", values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: "updateMovingAverage", values?: undefined): string;

  decodeFunctionResult(functionFragment: "INIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KEYCODE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeKernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeMovingAverageDuration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeObservationFrequency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currentPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCurrentPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLastPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMovingAverage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTargetPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastObservationTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minimumTargetPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "movingAverage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "observationFrequency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "result", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCurrentPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDecimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLastPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLastTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMovingAverage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateMovingAverage", data: BytesLike): Result;

  events: {};
}

export interface MockPrice extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockPriceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    KEYCODE(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[number, number] & { major: number; minor: number }>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeMovingAverageDuration(
      movingAverageDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeObservationFrequency(
      observationFrequency_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    currentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    getCurrentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMovingAverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTargetPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      startObservations_: PromiseOrValue<BigNumberish>[],
      lastObservationTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    lastObservationTime(overrides?: CallOverrides): Promise<[number]>;

    lastPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumTargetPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    movingAverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    observationFrequency(overrides?: CallOverrides): Promise<[number]>;

    result(overrides?: CallOverrides): Promise<[boolean]>;

    setCurrentPrice(
      currentPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDecimals(
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLastPrice(
      lastPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLastTime(
      lastObservationTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMovingAverage(
      movingAverage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setResult(
      result_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMovingAverage(overrides?: CallOverrides): Promise<[void]>;
  };

  INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  KEYCODE(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<[number, number] & { major: number; minor: number }>;

  changeKernel(
    newKernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeMovingAverageDuration(
    movingAverageDuration_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeObservationFrequency(
    observationFrequency_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getLastPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getMovingAverage(overrides?: CallOverrides): Promise<BigNumber>;

  getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    startObservations_: PromiseOrValue<BigNumberish>[],
    lastObservationTime_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  kernel(overrides?: CallOverrides): Promise<string>;

  lastObservationTime(overrides?: CallOverrides): Promise<number>;

  lastPrice(overrides?: CallOverrides): Promise<BigNumber>;

  minimumTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  movingAverage(overrides?: CallOverrides): Promise<BigNumber>;

  observationFrequency(overrides?: CallOverrides): Promise<number>;

  result(overrides?: CallOverrides): Promise<boolean>;

  setCurrentPrice(
    currentPrice_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDecimals(
    decimals_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLastPrice(
    lastPrice_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLastTime(
    lastObservationTime_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMovingAverage(
    movingAverage_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setResult(
    result_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMovingAverage(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    INIT(overrides?: CallOverrides): Promise<void>;

    KEYCODE(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<[number, number] & { major: number; minor: number }>;

    changeKernel(newKernel_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    changeMovingAverageDuration(
      movingAverageDuration_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    changeObservationFrequency(
      observationFrequency_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getLastPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMovingAverage(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      startObservations_: PromiseOrValue<BigNumberish>[],
      lastObservationTime_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    kernel(overrides?: CallOverrides): Promise<string>;

    lastObservationTime(overrides?: CallOverrides): Promise<number>;

    lastPrice(overrides?: CallOverrides): Promise<BigNumber>;

    minimumTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    movingAverage(overrides?: CallOverrides): Promise<BigNumber>;

    observationFrequency(overrides?: CallOverrides): Promise<number>;

    result(overrides?: CallOverrides): Promise<boolean>;

    setCurrentPrice(currentPrice_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setDecimals(decimals_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setLastPrice(lastPrice_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setLastTime(lastObservationTime_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMovingAverage(movingAverage_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setResult(result_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    updateMovingAverage(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    KEYCODE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeMovingAverageDuration(
      movingAverageDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeObservationFrequency(
      observationFrequency_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getLastPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMovingAverage(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      startObservations_: PromiseOrValue<BigNumberish>[],
      lastObservationTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    lastObservationTime(overrides?: CallOverrides): Promise<BigNumber>;

    lastPrice(overrides?: CallOverrides): Promise<BigNumber>;

    minimumTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    movingAverage(overrides?: CallOverrides): Promise<BigNumber>;

    observationFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    result(overrides?: CallOverrides): Promise<BigNumber>;

    setCurrentPrice(
      currentPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDecimals(
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLastPrice(
      lastPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLastTime(
      lastObservationTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMovingAverage(
      movingAverage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setResult(
      result_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMovingAverage(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    KEYCODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeMovingAverageDuration(
      movingAverageDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeObservationFrequency(
      observationFrequency_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    currentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMovingAverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTargetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      startObservations_: PromiseOrValue<BigNumberish>[],
      lastObservationTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastObservationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumTargetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    movingAverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    observationFrequency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    result(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCurrentPrice(
      currentPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDecimals(
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLastPrice(
      lastPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLastTime(
      lastObservationTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMovingAverage(
      movingAverage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setResult(
      result_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMovingAverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
