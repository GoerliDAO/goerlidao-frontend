{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Kernel",
          "name": "kernel_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller_",
          "type": "address"
        }
      ],
      "name": "KernelAdapter_OnlyKernel",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "policy_",
          "type": "address"
        }
      ],
      "name": "Module_PolicyNotPermitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INIT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KEYCODE",
      "outputs": [
        {
          "internalType": "Keycode",
          "name": "",
          "type": "bytes5"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "major",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "minor",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Kernel",
          "name": "newKernel_",
          "type": "address"
        }
      ],
      "name": "changeKernel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "internalType": "contract Kernel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b5060405161025c38038061025c83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101c9806100936000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631ae7ec2e1461005c5780634657b36c14610077578063d4aae0c41461008c578063ea643914146100ac578063ffa1ad74146100b4575b600080fd5b604051641a5b9d985b60da1b81526020015b60405180910390f35b61008a61008536600461014f565b6100c8565b005b60005461009f906001600160a01b031681565b60405161006e919061017f565b61008a610120565b60408051600080825260208201520161006e565b6000546001600160a01b031633146100fe573360405163053e900f60e21b81526004016100f5919061017f565b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461014d573360405163053e900f60e21b81526004016100f5919061017f565b565b60006020828403121561016157600080fd5b81356001600160a01b038116811461017857600080fd5b9392505050565b6001600160a01b039190911681526020019056fea2646970667358221220efe062dec8ea86711370078211e20024d6a01ee20d9c1c774ab7748221f268bd64736f6c634300080f0033",
    "sourceMap": "88:197:136:-:0;;;131:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4341:6:54;:16;;-1:-1:-1;;;;;;4341:16:54;-1:-1:-1;;;;;4341:16:54;;;;;;;;;;88:197:136;;14:306:168;100:6;153:2;141:9;132:7;128:23;124:32;121:52;;;169:1;166;159:12;121:52;195:16;;-1:-1:-1;;;;;240:31:168;;230:42;;220:70;;286:1;283;276:12;220:70;309:5;14:306;-1:-1:-1;;;14:306:168:o;:::-;88:197:136;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631ae7ec2e1461005c5780634657b36c14610077578063d4aae0c41461008c578063ea643914146100ac578063ffa1ad74146100b4575b600080fd5b604051641a5b9d985b60da1b81526020015b60405180910390f35b61008a61008536600461014f565b6100c8565b005b60005461009f906001600160a01b031681565b60405161006e919061017f565b61008a610120565b60408051600080825260208201520161006e565b6000546001600160a01b031633146100fe573360405163053e900f60e21b81526004016100f5919061017f565b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461014d573360405163053e900f60e21b81526004016100f5919061017f565b565b60006020828403121561016157600080fd5b81356001600160a01b038116811461017857600080fd5b9392505050565b6001600160a01b039190911681526020019056fea2646970667358221220efe062dec8ea86711370078211e20024d6a01ee20d9c1c774ab7748221f268bd64736f6c634300080f0033",
    "sourceMap": "88:197:136:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;183:100;;;-1:-1:-1;;;188:54:168;;176:2;161:18;183:100:136;;;;;;;;4652:97:54;;;;;;:::i;:::-;;:::i;:::-;;4276:20;;;;;-1:-1:-1;;;;;4276:20:54;;;;;;;;;;:::i;6112:46::-;;;:::i;5777:78::-;;;;5827:11;950:36:168;;;1017:2;1002:18;;995:45;923:18;5777:78:54;784:262:168;4652:97:54;4504:6;;-1:-1:-1;;;;;4504:6:54;4482:10;:29;4478:78;;4545:10;4520:36;;-1:-1:-1;;;4520:36:54;;;;;;;;:::i;:::-;;;;;;;;4478:78;4723:6:::1;:19:::0;;-1:-1:-1;;;;;;4723:19:54::1;-1:-1:-1::0;;;;;4723:19:54;;;::::1;::::0;;;::::1;::::0;;4652:97::o;6112:46::-;4504:6;;-1:-1:-1;;;;;4504:6:54;4482:10;:29;4478:78;;4545:10;4520:36;;-1:-1:-1;;;4520:36:54;;;;;;;;:::i;4478:78::-;6112:46::o;253:302:168:-;328:6;381:2;369:9;360:7;356:23;352:32;349:52;;;397:1;394;387:12;349:52;423:23;;-1:-1:-1;;;;;475:31:168;;465:42;;455:70;;521:1;518;511:12;455:70;544:5;253:302;-1:-1:-1;;;253:302:168:o;560:219::-;-1:-1:-1;;;;;740:32:168;;;;722:51;;710:2;695:18;;560:219::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "INIT()": "ea643914",
    "KEYCODE()": "1ae7ec2e",
    "VERSION()": "ffa1ad74",
    "changeKernel(address)": "4657b36c",
    "kernel()": "d4aae0c4"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Kernel\",\"name\":\"kernel_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"}],\"name\":\"KernelAdapter_OnlyKernel\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policy_\",\"type\":\"address\"}],\"name\":\"Module_PolicyNotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEYCODE\",\"outputs\":[{\"internalType\":\"Keycode\",\"name\":\"\",\"type\":\"bytes5\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"major\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minor\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Kernel\",\"name\":\"newKernel_\",\"type\":\"address\"}],\"name\":\"changeKernel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"internalType\":\"contract Kernel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"INIT()\":{\"details\":\"This function is called when the module is installed or upgraded by the kernel.MUST BE GATED BY onlyKernel. Used to encompass any initialization or upgrade logic.\"},\"VERSION()\":{\"returns\":{\"major\":\"- Major version upgrade indicates breaking change to the interface.\",\"minor\":\"- Minor version change retains backward-compatible interface.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"INIT()\":{\"notice\":\"Initialization function for the module\"},\"KEYCODE()\":{\"notice\":\"5 byte identifier for a module.\"},\"VERSION()\":{\"notice\":\"Returns which semantic version of a module is being implemented.\"},\"changeKernel(address)\":{\"notice\":\"Function used by kernel when migrating to a new kernel.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/test/mocks/MockInvalidModule.sol\":\"MockInvalidModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":balancer-v2/=lib/balancer-v2/\",\":bonds/=lib/bonds/src/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":interfaces/=src/interfaces/\",\":libraries/=src/libraries/\",\":modules/=src/modules/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":policies/=src/policies/\",\":solmate/=lib/solmate/src/\",\":test/=src/test/\"]},\"sources\":{\"src/Kernel.sol\":{\"keccak256\":\"0xda08377f05abc6953fa8abdc4c1f3e3cb720e0dc1af3ada355ef1e016badd1b0\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://9a8476cf62abf0800ef5ec78e766e73c1b9a58703a98fe2599c4f1b9f444add5\",\"dweb:/ipfs/QmWz4yYL3KzHGsRtNd1Kp2Vyhy7yh5a92pMSmQok6B3cab\"]},\"src/test/mocks/MockInvalidModule.sol\":{\"keccak256\":\"0x24dfde79029880873bf1488970b21051aba72a6699cef914e8e671393d688cb9\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://3bc726d9a064b9392c1b1f90ef71dbd3d0e24fc29662577ea0000c08922126fd\",\"dweb:/ipfs/QmXihVLfbrsKhbCNuHu5pz9SpgphUMCkHnWhTcDvuXVvSB\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract Kernel",
              "name": "kernel_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "caller_",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "KernelAdapter_OnlyKernel"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "policy_",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "Module_PolicyNotPermitted"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "INIT"
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "KEYCODE",
          "outputs": [
            {
              "internalType": "Keycode",
              "name": "",
              "type": "bytes5"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "VERSION",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "major",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "minor",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract Kernel",
              "name": "newKernel_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "changeKernel"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "kernel",
          "outputs": [
            {
              "internalType": "contract Kernel",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "INIT()": {
            "details": "This function is called when the module is installed or upgraded by the kernel.MUST BE GATED BY onlyKernel. Used to encompass any initialization or upgrade logic."
          },
          "VERSION()": {
            "returns": {
              "major": "- Major version upgrade indicates breaking change to the interface.",
              "minor": "- Minor version change retains backward-compatible interface."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "INIT()": {
            "notice": "Initialization function for the module"
          },
          "KEYCODE()": {
            "notice": "5 byte identifier for a module."
          },
          "VERSION()": {
            "notice": "Returns which semantic version of a module is being implemented."
          },
          "changeKernel(address)": {
            "notice": "Function used by kernel when migrating to a new kernel."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":balancer-v2/=lib/balancer-v2/",
        ":bonds/=lib/bonds/src/",
        ":ds-test/=lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":hardhat/=node_modules/hardhat/",
        ":interfaces/=src/interfaces/",
        ":libraries/=src/libraries/",
        ":modules/=src/modules/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":policies/=src/policies/",
        ":solmate/=lib/solmate/src/",
        ":test/=src/test/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 10
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/test/mocks/MockInvalidModule.sol": "MockInvalidModule"
      },
      "libraries": {}
    },
    "sources": {
      "src/Kernel.sol": {
        "keccak256": "0xda08377f05abc6953fa8abdc4c1f3e3cb720e0dc1af3ada355ef1e016badd1b0",
        "urls": [
          "bzz-raw://9a8476cf62abf0800ef5ec78e766e73c1b9a58703a98fe2599c4f1b9f444add5",
          "dweb:/ipfs/QmWz4yYL3KzHGsRtNd1Kp2Vyhy7yh5a92pMSmQok6B3cab"
        ],
        "license": "AGPL-3.0-only"
      },
      "src/test/mocks/MockInvalidModule.sol": {
        "keccak256": "0x24dfde79029880873bf1488970b21051aba72a6699cef914e8e671393d688cb9",
        "urls": [
          "bzz-raw://3bc726d9a064b9392c1b1f90ef71dbd3d0e24fc29662577ea0000c08922126fd",
          "dweb:/ipfs/QmXihVLfbrsKhbCNuHu5pz9SpgphUMCkHnWhTcDvuXVvSB"
        ],
        "license": "AGPL-3.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/test/mocks/MockInvalidModule.sol",
    "id": 70526,
    "exportedSymbols": {
      "Actions": [
        30446
      ],
      "Instruction": [
        30452
      ],
      "InvalidKeycode": [
        30469
      ],
      "Kernel": [
        31595
      ],
      "KernelAdapter": [
        30610
      ],
      "Keycode": [
        30460
      ],
      "MockInvalidModule": [
        70525
      ],
      "Module": [
        30675
      ],
      "Permissions": [
        30458
      ],
      "Policy": [
        30757
      ],
      "TargetNotAContract": [
        30464
      ],
      "ensureContract": [
        30513
      ],
      "ensureValidKeycode": [
        30558
      ],
      "fromKeycode": [
        30497
      ],
      "toKeycode": [
        30483
      ]
    },
    "nodeType": "SourceUnit",
    "src": "37:249:136",
    "nodes": [
      {
        "id": 70499,
        "nodeType": "PragmaDirective",
        "src": "37:23:136",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 70500,
        "nodeType": "ImportDirective",
        "src": "62:24:136",
        "nodes": [],
        "absolutePath": "src/Kernel.sol",
        "file": "src/Kernel.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 70526,
        "sourceUnit": 31596,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 70525,
        "nodeType": "ContractDefinition",
        "src": "88:197:136",
        "nodes": [
          {
            "id": 70512,
            "nodeType": "FunctionDefinition",
            "src": "131:46:136",
            "nodes": [],
            "body": {
              "id": 70511,
              "nodeType": "Block",
              "src": "175:2:136",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 70508,
                    "name": "kernel_",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 70505,
                    "src": "166:7:136",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Kernel_$31595",
                      "typeString": "contract Kernel"
                    }
                  }
                ],
                "id": 70509,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 70507,
                  "name": "Module",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 30675,
                  "src": "159:6:136"
                },
                "nodeType": "ModifierInvocation",
                "src": "159:15:136"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 70506,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70505,
                  "mutability": "mutable",
                  "name": "kernel_",
                  "nameLocation": "150:7:136",
                  "nodeType": "VariableDeclaration",
                  "scope": 70512,
                  "src": "143:14:136",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Kernel_$31595",
                    "typeString": "contract Kernel"
                  },
                  "typeName": {
                    "id": 70504,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 70503,
                      "name": "Kernel",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 31595,
                      "src": "143:6:136"
                    },
                    "referencedDeclaration": 31595,
                    "src": "143:6:136",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Kernel_$31595",
                      "typeString": "contract Kernel"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "142:16:136"
            },
            "returnParameters": {
              "id": 70510,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "175:0:136"
            },
            "scope": 70525,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 70524,
            "nodeType": "FunctionDefinition",
            "src": "183:100:136",
            "nodes": [],
            "body": {
              "id": 70523,
              "nodeType": "Block",
              "src": "241:42:136",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "696e76616c",
                        "id": 70520,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "268:7:136",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_35d75d897b099072cad71356f48e9d2ca890e22b9fa8987cf9d2c095c10be822",
                          "typeString": "literal_string \"inval\""
                        },
                        "value": "inval"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_35d75d897b099072cad71356f48e9d2ca890e22b9fa8987cf9d2c095c10be822",
                          "typeString": "literal_string \"inval\""
                        }
                      ],
                      "id": 70519,
                      "name": "toKeycode",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30483,
                      "src": "258:9:136",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes5_$returns$_t_userDefinedValueType$_Keycode_$30460_$",
                        "typeString": "function (bytes5) pure returns (Keycode)"
                      }
                    },
                    "id": 70521,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "258:18:136",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_Keycode_$30460",
                      "typeString": "Keycode"
                    }
                  },
                  "functionReturnParameters": 70518,
                  "id": 70522,
                  "nodeType": "Return",
                  "src": "251:25:136"
                }
              ]
            },
            "baseFunctions": [
              30658
            ],
            "functionSelector": "1ae7ec2e",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "KEYCODE",
            "nameLocation": "192:7:136",
            "overrides": {
              "id": 70514,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "214:8:136"
            },
            "parameters": {
              "id": 70513,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "199:2:136"
            },
            "returnParameters": {
              "id": 70518,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70517,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 70524,
                  "src": "232:7:136",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_Keycode_$30460",
                    "typeString": "Keycode"
                  },
                  "typeName": {
                    "id": 70516,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 70515,
                      "name": "Keycode",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 30460,
                      "src": "232:7:136"
                    },
                    "referencedDeclaration": 30460,
                    "src": "232:7:136",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_Keycode_$30460",
                      "typeString": "Keycode"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "231:9:136"
            },
            "scope": 70525,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 70501,
              "name": "Module",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 30675,
              "src": "118:6:136"
            },
            "id": 70502,
            "nodeType": "InheritanceSpecifier",
            "src": "118:6:136"
          }
        ],
        "canonicalName": "MockInvalidModule",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          70525,
          30675,
          30610
        ],
        "name": "MockInvalidModule",
        "nameLocation": "97:17:136",
        "scope": 70526,
        "usedErrors": [
          30563,
          30617
        ]
      }
    ],
    "license": "AGPL-3.0"
  },
  "id": 136
}